/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/port/tdm/ds3/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/port/tdm/ds3/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                 `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink represents the /nokia-conf/configure/port/tdm/ds3/maintenance-data-link YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink struct {
	EquipmentIdCode     *string                                                                   `path:"equipment-id-code" module:"nokia-conf"`
	FacilityIdCode      *string                                                                   `path:"facility-id-code" module:"nokia-conf"`
	FrameIdCode         *string                                                                   `path:"frame-id-code" module:"nokia-conf"`
	GeneratorString     *string                                                                   `path:"generator-string" module:"nokia-conf"`
	LocationIdCode      *string                                                                   `path:"location-id-code" module:"nokia-conf"`
	PortString          *string                                                                   `path:"port-string" module:"nokia-conf"`
	TransmitMessageType *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType `path:"transmit-message-type" module:"nokia-conf"`
	UnitIdCode          *string                                                                   `path:"unit-id-code" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) IsYANGGoStruct() {}

// GetOrCreateTransmitMessageType retrieves the value of the TransmitMessageType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetOrCreateTransmitMessageType() *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType {
	if t.TransmitMessageType != nil {
		return t.TransmitMessageType
	}
	t.TransmitMessageType = &NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType{}
	return t.TransmitMessageType
}

// GetTransmitMessageType returns the value of the TransmitMessageType struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink. If the receiver or the field TransmitMessageType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetTransmitMessageType() *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType {
	if t != nil && t.TransmitMessageType != nil {
		return t.TransmitMessageType
	}
	return nil
}

// GetEquipmentIdCode retrieves the value of the leaf EquipmentIdCode from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EquipmentIdCode is set, it can
// safely use t.GetEquipmentIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EquipmentIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetEquipmentIdCode() string {
	if t == nil || t.EquipmentIdCode == nil {
		return ""
	}
	return *t.EquipmentIdCode
}

// GetFacilityIdCode retrieves the value of the leaf FacilityIdCode from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityIdCode is set, it can
// safely use t.GetFacilityIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetFacilityIdCode() string {
	if t == nil || t.FacilityIdCode == nil {
		return ""
	}
	return *t.FacilityIdCode
}

// GetFrameIdCode retrieves the value of the leaf FrameIdCode from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameIdCode is set, it can
// safely use t.GetFrameIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetFrameIdCode() string {
	if t == nil || t.FrameIdCode == nil {
		return ""
	}
	return *t.FrameIdCode
}

// GetGeneratorString retrieves the value of the leaf GeneratorString from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GeneratorString is set, it can
// safely use t.GetGeneratorString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GeneratorString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetGeneratorString() string {
	if t == nil || t.GeneratorString == nil {
		return ""
	}
	return *t.GeneratorString
}

// GetLocationIdCode retrieves the value of the leaf LocationIdCode from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocationIdCode is set, it can
// safely use t.GetLocationIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocationIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetLocationIdCode() string {
	if t == nil || t.LocationIdCode == nil {
		return ""
	}
	return *t.LocationIdCode
}

// GetPortString retrieves the value of the leaf PortString from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortString is set, it can
// safely use t.GetPortString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetPortString() string {
	if t == nil || t.PortString == nil {
		return ""
	}
	return *t.PortString
}

// GetUnitIdCode retrieves the value of the leaf UnitIdCode from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnitIdCode is set, it can
// safely use t.GetUnitIdCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnitIdCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) GetUnitIdCode() string {
	if t == nil || t.UnitIdCode == nil {
		return ""
	}
	return *t.UnitIdCode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TransmitMessageType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink.
func (*NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType represents the /nokia-conf/configure/port/tdm/ds3/maintenance-data-link/transmit-message-type YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType struct {
	IdleSignal *bool `path:"idle-signal" module:"nokia-conf"`
	Path       *bool `path:"path" module:"nokia-conf"`
	TestSignal *bool `path:"test-signal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) IsYANGGoStruct() {}

// GetIdleSignal retrieves the value of the leaf IdleSignal from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleSignal is set, it can
// safely use t.GetIdleSignal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleSignal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) GetIdleSignal() bool {
	if t == nil || t.IdleSignal == nil {
		return false
	}
	return *t.IdleSignal
}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) GetPath() bool {
	if t == nil || t.Path == nil {
		return false
	}
	return *t.Path
}

// GetTestSignal retrieves the value of the leaf TestSignal from the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestSignal is set, it can
// safely use t.GetTestSignal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestSignal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) GetTestSignal() bool {
	if t == nil || t.TestSignal == nil {
		return false
	}
	return *t.TestSignal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdleSignal == nil {
		var v bool = false
		t.IdleSignal = &v
	}
	if t.Path == nil {
		var v bool = false
		t.Path = &v
	}
	if t.TestSignal == nil {
		var v bool = false
		t.TestSignal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType.
func (*NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink_TransmitMessageType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Network represents the /nokia-conf/configure/port/tdm/ds3/network YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Network struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy        *string  `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Port_Tdm_Ds3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Network.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Ppp represents the /nokia-conf/configure/port/tdm/ds3/ppp YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Ppp struct {
	ApplyGroups        []string                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Keepalive          *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Ppp) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive{}
	return t.Keepalive
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) GetKeepalive() *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds3_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds3_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Ppp.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive represents the /nokia-conf/configure/port/tdm/ds3/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive struct {
	DropCount *uint32                                                       `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm represents the /nokia-conf/configure/port/tdm/ds3/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm.
func (*NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Subrate represents the /nokia-conf/configure/port/tdm/ds3/subrate YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Subrate struct {
	CsuMode  E_NokiaConf_Configure_Port_Tdm_Ds3_Subrate_CsuMode `path:"csu-mode" module:"nokia-conf"`
	RateStep *uint32                                            `path:"rate-step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Subrate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Subrate) IsYANGGoStruct() {}

// GetCsuMode retrieves the value of the leaf CsuMode from the NokiaConf_Configure_Port_Tdm_Ds3_Subrate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsuMode is set, it can
// safely use t.GetCsuMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsuMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Subrate) GetCsuMode() E_NokiaConf_Configure_Port_Tdm_Ds3_Subrate_CsuMode {
	if t == nil || t.CsuMode == 0 {
		return 0
	}
	return t.CsuMode
}

// GetRateStep retrieves the value of the leaf RateStep from the NokiaConf_Configure_Port_Tdm_Ds3_Subrate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateStep is set, it can
// safely use t.GetRateStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateStep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Subrate) GetRateStep() uint32 {
	if t == nil || t.RateStep == nil {
		return 0
	}
	return *t.RateStep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Subrate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Subrate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Subrate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Subrate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Subrate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Subrate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Subrate.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Subrate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1 represents the /nokia-conf/configure/port/tdm/e1 YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1 struct {
	AdminState         E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	BerThreshold       *NokiaConf_Configure_Port_Tdm_E1_BerThreshold            `path:"ber-threshold" module:"nokia-conf"`
	ChannelGroup       map[uint32]*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup `path:"channel-group" module:"nokia-conf"`
	ClockSource        E_NokiaConf_Configure_Port_Tdm_E1_ClockSource            `path:"clock-source" module:"nokia-conf"`
	E1Index            *string                                                  `path:"e1-index" module:"nokia-conf"`
	Framing            E_NokiaConf_Configure_Port_Tdm_E1_Framing                `path:"framing" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Port_Tdm_E1_HoldTime                `path:"hold-time" module:"nokia-conf"`
	Loopback           E_NokiaConf_Configure_Port_Tdm_E1_Loopback               `path:"loopback" module:"nokia-conf"`
	NationalBits       *NokiaConf_Configure_Port_Tdm_E1_NationalBits            `path:"national-bits" module:"nokia-conf"`
	ReportAlarm        *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm             `path:"report-alarm" module:"nokia-conf"`
	SignalMode         E_NokiaConf_Configure_Port_Tdm_E1_SignalMode             `path:"signal-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1) IsYANGGoStruct() {}

// NewChannelGroup creates a new entry in the ChannelGroup list of the
// NokiaConf_Configure_Port_Tdm_E1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm_E1) NewChannelGroup(Ds0Index uint32) (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[uint32]*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup)
	}

	key := Ds0Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChannelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChannelGroup", key)
	}

	t.ChannelGroup[key] = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup{
		Ds0Index: &Ds0Index,
	}

	return t.ChannelGroup[key], nil
}

// RenameChannelGroup renames an entry in the list ChannelGroup within
// the NokiaConf_Configure_Port_Tdm_E1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm_E1) RenameChannelGroup(oldK, newK uint32) error {
	if _, ok := t.ChannelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChannelGroup", newK)
	}

	e, ok := t.ChannelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChannelGroup", oldK)
	}
	e.Ds0Index = &newK

	t.ChannelGroup[newK] = e
	delete(t.ChannelGroup, oldK)
	return nil
}

// GetOrCreateChannelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_E1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetOrCreateChannelGroup(Ds0Index uint32) *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup {

	key := Ds0Index

	if v, ok := t.ChannelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannelGroup(Ds0Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannelGroup got unexpected error: %v", err))
	}
	return v
}

// GetChannelGroup retrieves the value with the specified key from
// the ChannelGroup map field of NokiaConf_Configure_Port_Tdm_E1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetChannelGroup(Ds0Index uint32) *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup {

	if t == nil {
		return nil
	}

	key := Ds0Index

	if lm, ok := t.ChannelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_E1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm_E1) DeleteChannelGroup(Ds0Index uint32) {
	key := Ds0Index

	delete(t.ChannelGroup, key)
}

// AppendChannelGroup appends the supplied NokiaConf_Configure_Port_Tdm_E1_ChannelGroup struct to the
// list ChannelGroup of NokiaConf_Configure_Port_Tdm_E1. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_E1_ChannelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm_E1) AppendChannelGroup(v *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) error {
	if v.Ds0Index == nil {
		return fmt.Errorf("invalid nil key received for Ds0Index")
	}

	key := *v.Ds0Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[uint32]*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup)
	}

	if _, ok := t.ChannelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChannelGroup %v", key)
	}

	t.ChannelGroup[key] = v
	return nil
}

// GetOrCreateBerThreshold retrieves the value of the BerThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetOrCreateBerThreshold() *NokiaConf_Configure_Port_Tdm_E1_BerThreshold {
	if t.BerThreshold != nil {
		return t.BerThreshold
	}
	t.BerThreshold = &NokiaConf_Configure_Port_Tdm_E1_BerThreshold{}
	return t.BerThreshold
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetOrCreateHoldTime() *NokiaConf_Configure_Port_Tdm_E1_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Port_Tdm_E1_HoldTime{}
	return t.HoldTime
}

// GetOrCreateNationalBits retrieves the value of the NationalBits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetOrCreateNationalBits() *NokiaConf_Configure_Port_Tdm_E1_NationalBits {
	if t.NationalBits != nil {
		return t.NationalBits
	}
	t.NationalBits = &NokiaConf_Configure_Port_Tdm_E1_NationalBits{}
	return t.NationalBits
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Tdm_E1_ReportAlarm{}
	return t.ReportAlarm
}

// GetBerThreshold returns the value of the BerThreshold struct pointer
// from NokiaConf_Configure_Port_Tdm_E1. If the receiver or the field BerThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetBerThreshold() *NokiaConf_Configure_Port_Tdm_E1_BerThreshold {
	if t != nil && t.BerThreshold != nil {
		return t.BerThreshold
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Port_Tdm_E1. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetHoldTime() *NokiaConf_Configure_Port_Tdm_E1_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetNationalBits returns the value of the NationalBits struct pointer
// from NokiaConf_Configure_Port_Tdm_E1. If the receiver or the field NationalBits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetNationalBits() *NokiaConf_Configure_Port_Tdm_E1_NationalBits {
	if t != nil && t.NationalBits != nil {
		return t.NationalBits
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Tdm_E1. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetReportAlarm() *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetClockSource() E_NokiaConf_Configure_Port_Tdm_E1_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return 0
	}
	return t.ClockSource
}

// GetE1Index retrieves the value of the leaf E1Index from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if E1Index is set, it can
// safely use t.GetE1Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.E1Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetE1Index() string {
	if t == nil || t.E1Index == nil {
		return ""
	}
	return *t.E1Index
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetFraming() E_NokiaConf_Configure_Port_Tdm_E1_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Port_Tdm_E1_Framing_g704
	}
	return t.Framing
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetLoopback() E_NokiaConf_Configure_Port_Tdm_E1_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetSignalMode retrieves the value of the leaf SignalMode from the NokiaConf_Configure_Port_Tdm_E1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalMode is set, it can
// safely use t.GetSignalMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1) GetSignalMode() E_NokiaConf_Configure_Port_Tdm_E1_SignalMode {
	if t == nil || t.SignalMode == 0 {
		return 0
	}
	return t.SignalMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Port_Tdm_E1_Framing_g704
	}
	t.BerThreshold.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.NationalBits.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	for _, e := range t.ChannelGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_E1 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_E1) ΛListKeyMap() (map[string]interface{}, error) {
	if t.E1Index == nil {
		return nil, fmt.Errorf("nil value for key E1Index")
	}

	return map[string]interface{}{
		"e1-index": *t.E1Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1.
func (*NokiaConf_Configure_Port_Tdm_E1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_BerThreshold represents the /nokia-conf/configure/port/tdm/e1/ber-threshold YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_BerThreshold struct {
	SignalDegrade *uint32 `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *uint32 `path:"signal-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_BerThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_BerThreshold) IsYANGGoStruct() {}

// GetSignalDegrade retrieves the value of the leaf SignalDegrade from the NokiaConf_Configure_Port_Tdm_E1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalDegrade is set, it can
// safely use t.GetSignalDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_BerThreshold) GetSignalDegrade() uint32 {
	if t == nil || t.SignalDegrade == nil {
		return 5
	}
	return *t.SignalDegrade
}

// GetSignalFailure retrieves the value of the leaf SignalFailure from the NokiaConf_Configure_Port_Tdm_E1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalFailure is set, it can
// safely use t.GetSignalFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_BerThreshold) GetSignalFailure() uint32 {
	if t == nil || t.SignalFailure == nil {
		return 50
	}
	return *t.SignalFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_BerThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_BerThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SignalDegrade == nil {
		var v uint32 = 5
		t.SignalDegrade = &v
	}
	if t.SignalFailure == nil {
		var v uint32 = 50
		t.SignalFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_BerThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_BerThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_BerThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_BerThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_BerThreshold.
func (*NokiaConf_Configure_Port_Tdm_E1_BerThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup represents the /nokia-conf/configure/port/tdm/e1/channel-group YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup struct {
	AdminState             E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Crc                    *uint32                                                       `path:"crc" module:"nokia-conf"`
	Description            *string                                                       `path:"description" module:"nokia-conf"`
	Ds0Index               *uint32                                                       `path:"ds0-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress          `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                           `path:"encap-type" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag                          `path:"idle-cycle-flag" module:"nokia-conf"`
	IdlePayloadFill        *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill `path:"idle-payload-fill" module:"nokia-conf"`
	IdleSignalFill         *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill  `path:"idle-signal-fill" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                       `path:"load-balancing-algorithm" module:"nokia-conf"`
	MacAddress             *string                                                       `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Mode           `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                       `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network         `path:"network" module:"nokia-conf"`
	Ppp                    *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp             `path:"ppp" module:"nokia-conf"`
	Speed                  *uint32                                                       `path:"speed" module:"nokia-conf"`
	Timeslot               []uint32                                                      `path:"timeslot" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetOrCreateEgress() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress{}
	return t.Egress
}

// GetOrCreateIdlePayloadFill retrieves the value of the IdlePayloadFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetOrCreateIdlePayloadFill() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill {
	if t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	t.IdlePayloadFill = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill{}
	return t.IdlePayloadFill
}

// GetOrCreateIdleSignalFill retrieves the value of the IdleSignalFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetOrCreateIdleSignalFill() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill {
	if t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	t.IdleSignalFill = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill{}
	return t.IdleSignalFill
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetOrCreateNetwork() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetOrCreatePpp() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp{}
	return t.Ppp
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetEgress() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIdlePayloadFill returns the value of the IdlePayloadFill struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup. If the receiver or the field IdlePayloadFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetIdlePayloadFill() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill {
	if t != nil && t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	return nil
}

// GetIdleSignalFill returns the value of the IdleSignalFill struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup. If the receiver or the field IdleSignalFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetIdleSignalFill() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill {
	if t != nil && t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetNetwork() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetPpp() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return "DS0GRP"
	}
	return *t.Description
}

// GetDs0Index retrieves the value of the leaf Ds0Index from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds0Index is set, it can
// safely use t.GetDs0Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds0Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetDs0Index() uint32 {
	if t == nil || t.Ds0Index == nil {
		return 0
	}
	return *t.Ds0Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetMode() E_NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetSpeed() uint32 {
	if t == nil || t.Speed == nil {
		return 64
	}
	return *t.Speed
}

// GetTimeslot retrieves the value of the leaf Timeslot from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeslot is set, it can
// safely use t.GetTimeslot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeslot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) GetTimeslot() []uint32 {
	if t == nil || t.Timeslot == nil {
		return nil
	}
	return t.Timeslot
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Description == nil {
		var v string = "DS0GRP"
		t.Description = &v
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	if t.Speed == nil {
		var v uint32 = 64
		t.Speed = &v
	}
	t.Egress.PopulateDefaults()
	t.IdlePayloadFill.PopulateDefaults()
	t.IdleSignalFill.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ds0Index == nil {
		return nil, fmt.Errorf("nil value for key Ds0Index")
	}

	return map[string]interface{}{
		"ds0-index": *t.Ds0Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress represents the /nokia-conf/configure/port/tdm/e1/channel-group/egress YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/port/tdm/e1/channel-group/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct {
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[uint32]*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate            *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate          `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel uint32) (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: &PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel uint32) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel      *uint32                                                                                              `path:"priority-level" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() uint32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/port/tdm/e1/channel-group/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                             `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill represents the /nokia-conf/configure/port/tdm/e1/channel-group/idle-payload-fill YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdlePayloadFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill represents the /nokia-conf/configure/port/tdm/e1/channel-group/idle-signal-fill YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_IdleSignalFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network represents the /nokia-conf/configure/port/tdm/e1/channel-group/network YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy        *string  `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp represents the /nokia-conf/configure/port/tdm/e1/channel-group/ppp YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BerSfLinkDown      *bool                                                       `path:"ber-sf-link-down" module:"nokia-conf"`
	Compress           *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress  `path:"compress" module:"nokia-conf"`
	Keepalive          *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) IsYANGGoStruct() {}

// GetOrCreateCompress retrieves the value of the Compress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) GetOrCreateCompress() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress {
	if t.Compress != nil {
		return t.Compress
	}
	t.Compress = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress{}
	return t.Compress
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive{}
	return t.Keepalive
}

// GetCompress returns the value of the Compress struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp. If the receiver or the field Compress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) GetCompress() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress {
	if t != nil && t.Compress != nil {
		return t.Compress
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) GetKeepalive() *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBerSfLinkDown retrieves the value of the leaf BerSfLinkDown from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSfLinkDown is set, it can
// safely use t.GetBerSfLinkDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSfLinkDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) GetBerSfLinkDown() bool {
	if t == nil || t.BerSfLinkDown == nil {
		return false
	}
	return *t.BerSfLinkDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BerSfLinkDown == nil {
		var v bool = false
		t.BerSfLinkDown = &v
	}
	t.Compress.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress represents the /nokia-conf/configure/port/tdm/e1/channel-group/ppp/compress YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress struct {
	Acfc *bool `path:"acfc" module:"nokia-conf"`
	Pfc  *bool `path:"pfc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) IsYANGGoStruct() {}

// GetAcfc retrieves the value of the leaf Acfc from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Acfc is set, it can
// safely use t.GetAcfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Acfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) GetAcfc() bool {
	if t == nil || t.Acfc == nil {
		return false
	}
	return *t.Acfc
}

// GetPfc retrieves the value of the leaf Pfc from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pfc is set, it can
// safely use t.GetPfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) GetPfc() bool {
	if t == nil || t.Pfc == nil {
		return false
	}
	return *t.Pfc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Acfc == nil {
		var v bool = false
		t.Acfc = &v
	}
	if t.Pfc == nil {
		var v bool = false
		t.Pfc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Compress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive represents the /nokia-conf/configure/port/tdm/e1/channel-group/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive struct {
	DropCount *uint32                                                                   `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive.
func (*NokiaConf_Configure_Port_Tdm_E1_ChannelGroup_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_HoldTime represents the /nokia-conf/configure/port/tdm/e1/hold-time YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Port_Tdm_E1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Port_Tdm_E1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 0
		t.Down = &v
	}
	if t.Up == nil {
		var v uint32 = 0
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_HoldTime.
func (*NokiaConf_Configure_Port_Tdm_E1_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_NationalBits represents the /nokia-conf/configure/port/tdm/e1/national-bits YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_NationalBits struct {
	Sa4 *bool `path:"sa4" module:"nokia-conf"`
	Sa5 *bool `path:"sa5" module:"nokia-conf"`
	Sa6 *bool `path:"sa6" module:"nokia-conf"`
	Sa7 *bool `path:"sa7" module:"nokia-conf"`
	Sa8 *bool `path:"sa8" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_NationalBits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_NationalBits) IsYANGGoStruct() {}

// GetSa4 retrieves the value of the leaf Sa4 from the NokiaConf_Configure_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa4 is set, it can
// safely use t.GetSa4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) GetSa4() bool {
	if t == nil || t.Sa4 == nil {
		return false
	}
	return *t.Sa4
}

// GetSa5 retrieves the value of the leaf Sa5 from the NokiaConf_Configure_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa5 is set, it can
// safely use t.GetSa5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) GetSa5() bool {
	if t == nil || t.Sa5 == nil {
		return false
	}
	return *t.Sa5
}

// GetSa6 retrieves the value of the leaf Sa6 from the NokiaConf_Configure_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa6 is set, it can
// safely use t.GetSa6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) GetSa6() bool {
	if t == nil || t.Sa6 == nil {
		return false
	}
	return *t.Sa6
}

// GetSa7 retrieves the value of the leaf Sa7 from the NokiaConf_Configure_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa7 is set, it can
// safely use t.GetSa7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) GetSa7() bool {
	if t == nil || t.Sa7 == nil {
		return false
	}
	return *t.Sa7
}

// GetSa8 retrieves the value of the leaf Sa8 from the NokiaConf_Configure_Port_Tdm_E1_NationalBits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sa8 is set, it can
// safely use t.GetSa8() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sa8 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) GetSa8() bool {
	if t == nil || t.Sa8 == nil {
		return false
	}
	return *t.Sa8
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_NationalBits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Sa4 == nil {
		var v bool = false
		t.Sa4 = &v
	}
	if t.Sa5 == nil {
		var v bool = false
		t.Sa5 = &v
	}
	if t.Sa6 == nil {
		var v bool = false
		t.Sa6 = &v
	}
	if t.Sa7 == nil {
		var v bool = false
		t.Sa7 = &v
	}
	if t.Sa8 == nil {
		var v bool = false
		t.Sa8 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_NationalBits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_NationalBits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_NationalBits.
func (*NokiaConf_Configure_Port_Tdm_E1_NationalBits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E1_ReportAlarm represents the /nokia-conf/configure/port/tdm/e1/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Tdm_E1_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	BerSd  *bool `path:"ber-sd" module:"nokia-conf"`
	BerSf  *bool `path:"ber-sf" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E1_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetBerSd retrieves the value of the leaf BerSd from the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSd is set, it can
// safely use t.GetBerSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) GetBerSd() bool {
	if t == nil || t.BerSd == nil {
		return false
	}
	return *t.BerSd
}

// GetBerSf retrieves the value of the leaf BerSf from the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSf is set, it can
// safely use t.GetBerSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) GetBerSf() bool {
	if t == nil || t.BerSf == nil {
		return false
	}
	return *t.BerSf
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E1_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.BerSd == nil {
		var v bool = false
		t.BerSd = &v
	}
	if t.BerSf == nil {
		var v bool = false
		t.BerSf = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E1_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E1_ReportAlarm.
func (*NokiaConf_Configure_Port_Tdm_E1_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3 represents the /nokia-conf/configure/port/tdm/e3 YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3 struct {
	AdminState             E_NokiaTypesSros_AdminState                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	ClockSource            E_NokiaConf_Configure_Port_Tdm_E3_ClockSource `path:"clock-source" module:"nokia-conf"`
	Crc                    *uint32                                       `path:"crc" module:"nokia-conf"`
	Description            *string                                       `path:"description" module:"nokia-conf"`
	E3Index                *string                                       `path:"e3-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Port_Tdm_E3_Egress       `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType           `path:"encap-type" module:"nokia-conf"`
	Framing                E_NokiaConf_Configure_Port_Tdm_E3_Framing     `path:"framing" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag          `path:"idle-cycle-flag" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm       `path:"load-balancing-algorithm" module:"nokia-conf"`
	Loopback               E_NokiaConf_Configure_Port_Tdm_E3_Loopback    `path:"loopback" module:"nokia-conf"`
	MacAddress             *string                                       `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Port_Tdm_E3_Mode        `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                       `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Port_Tdm_E3_Network      `path:"network" module:"nokia-conf"`
	Ppp                    *NokiaConf_Configure_Port_Tdm_E3_Ppp          `path:"ppp" module:"nokia-conf"`
	ReportAlarm            *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm  `path:"report-alarm" module:"nokia-conf"`
	Scramble               *bool                                         `path:"scramble" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetOrCreateEgress() *NokiaConf_Configure_Port_Tdm_E3_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Tdm_E3_Egress{}
	return t.Egress
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetOrCreateNetwork() *NokiaConf_Configure_Port_Tdm_E3_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Port_Tdm_E3_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetOrCreatePpp() *NokiaConf_Configure_Port_Tdm_E3_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Port_Tdm_E3_Ppp{}
	return t.Ppp
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Tdm_E3_ReportAlarm{}
	return t.ReportAlarm
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Tdm_E3. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetEgress() *NokiaConf_Configure_Port_Tdm_E3_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Port_Tdm_E3. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetNetwork() *NokiaConf_Configure_Port_Tdm_E3_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Port_Tdm_E3. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetPpp() *NokiaConf_Configure_Port_Tdm_E3_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Tdm_E3. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetReportAlarm() *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetClockSource() E_NokiaConf_Configure_Port_Tdm_E3_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return NokiaConf_Configure_Port_Tdm_E3_ClockSource_node_timed
	}
	return t.ClockSource
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetDescription() string {
	if t == nil || t.Description == nil {
		return "E3"
	}
	return *t.Description
}

// GetE3Index retrieves the value of the leaf E3Index from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if E3Index is set, it can
// safely use t.GetE3Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.E3Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetE3Index() string {
	if t == nil || t.E3Index == nil {
		return ""
	}
	return *t.E3Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetFraming() E_NokiaConf_Configure_Port_Tdm_E3_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Port_Tdm_E3_Framing_g751
	}
	return t.Framing
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetLoopback() E_NokiaConf_Configure_Port_Tdm_E3_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetMode() E_NokiaConf_Configure_Port_Tdm_E3_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetScramble retrieves the value of the leaf Scramble from the NokiaConf_Configure_Port_Tdm_E3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scramble is set, it can
// safely use t.GetScramble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scramble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3) GetScramble() bool {
	if t == nil || t.Scramble == nil {
		return false
	}
	return *t.Scramble
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClockSource == 0 {
		t.ClockSource = NokiaConf_Configure_Port_Tdm_E3_ClockSource_node_timed
	}
	if t.Description == nil {
		var v string = "E3"
		t.Description = &v
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Port_Tdm_E3_Framing_g751
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	t.Egress.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_E3 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_E3) ΛListKeyMap() (map[string]interface{}, error) {
	if t.E3Index == nil {
		return nil, fmt.Errorf("nil value for key E3Index")
	}

	return map[string]interface{}{
		"e3-index": *t.E3Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3.
func (*NokiaConf_Configure_Port_Tdm_E3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Egress represents the /nokia-conf/configure/port/tdm/e3/egress YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Tdm_E3_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Egress.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/port/tdm/e3/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/port/tdm/e3/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides struct {
	ApplyGroups        []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[uint32]*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate            *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate          `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel uint32) (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: &PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel uint32) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/port/tdm/e3/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level struct {
	ApplyGroups        []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel      *uint32                                                                                 `path:"priority-level" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() uint32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/port/tdm/e3/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/port/tdm/e3/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/port/tdm/e3/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Port_Tdm_E3_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Network represents the /nokia-conf/configure/port/tdm/e3/network YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Network struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy        *string  `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Port_Tdm_E3_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Network.
func (*NokiaConf_Configure_Port_Tdm_E3_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Ppp represents the /nokia-conf/configure/port/tdm/e3/ppp YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Ppp struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Keepalive          *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Ppp) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive{}
	return t.Keepalive
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Port_Tdm_E3_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) GetKeepalive() *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_E3_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_E3_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Ppp.
func (*NokiaConf_Configure_Port_Tdm_E3_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive represents the /nokia-conf/configure/port/tdm/e3/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive struct {
	DropCount *uint32                                                      `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive.
func (*NokiaConf_Configure_Port_Tdm_E3_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_E3_ReportAlarm represents the /nokia-conf/configure/port/tdm/e3/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Tdm_E3_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_E3_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Port_Tdm_E3_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_E3_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_E3_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_E3_ReportAlarm.
func (*NokiaConf_Configure_Port_Tdm_E3_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_HoldTime represents the /nokia-conf/configure/port/tdm/hold-time YANG schema element.
type NokiaConf_Configure_Port_Tdm_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Port_Tdm_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 5
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Port_Tdm_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 5
		t.Down = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_HoldTime.
func (*NokiaConf_Configure_Port_Tdm_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Transceiver represents the /nokia-conf/configure/port/transceiver YANG schema element.
type NokiaConf_Configure_Port_Transceiver struct {
	ApplyGroups           []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DigitalCoherentOptics *bool    `path:"digital-coherent-optics" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Transceiver) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Transceiver) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Transceiver) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDigitalCoherentOptics retrieves the value of the leaf DigitalCoherentOptics from the NokiaConf_Configure_Port_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigitalCoherentOptics is set, it can
// safely use t.GetDigitalCoherentOptics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigitalCoherentOptics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Transceiver) GetDigitalCoherentOptics() bool {
	if t == nil || t.DigitalCoherentOptics == nil {
		return false
	}
	return *t.DigitalCoherentOptics
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Transceiver
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Transceiver) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DigitalCoherentOptics == nil {
		var v bool = false
		t.DigitalCoherentOptics = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Transceiver) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Transceiver) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Transceiver.
func (*NokiaConf_Configure_Port_Transceiver) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort represents the /nokia-conf/configure/pw-port YANG schema element.
type NokiaConf_Configure_PwPort struct {
	ApplyGroups        []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                      `path:"description" module:"nokia-conf"`
	Dot1QEtype         *string                                      `path:"dot1q-etype" module:"nokia-conf"`
	EncapType          E_NokiaConf_Configure_PwPort_EncapType       `path:"encap-type" module:"nokia-conf"`
	Epipe              map[string]*NokiaConf_Configure_PwPort_Epipe `path:"epipe" module:"nokia-conf"`
	OperGroup          *string                                      `path:"oper-group" module:"nokia-conf"`
	PwPortId           *uint32                                      `path:"pw-port-id" module:"nokia-conf"`
	QinqEtype          *string                                      `path:"qinq-etype" module:"nokia-conf"`
	Sdp                map[uint32]*NokiaConf_Configure_PwPort_Sdp   `path:"sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort) IsYANGGoStruct() {}

// NewEpipe creates a new entry in the Epipe list of the
// NokiaConf_Configure_PwPort struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PwPort) NewEpipe(ServiceName string) (*NokiaConf_Configure_PwPort_Epipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_PwPort_Epipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Epipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Epipe", key)
	}

	t.Epipe[key] = &NokiaConf_Configure_PwPort_Epipe{
		ServiceName: &ServiceName,
	}

	return t.Epipe[key], nil
}

// RenameEpipe renames an entry in the list Epipe within
// the NokiaConf_Configure_PwPort struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PwPort) RenameEpipe(oldK, newK string) error {
	if _, ok := t.Epipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Epipe", newK)
	}

	e, ok := t.Epipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Epipe", oldK)
	}
	e.ServiceName = &newK

	t.Epipe[newK] = e
	delete(t.Epipe, oldK)
	return nil
}

// GetOrCreateEpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PwPort. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PwPort) GetOrCreateEpipe(ServiceName string) *NokiaConf_Configure_PwPort_Epipe {

	key := ServiceName

	if v, ok := t.Epipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEpipe got unexpected error: %v", err))
	}
	return v
}

// GetEpipe retrieves the value with the specified key from
// the Epipe map field of NokiaConf_Configure_PwPort. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PwPort) GetEpipe(ServiceName string) *NokiaConf_Configure_PwPort_Epipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Epipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteEpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PwPort. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PwPort) DeleteEpipe(ServiceName string) {
	key := ServiceName

	delete(t.Epipe, key)
}

// AppendEpipe appends the supplied NokiaConf_Configure_PwPort_Epipe struct to the
// list Epipe of NokiaConf_Configure_PwPort. If the key value(s) specified in
// the supplied NokiaConf_Configure_PwPort_Epipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PwPort) AppendEpipe(v *NokiaConf_Configure_PwPort_Epipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_PwPort_Epipe)
	}

	if _, ok := t.Epipe[key]; ok {
		return fmt.Errorf("duplicate key for list Epipe %v", key)
	}

	t.Epipe[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_PwPort struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PwPort) NewSdp(SdpId uint32) (*NokiaConf_Configure_PwPort_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_PwPort_Sdp)
	}

	key := SdpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_PwPort_Sdp{
		SdpId: &SdpId,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_PwPort struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PwPort) RenameSdp(oldK, newK uint32) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.SdpId = &newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PwPort. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PwPort) GetOrCreateSdp(SdpId uint32) *NokiaConf_Configure_PwPort_Sdp {

	key := SdpId

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(SdpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_PwPort. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PwPort) GetSdp(SdpId uint32) *NokiaConf_Configure_PwPort_Sdp {

	if t == nil {
		return nil
	}

	key := SdpId

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PwPort. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PwPort) DeleteSdp(SdpId uint32) {
	key := SdpId

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_PwPort_Sdp struct to the
// list Sdp of NokiaConf_Configure_PwPort. If the key value(s) specified in
// the supplied NokiaConf_Configure_PwPort_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PwPort) AppendSdp(v *NokiaConf_Configure_PwPort_Sdp) error {
	if v.SdpId == nil {
		return fmt.Errorf("invalid nil key received for SdpId")
	}

	key := *v.SdpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[uint32]*NokiaConf_Configure_PwPort_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetDescription() string {
	if t == nil || t.Description == nil {
		return "PW Port"
	}
	return *t.Description
}

// GetDot1QEtype retrieves the value of the leaf Dot1QEtype from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1QEtype is set, it can
// safely use t.GetDot1QEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1QEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetDot1QEtype() string {
	if t == nil || t.Dot1QEtype == nil {
		return "33024"
	}
	return *t.Dot1QEtype
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetEncapType() E_NokiaConf_Configure_PwPort_EncapType {
	if t == nil || t.EncapType == 0 {
		return NokiaConf_Configure_PwPort_EncapType_dot1q
	}
	return t.EncapType
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetPwPortId retrieves the value of the leaf PwPortId from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwPortId is set, it can
// safely use t.GetPwPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetPwPortId() uint32 {
	if t == nil || t.PwPortId == nil {
		return 0
	}
	return *t.PwPortId
}

// GetQinqEtype retrieves the value of the leaf QinqEtype from the NokiaConf_Configure_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqEtype is set, it can
// safely use t.GetQinqEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort) GetQinqEtype() string {
	if t == nil || t.QinqEtype == nil {
		return "33024"
	}
	return *t.QinqEtype
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Description == nil {
		var v string = "PW Port"
		t.Description = &v
	}
	if t.Dot1QEtype == nil {
		var v string = "33024"
		t.Dot1QEtype = &v
	}
	if t.EncapType == 0 {
		t.EncapType = NokiaConf_Configure_PwPort_EncapType_dot1q
	}
	if t.QinqEtype == nil {
		var v string = "33024"
		t.QinqEtype = &v
	}
	for _, e := range t.Epipe {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PwPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PwPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwPortId == nil {
		return nil, fmt.Errorf("nil value for key PwPortId")
	}

	return map[string]interface{}{
		"pw-port-id": *t.PwPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort.
func (*NokiaConf_Configure_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort_Epipe represents the /nokia-conf/configure/pw-port/epipe YANG schema element.
type NokiaConf_Configure_PwPort_Epipe struct {
	AdminState                   E_NokiaTypesSros_AdminState              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                  []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DownOnPeerTldpPwStatusFaults *bool                                    `path:"down-on-peer-tldp-pw-status-faults" module:"nokia-conf"`
	Egress                       *NokiaConf_Configure_PwPort_Epipe_Egress `path:"egress" module:"nokia-conf"`
	FpeId                        *uint32                                  `path:"fpe-id" module:"nokia-conf"`
	MonitorOperGroup             *string                                  `path:"monitor-oper-group" module:"nokia-conf"`
	OperUpOnMhStandby            *bool                                    `path:"oper-up-on-mh-standby" module:"nokia-conf"`
	ServiceName                  *string                                  `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort_Epipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort_Epipe) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PwPort_Epipe) GetOrCreateEgress() *NokiaConf_Configure_PwPort_Epipe_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_PwPort_Epipe_Egress{}
	return t.Egress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_PwPort_Epipe. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PwPort_Epipe) GetEgress() *NokiaConf_Configure_PwPort_Epipe_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDownOnPeerTldpPwStatusFaults retrieves the value of the leaf DownOnPeerTldpPwStatusFaults from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownOnPeerTldpPwStatusFaults is set, it can
// safely use t.GetDownOnPeerTldpPwStatusFaults() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownOnPeerTldpPwStatusFaults == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetDownOnPeerTldpPwStatusFaults() bool {
	if t == nil || t.DownOnPeerTldpPwStatusFaults == nil {
		return false
	}
	return *t.DownOnPeerTldpPwStatusFaults
}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetOperUpOnMhStandby retrieves the value of the leaf OperUpOnMhStandby from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperUpOnMhStandby is set, it can
// safely use t.GetOperUpOnMhStandby() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperUpOnMhStandby == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetOperUpOnMhStandby() bool {
	if t == nil || t.OperUpOnMhStandby == nil {
		return false
	}
	return *t.OperUpOnMhStandby
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_PwPort_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort_Epipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort_Epipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DownOnPeerTldpPwStatusFaults == nil {
		var v bool = false
		t.DownOnPeerTldpPwStatusFaults = &v
	}
	if t.OperUpOnMhStandby == nil {
		var v bool = false
		t.OperUpOnMhStandby = &v
	}
	t.Egress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PwPort_Epipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PwPort_Epipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Epipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort_Epipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Epipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort_Epipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort_Epipe.
func (*NokiaConf_Configure_PwPort_Epipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort_Epipe_Egress represents the /nokia-conf/configure/pw-port/epipe/egress YANG schema element.
type NokiaConf_Configure_PwPort_Epipe_Egress struct {
	Shaper *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper `path:"shaper" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort_Epipe_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort_Epipe_Egress) IsYANGGoStruct() {}

// GetOrCreateShaper retrieves the value of the Shaper field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress) GetOrCreateShaper() *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper {
	if t.Shaper != nil {
		return t.Shaper
	}
	t.Shaper = &NokiaConf_Configure_PwPort_Epipe_Egress_Shaper{}
	return t.Shaper
}

// GetShaper returns the value of the Shaper struct pointer
// from NokiaConf_Configure_PwPort_Epipe_Egress. If the receiver or the field Shaper is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress) GetShaper() *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper {
	if t != nil && t.Shaper != nil {
		return t.Shaper
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort_Epipe_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Shaper.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort_Epipe_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort_Epipe_Egress.
func (*NokiaConf_Configure_PwPort_Epipe_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort_Epipe_Egress_Shaper represents the /nokia-conf/configure/pw-port/epipe/egress/shaper YANG schema element.
type NokiaConf_Configure_PwPort_Epipe_Egress_Shaper struct {
	IntermediateDestinationId *string `path:"intermediate-destination-id" module:"nokia-conf"`
	VirtualPort               *string `path:"virtual-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort_Epipe_Egress_Shaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) IsYANGGoStruct() {}

// GetIntermediateDestinationId retrieves the value of the leaf IntermediateDestinationId from the NokiaConf_Configure_PwPort_Epipe_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntermediateDestinationId is set, it can
// safely use t.GetIntermediateDestinationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntermediateDestinationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) GetIntermediateDestinationId() string {
	if t == nil || t.IntermediateDestinationId == nil {
		return ""
	}
	return *t.IntermediateDestinationId
}

// GetVirtualPort retrieves the value of the leaf VirtualPort from the NokiaConf_Configure_PwPort_Epipe_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualPort is set, it can
// safely use t.GetVirtualPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) GetVirtualPort() string {
	if t == nil || t.VirtualPort == nil {
		return ""
	}
	return *t.VirtualPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort_Epipe_Egress_Shaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort_Epipe_Egress_Shaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort_Epipe_Egress_Shaper.
func (*NokiaConf_Configure_PwPort_Epipe_Egress_Shaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort_Sdp represents the /nokia-conf/configure/pw-port/sdp YANG schema element.
type NokiaConf_Configure_PwPort_Sdp struct {
	AdminState         E_NokiaTypesSros_AdminState              `path:"admin-state" module:"nokia-conf"`
	AdvServiceMtu      *int32                                   `path:"adv-service-mtu" module:"nokia-conf"`
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	ControlWord        *bool                                    `path:"control-word" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_PwPort_Sdp_Egress   `path:"egress" module:"nokia-conf"`
	EntropyLabel       *bool                                    `path:"entropy-label" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_PwPort_Sdp_Ingress  `path:"ingress" module:"nokia-conf"`
	MonitorOperGroup   *string                                  `path:"monitor-oper-group" module:"nokia-conf"`
	SdpId              *uint32                                  `path:"sdp-id" module:"nokia-conf"`
	VcId               *uint32                                  `path:"vc-id" module:"nokia-conf"`
	VcType             E_NokiaTypesServices_PwPortSdpBindVcType `path:"vc-type" module:"nokia-conf"`
	VlanVcTag          *uint32                                  `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort_Sdp) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PwPort_Sdp) GetOrCreateEgress() *NokiaConf_Configure_PwPort_Sdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_PwPort_Sdp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PwPort_Sdp) GetOrCreateIngress() *NokiaConf_Configure_PwPort_Sdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_PwPort_Sdp_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_PwPort_Sdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PwPort_Sdp) GetEgress() *NokiaConf_Configure_PwPort_Sdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_PwPort_Sdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PwPort_Sdp) GetIngress() *NokiaConf_Configure_PwPort_Sdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetSdpId retrieves the value of the leaf SdpId from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpId is set, it can
// safely use t.GetSdpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetSdpId() uint32 {
	if t == nil || t.SdpId == nil {
		return 0
	}
	return *t.SdpId
}

// GetVcId retrieves the value of the leaf VcId from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcId is set, it can
// safely use t.GetVcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetVcId() uint32 {
	if t == nil || t.VcId == nil {
		return 0
	}
	return *t.VcId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetVcType() E_NokiaTypesServices_PwPortSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_PwPortSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_PwPort_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_PwPortSdpBindVcType_ether
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PwPort_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PwPort_Sdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpId == nil {
		return nil, fmt.Errorf("nil value for key SdpId")
	}

	return map[string]interface{}{
		"sdp-id": *t.SdpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort_Sdp.
func (*NokiaConf_Configure_PwPort_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort_Sdp_Egress represents the /nokia-conf/configure/pw-port/sdp/egress YANG schema element.
type NokiaConf_Configure_PwPort_Sdp_Egress struct {
	Shaper  *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper `path:"shaper" module:"nokia-conf"`
	VcLabel *uint32                                       `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort_Sdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort_Sdp_Egress) IsYANGGoStruct() {}

// GetOrCreateShaper retrieves the value of the Shaper field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress) GetOrCreateShaper() *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper {
	if t.Shaper != nil {
		return t.Shaper
	}
	t.Shaper = &NokiaConf_Configure_PwPort_Sdp_Egress_Shaper{}
	return t.Shaper
}

// GetShaper returns the value of the Shaper struct pointer
// from NokiaConf_Configure_PwPort_Sdp_Egress. If the receiver or the field Shaper is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress) GetShaper() *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper {
	if t != nil && t.Shaper != nil {
		return t.Shaper
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_PwPort_Sdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort_Sdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Shaper.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort_Sdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort_Sdp_Egress.
func (*NokiaConf_Configure_PwPort_Sdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort_Sdp_Egress_Shaper represents the /nokia-conf/configure/pw-port/sdp/egress/shaper YANG schema element.
type NokiaConf_Configure_PwPort_Sdp_Egress_Shaper struct {
	IntermediateDestinationId *string `path:"intermediate-destination-id" module:"nokia-conf"`
	PwSapSecondaryShaper      *string `path:"pw-sap-secondary-shaper" module:"nokia-conf"`
	VirtualPort               *string `path:"virtual-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort_Sdp_Egress_Shaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) IsYANGGoStruct() {}

// GetIntermediateDestinationId retrieves the value of the leaf IntermediateDestinationId from the NokiaConf_Configure_PwPort_Sdp_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntermediateDestinationId is set, it can
// safely use t.GetIntermediateDestinationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntermediateDestinationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) GetIntermediateDestinationId() string {
	if t == nil || t.IntermediateDestinationId == nil {
		return ""
	}
	return *t.IntermediateDestinationId
}

// GetPwSapSecondaryShaper retrieves the value of the leaf PwSapSecondaryShaper from the NokiaConf_Configure_PwPort_Sdp_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwSapSecondaryShaper is set, it can
// safely use t.GetPwSapSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwSapSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) GetPwSapSecondaryShaper() string {
	if t == nil || t.PwSapSecondaryShaper == nil {
		return ""
	}
	return *t.PwSapSecondaryShaper
}

// GetVirtualPort retrieves the value of the leaf VirtualPort from the NokiaConf_Configure_PwPort_Sdp_Egress_Shaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualPort is set, it can
// safely use t.GetVirtualPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) GetVirtualPort() string {
	if t == nil || t.VirtualPort == nil {
		return ""
	}
	return *t.VirtualPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort_Sdp_Egress_Shaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort_Sdp_Egress_Shaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort_Sdp_Egress_Shaper.
func (*NokiaConf_Configure_PwPort_Sdp_Egress_Shaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PwPort_Sdp_Ingress represents the /nokia-conf/configure/pw-port/sdp/ingress YANG schema element.
type NokiaConf_Configure_PwPort_Sdp_Ingress struct {
	VcLabel *uint32 `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PwPort_Sdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PwPort_Sdp_Ingress) IsYANGGoStruct() {}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_PwPort_Sdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PwPort_Sdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PwPort_Sdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PwPort_Sdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PwPort_Sdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PwPort_Sdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PwPort_Sdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PwPort_Sdp_Ingress.
func (*NokiaConf_Configure_PwPort_Sdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python represents the /nokia-conf/configure/python YANG schema element.
type NokiaConf_Configure_Python struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	PythonPolicy       map[string]*NokiaConf_Configure_Python_PythonPolicy `path:"python-policy" module:"nokia-conf"`
	PythonScript       map[string]*NokiaConf_Configure_Python_PythonScript `path:"python-script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python) IsYANGGoStruct() {}

// NewPythonPolicy creates a new entry in the PythonPolicy list of the
// NokiaConf_Configure_Python struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python) NewPythonPolicy(Name string) (*NokiaConf_Configure_Python_PythonPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonPolicy == nil {
		t.PythonPolicy = make(map[string]*NokiaConf_Configure_Python_PythonPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PythonPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PythonPolicy", key)
	}

	t.PythonPolicy[key] = &NokiaConf_Configure_Python_PythonPolicy{
		Name: &Name,
	}

	return t.PythonPolicy[key], nil
}

// RenamePythonPolicy renames an entry in the list PythonPolicy within
// the NokiaConf_Configure_Python struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python) RenamePythonPolicy(oldK, newK string) error {
	if _, ok := t.PythonPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PythonPolicy", newK)
	}

	e, ok := t.PythonPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PythonPolicy", oldK)
	}
	e.Name = &newK

	t.PythonPolicy[newK] = e
	delete(t.PythonPolicy, oldK)
	return nil
}

// GetOrCreatePythonPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python) GetOrCreatePythonPolicy(Name string) *NokiaConf_Configure_Python_PythonPolicy {

	key := Name

	if v, ok := t.PythonPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPythonPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePythonPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPythonPolicy retrieves the value with the specified key from
// the PythonPolicy map field of NokiaConf_Configure_Python. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python) GetPythonPolicy(Name string) *NokiaConf_Configure_Python_PythonPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PythonPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePythonPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python) DeletePythonPolicy(Name string) {
	key := Name

	delete(t.PythonPolicy, key)
}

// AppendPythonPolicy appends the supplied NokiaConf_Configure_Python_PythonPolicy struct to the
// list PythonPolicy of NokiaConf_Configure_Python. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python) AppendPythonPolicy(v *NokiaConf_Configure_Python_PythonPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonPolicy == nil {
		t.PythonPolicy = make(map[string]*NokiaConf_Configure_Python_PythonPolicy)
	}

	if _, ok := t.PythonPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PythonPolicy %v", key)
	}

	t.PythonPolicy[key] = v
	return nil
}

// NewPythonScript creates a new entry in the PythonScript list of the
// NokiaConf_Configure_Python struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python) NewPythonScript(Name string) (*NokiaConf_Configure_Python_PythonScript, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonScript == nil {
		t.PythonScript = make(map[string]*NokiaConf_Configure_Python_PythonScript)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PythonScript[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PythonScript", key)
	}

	t.PythonScript[key] = &NokiaConf_Configure_Python_PythonScript{
		Name: &Name,
	}

	return t.PythonScript[key], nil
}

// RenamePythonScript renames an entry in the list PythonScript within
// the NokiaConf_Configure_Python struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python) RenamePythonScript(oldK, newK string) error {
	if _, ok := t.PythonScript[newK]; ok {
		return fmt.Errorf("key %v already exists in PythonScript", newK)
	}

	e, ok := t.PythonScript[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PythonScript", oldK)
	}
	e.Name = &newK

	t.PythonScript[newK] = e
	delete(t.PythonScript, oldK)
	return nil
}

// GetOrCreatePythonScript retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python) GetOrCreatePythonScript(Name string) *NokiaConf_Configure_Python_PythonScript {

	key := Name

	if v, ok := t.PythonScript[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPythonScript(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePythonScript got unexpected error: %v", err))
	}
	return v
}

// GetPythonScript retrieves the value with the specified key from
// the PythonScript map field of NokiaConf_Configure_Python. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python) GetPythonScript(Name string) *NokiaConf_Configure_Python_PythonScript {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PythonScript[key]; ok {
		return lm
	}
	return nil
}

// DeletePythonScript deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python) DeletePythonScript(Name string) {
	key := Name

	delete(t.PythonScript, key)
}

// AppendPythonScript appends the supplied NokiaConf_Configure_Python_PythonScript struct to the
// list PythonScript of NokiaConf_Configure_Python. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonScript already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python) AppendPythonScript(v *NokiaConf_Configure_Python_PythonScript) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PythonScript == nil {
		t.PythonScript = make(map[string]*NokiaConf_Configure_Python_PythonScript)
	}

	if _, ok := t.PythonScript[key]; ok {
		return fmt.Errorf("duplicate key for list PythonScript %v", key)
	}

	t.PythonScript[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PythonPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PythonScript {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python.
func (*NokiaConf_Configure_Python) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy represents the /nokia-conf/configure/python/python-policy YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy struct {
	ApplyGroups        []string                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Cache              *NokiaConf_Configure_Python_PythonPolicy_Cache                                                             `path:"cache" module:"nokia-conf" yangPresence:"true"`
	Description        *string                                                                                                    `path:"description" module:"nokia-conf"`
	Dhcp               map[NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key]*NokiaConf_Configure_Python_PythonPolicy_Dhcp         `path:"dhcp" module:"nokia-conf"`
	Dhcp6              map[NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key]*NokiaConf_Configure_Python_PythonPolicy_Dhcp6       `path:"dhcp6" module:"nokia-conf"`
	Diameter           map[NokiaConf_Configure_Python_PythonPolicy_Diameter_Key]*NokiaConf_Configure_Python_PythonPolicy_Diameter `path:"diameter" module:"nokia-conf"`
	Gtpv1C             map[NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key]*NokiaConf_Configure_Python_PythonPolicy_Gtpv1C     `path:"gtpv1-c" module:"nokia-conf"`
	Gtpv2C             map[NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key]*NokiaConf_Configure_Python_PythonPolicy_Gtpv2C     `path:"gtpv2-c" module:"nokia-conf"`
	Name               *string                                                                                                    `path:"name" module:"nokia-conf"`
	NatGroup           *uint32                                                                                                    `path:"nat-group" module:"nokia-conf"`
	Pppoe              map[NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key]*NokiaConf_Configure_Python_PythonPolicy_Pppoe       `path:"pppoe" module:"nokia-conf"`
	Radius             map[NokiaConf_Configure_Python_PythonPolicy_Radius_Key]*NokiaConf_Configure_Python_PythonPolicy_Radius     `path:"radius" module:"nokia-conf"`
	Syslog             *NokiaConf_Configure_Python_PythonPolicy_Syslog                                                            `path:"syslog" module:"nokia-conf" yangPresence:"true"`
	Vsd                *NokiaConf_Configure_Python_PythonPolicy_Vsd                                                               `path:"vsd" module:"nokia-conf" yangPresence:"true"`
	WlanGwGroup        *uint32                                                                                                    `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key represents the key for list Dhcp of element /nokia-conf/configure/python/python-policy.
type NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key struct {
	MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp_MessageType `path:"message-type"`
	Direction   E_NokiaTypesSros_Direction                                 `path:"direction"`
}

// NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key represents the key for list Dhcp6 of element /nokia-conf/configure/python/python-policy.
type NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key struct {
	MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp6_MessageType `path:"message-type"`
	Direction   E_NokiaTypesSros_Direction                                  `path:"direction"`
}

// NokiaConf_Configure_Python_PythonPolicy_Diameter_Key represents the key for list Diameter of element /nokia-conf/configure/python/python-policy.
type NokiaConf_Configure_Python_PythonPolicy_Diameter_Key struct {
	MessageType E_NokiaConf_Configure_Python_PythonPolicy_Diameter_MessageType `path:"message-type"`
	Direction   E_NokiaTypesSros_Direction                                     `path:"direction"`
}

// NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key represents the key for list Gtpv1C of element /nokia-conf/configure/python/python-policy.
type NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key struct {
	MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_MessageType `path:"message-type"`
	Direction   E_NokiaTypesSros_Direction                                   `path:"direction"`
}

// NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key represents the key for list Gtpv2C of element /nokia-conf/configure/python/python-policy.
type NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key struct {
	MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_MessageType `path:"message-type"`
	Direction   E_NokiaTypesSros_Direction                                   `path:"direction"`
}

// NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key represents the key for list Pppoe of element /nokia-conf/configure/python/python-policy.
type NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key struct {
	MessageType E_NokiaConf_Configure_Python_PythonPolicy_Pppoe_MessageType `path:"message-type"`
	Direction   E_NokiaTypesSros_Direction                                  `path:"direction"`
}

// NokiaConf_Configure_Python_PythonPolicy_Radius_Key represents the key for list Radius of element /nokia-conf/configure/python/python-policy.
type NokiaConf_Configure_Python_PythonPolicy_Radius_Key struct {
	MessageType E_NokiaConf_Configure_Python_PythonPolicy_Radius_MessageType `path:"message-type"`
	Direction   E_NokiaTypesSros_Direction                                   `path:"direction"`
}

// NewDhcp creates a new entry in the Dhcp list of the
// NokiaConf_Configure_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python_PythonPolicy) NewDhcp(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp_MessageType, Direction E_NokiaTypesSros_Direction) (*NokiaConf_Configure_Python_PythonPolicy_Dhcp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp == nil {
		t.Dhcp = make(map[NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key]*NokiaConf_Configure_Python_PythonPolicy_Dhcp)
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcp", key)
	}

	t.Dhcp[key] = &NokiaConf_Configure_Python_PythonPolicy_Dhcp{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Dhcp[key], nil
}

// RenameDhcp renames an entry in the list Dhcp within
// the NokiaConf_Configure_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python_PythonPolicy) RenameDhcp(oldK, newK NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key) error {
	if _, ok := t.Dhcp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcp", newK)
	}

	e, ok := t.Dhcp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcp", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Dhcp[newK] = e
	delete(t.Dhcp, oldK)
	return nil
}

// GetOrCreateDhcp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateDhcp(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Dhcp {

	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Dhcp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcp(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcp got unexpected error: %v", err))
	}
	return v
}

// GetDhcp retrieves the value with the specified key from
// the Dhcp map field of NokiaConf_Configure_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetDhcp(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Dhcp {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Dhcp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python_PythonPolicy) DeleteDhcp(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp_MessageType, Direction E_NokiaTypesSros_Direction) {
	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Dhcp, key)
}

// AppendDhcp appends the supplied NokiaConf_Configure_Python_PythonPolicy_Dhcp struct to the
// list Dhcp of NokiaConf_Configure_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy_Dhcp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python_PythonPolicy) AppendDhcp(v *NokiaConf_Configure_Python_PythonPolicy_Dhcp) error {
	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp == nil {
		t.Dhcp = make(map[NokiaConf_Configure_Python_PythonPolicy_Dhcp_Key]*NokiaConf_Configure_Python_PythonPolicy_Dhcp)
	}

	if _, ok := t.Dhcp[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcp %v", key)
	}

	t.Dhcp[key] = v
	return nil
}

// NewDhcp6 creates a new entry in the Dhcp6 list of the
// NokiaConf_Configure_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python_PythonPolicy) NewDhcp6(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp6_MessageType, Direction E_NokiaTypesSros_Direction) (*NokiaConf_Configure_Python_PythonPolicy_Dhcp6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6 == nil {
		t.Dhcp6 = make(map[NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key]*NokiaConf_Configure_Python_PythonPolicy_Dhcp6)
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcp6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcp6", key)
	}

	t.Dhcp6[key] = &NokiaConf_Configure_Python_PythonPolicy_Dhcp6{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Dhcp6[key], nil
}

// RenameDhcp6 renames an entry in the list Dhcp6 within
// the NokiaConf_Configure_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python_PythonPolicy) RenameDhcp6(oldK, newK NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key) error {
	if _, ok := t.Dhcp6[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcp6", newK)
	}

	e, ok := t.Dhcp6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcp6", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Dhcp6[newK] = e
	delete(t.Dhcp6, oldK)
	return nil
}

// GetOrCreateDhcp6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateDhcp6(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp6_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Dhcp6 {

	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Dhcp6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcp6(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcp6 got unexpected error: %v", err))
	}
	return v
}

// GetDhcp6 retrieves the value with the specified key from
// the Dhcp6 map field of NokiaConf_Configure_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetDhcp6(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp6_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Dhcp6 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Dhcp6[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcp6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python_PythonPolicy) DeleteDhcp6(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Dhcp6_MessageType, Direction E_NokiaTypesSros_Direction) {
	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Dhcp6, key)
}

// AppendDhcp6 appends the supplied NokiaConf_Configure_Python_PythonPolicy_Dhcp6 struct to the
// list Dhcp6 of NokiaConf_Configure_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy_Dhcp6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python_PythonPolicy) AppendDhcp6(v *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) error {
	key := NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6 == nil {
		t.Dhcp6 = make(map[NokiaConf_Configure_Python_PythonPolicy_Dhcp6_Key]*NokiaConf_Configure_Python_PythonPolicy_Dhcp6)
	}

	if _, ok := t.Dhcp6[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcp6 %v", key)
	}

	t.Dhcp6[key] = v
	return nil
}

// NewDiameter creates a new entry in the Diameter list of the
// NokiaConf_Configure_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python_PythonPolicy) NewDiameter(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Diameter_MessageType, Direction E_NokiaTypesSros_Direction) (*NokiaConf_Configure_Python_PythonPolicy_Diameter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Diameter == nil {
		t.Diameter = make(map[NokiaConf_Configure_Python_PythonPolicy_Diameter_Key]*NokiaConf_Configure_Python_PythonPolicy_Diameter)
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Diameter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Diameter", key)
	}

	t.Diameter[key] = &NokiaConf_Configure_Python_PythonPolicy_Diameter{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Diameter[key], nil
}

// RenameDiameter renames an entry in the list Diameter within
// the NokiaConf_Configure_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python_PythonPolicy) RenameDiameter(oldK, newK NokiaConf_Configure_Python_PythonPolicy_Diameter_Key) error {
	if _, ok := t.Diameter[newK]; ok {
		return fmt.Errorf("key %v already exists in Diameter", newK)
	}

	e, ok := t.Diameter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Diameter", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Diameter[newK] = e
	delete(t.Diameter, oldK)
	return nil
}

// GetOrCreateDiameter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateDiameter(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Diameter_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Diameter {

	key := NokiaConf_Configure_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Diameter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDiameter(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDiameter got unexpected error: %v", err))
	}
	return v
}

// GetDiameter retrieves the value with the specified key from
// the Diameter map field of NokiaConf_Configure_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetDiameter(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Diameter_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Diameter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Diameter[key]; ok {
		return lm
	}
	return nil
}

// DeleteDiameter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python_PythonPolicy) DeleteDiameter(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Diameter_MessageType, Direction E_NokiaTypesSros_Direction) {
	key := NokiaConf_Configure_Python_PythonPolicy_Diameter_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Diameter, key)
}

// AppendDiameter appends the supplied NokiaConf_Configure_Python_PythonPolicy_Diameter struct to the
// list Diameter of NokiaConf_Configure_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy_Diameter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python_PythonPolicy) AppendDiameter(v *NokiaConf_Configure_Python_PythonPolicy_Diameter) error {
	key := NokiaConf_Configure_Python_PythonPolicy_Diameter_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Diameter == nil {
		t.Diameter = make(map[NokiaConf_Configure_Python_PythonPolicy_Diameter_Key]*NokiaConf_Configure_Python_PythonPolicy_Diameter)
	}

	if _, ok := t.Diameter[key]; ok {
		return fmt.Errorf("duplicate key for list Diameter %v", key)
	}

	t.Diameter[key] = v
	return nil
}

// NewGtpv1C creates a new entry in the Gtpv1C list of the
// NokiaConf_Configure_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python_PythonPolicy) NewGtpv1C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_MessageType, Direction E_NokiaTypesSros_Direction) (*NokiaConf_Configure_Python_PythonPolicy_Gtpv1C, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv1C == nil {
		t.Gtpv1C = make(map[NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key]*NokiaConf_Configure_Python_PythonPolicy_Gtpv1C)
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Gtpv1C[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Gtpv1C", key)
	}

	t.Gtpv1C[key] = &NokiaConf_Configure_Python_PythonPolicy_Gtpv1C{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Gtpv1C[key], nil
}

// RenameGtpv1C renames an entry in the list Gtpv1C within
// the NokiaConf_Configure_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python_PythonPolicy) RenameGtpv1C(oldK, newK NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key) error {
	if _, ok := t.Gtpv1C[newK]; ok {
		return fmt.Errorf("key %v already exists in Gtpv1C", newK)
	}

	e, ok := t.Gtpv1C[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Gtpv1C", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Gtpv1C[newK] = e
	delete(t.Gtpv1C, oldK)
	return nil
}

// GetOrCreateGtpv1C retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateGtpv1C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C {

	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Gtpv1C[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpv1C(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpv1C got unexpected error: %v", err))
	}
	return v
}

// GetGtpv1C retrieves the value with the specified key from
// the Gtpv1C map field of NokiaConf_Configure_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetGtpv1C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Gtpv1C[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpv1C deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python_PythonPolicy) DeleteGtpv1C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_MessageType, Direction E_NokiaTypesSros_Direction) {
	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Gtpv1C, key)
}

// AppendGtpv1C appends the supplied NokiaConf_Configure_Python_PythonPolicy_Gtpv1C struct to the
// list Gtpv1C of NokiaConf_Configure_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy_Gtpv1C already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python_PythonPolicy) AppendGtpv1C(v *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) error {
	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv1C == nil {
		t.Gtpv1C = make(map[NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_Key]*NokiaConf_Configure_Python_PythonPolicy_Gtpv1C)
	}

	if _, ok := t.Gtpv1C[key]; ok {
		return fmt.Errorf("duplicate key for list Gtpv1C %v", key)
	}

	t.Gtpv1C[key] = v
	return nil
}

// NewGtpv2C creates a new entry in the Gtpv2C list of the
// NokiaConf_Configure_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python_PythonPolicy) NewGtpv2C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_MessageType, Direction E_NokiaTypesSros_Direction) (*NokiaConf_Configure_Python_PythonPolicy_Gtpv2C, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv2C == nil {
		t.Gtpv2C = make(map[NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key]*NokiaConf_Configure_Python_PythonPolicy_Gtpv2C)
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Gtpv2C[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Gtpv2C", key)
	}

	t.Gtpv2C[key] = &NokiaConf_Configure_Python_PythonPolicy_Gtpv2C{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Gtpv2C[key], nil
}

// RenameGtpv2C renames an entry in the list Gtpv2C within
// the NokiaConf_Configure_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python_PythonPolicy) RenameGtpv2C(oldK, newK NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key) error {
	if _, ok := t.Gtpv2C[newK]; ok {
		return fmt.Errorf("key %v already exists in Gtpv2C", newK)
	}

	e, ok := t.Gtpv2C[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Gtpv2C", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Gtpv2C[newK] = e
	delete(t.Gtpv2C, oldK)
	return nil
}

// GetOrCreateGtpv2C retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateGtpv2C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C {

	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Gtpv2C[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpv2C(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpv2C got unexpected error: %v", err))
	}
	return v
}

// GetGtpv2C retrieves the value with the specified key from
// the Gtpv2C map field of NokiaConf_Configure_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetGtpv2C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Gtpv2C[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpv2C deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python_PythonPolicy) DeleteGtpv2C(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_MessageType, Direction E_NokiaTypesSros_Direction) {
	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Gtpv2C, key)
}

// AppendGtpv2C appends the supplied NokiaConf_Configure_Python_PythonPolicy_Gtpv2C struct to the
// list Gtpv2C of NokiaConf_Configure_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy_Gtpv2C already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python_PythonPolicy) AppendGtpv2C(v *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) error {
	key := NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gtpv2C == nil {
		t.Gtpv2C = make(map[NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_Key]*NokiaConf_Configure_Python_PythonPolicy_Gtpv2C)
	}

	if _, ok := t.Gtpv2C[key]; ok {
		return fmt.Errorf("duplicate key for list Gtpv2C %v", key)
	}

	t.Gtpv2C[key] = v
	return nil
}

// NewPppoe creates a new entry in the Pppoe list of the
// NokiaConf_Configure_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python_PythonPolicy) NewPppoe(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Pppoe_MessageType, Direction E_NokiaTypesSros_Direction) (*NokiaConf_Configure_Python_PythonPolicy_Pppoe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pppoe == nil {
		t.Pppoe = make(map[NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key]*NokiaConf_Configure_Python_PythonPolicy_Pppoe)
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pppoe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pppoe", key)
	}

	t.Pppoe[key] = &NokiaConf_Configure_Python_PythonPolicy_Pppoe{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Pppoe[key], nil
}

// RenamePppoe renames an entry in the list Pppoe within
// the NokiaConf_Configure_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python_PythonPolicy) RenamePppoe(oldK, newK NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key) error {
	if _, ok := t.Pppoe[newK]; ok {
		return fmt.Errorf("key %v already exists in Pppoe", newK)
	}

	e, ok := t.Pppoe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pppoe", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Pppoe[newK] = e
	delete(t.Pppoe, oldK)
	return nil
}

// GetOrCreatePppoe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreatePppoe(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Pppoe_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Pppoe {

	key := NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Pppoe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPppoe(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePppoe got unexpected error: %v", err))
	}
	return v
}

// GetPppoe retrieves the value with the specified key from
// the Pppoe map field of NokiaConf_Configure_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetPppoe(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Pppoe_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Pppoe {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Pppoe[key]; ok {
		return lm
	}
	return nil
}

// DeletePppoe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python_PythonPolicy) DeletePppoe(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Pppoe_MessageType, Direction E_NokiaTypesSros_Direction) {
	key := NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Pppoe, key)
}

// AppendPppoe appends the supplied NokiaConf_Configure_Python_PythonPolicy_Pppoe struct to the
// list Pppoe of NokiaConf_Configure_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy_Pppoe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python_PythonPolicy) AppendPppoe(v *NokiaConf_Configure_Python_PythonPolicy_Pppoe) error {
	key := NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pppoe == nil {
		t.Pppoe = make(map[NokiaConf_Configure_Python_PythonPolicy_Pppoe_Key]*NokiaConf_Configure_Python_PythonPolicy_Pppoe)
	}

	if _, ok := t.Pppoe[key]; ok {
		return fmt.Errorf("duplicate key for list Pppoe %v", key)
	}

	t.Pppoe[key] = v
	return nil
}

// NewRadius creates a new entry in the Radius list of the
// NokiaConf_Configure_Python_PythonPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Python_PythonPolicy) NewRadius(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Radius_MessageType, Direction E_NokiaTypesSros_Direction) (*NokiaConf_Configure_Python_PythonPolicy_Radius, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radius == nil {
		t.Radius = make(map[NokiaConf_Configure_Python_PythonPolicy_Radius_Key]*NokiaConf_Configure_Python_PythonPolicy_Radius)
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Radius[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Radius", key)
	}

	t.Radius[key] = &NokiaConf_Configure_Python_PythonPolicy_Radius{
		MessageType: MessageType,
		Direction:   Direction,
	}

	return t.Radius[key], nil
}

// RenameRadius renames an entry in the list Radius within
// the NokiaConf_Configure_Python_PythonPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Python_PythonPolicy) RenameRadius(oldK, newK NokiaConf_Configure_Python_PythonPolicy_Radius_Key) error {
	if _, ok := t.Radius[newK]; ok {
		return fmt.Errorf("key %v already exists in Radius", newK)
	}

	e, ok := t.Radius[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Radius", oldK)
	}
	e.MessageType = newK.MessageType
	e.Direction = newK.Direction

	t.Radius[newK] = e
	delete(t.Radius, oldK)
	return nil
}

// GetOrCreateRadius retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateRadius(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Radius_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Radius {

	key := NokiaConf_Configure_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if v, ok := t.Radius[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadius(MessageType, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadius got unexpected error: %v", err))
	}
	return v
}

// GetRadius retrieves the value with the specified key from
// the Radius map field of NokiaConf_Configure_Python_PythonPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetRadius(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Radius_MessageType, Direction E_NokiaTypesSros_Direction) *NokiaConf_Configure_Python_PythonPolicy_Radius {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	if lm, ok := t.Radius[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadius deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Python_PythonPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Python_PythonPolicy) DeleteRadius(MessageType E_NokiaConf_Configure_Python_PythonPolicy_Radius_MessageType, Direction E_NokiaTypesSros_Direction) {
	key := NokiaConf_Configure_Python_PythonPolicy_Radius_Key{
		MessageType: MessageType,
		Direction:   Direction,
	}

	delete(t.Radius, key)
}

// AppendRadius appends the supplied NokiaConf_Configure_Python_PythonPolicy_Radius struct to the
// list Radius of NokiaConf_Configure_Python_PythonPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Python_PythonPolicy_Radius already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Python_PythonPolicy) AppendRadius(v *NokiaConf_Configure_Python_PythonPolicy_Radius) error {
	key := NokiaConf_Configure_Python_PythonPolicy_Radius_Key{
		MessageType: v.MessageType,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radius == nil {
		t.Radius = make(map[NokiaConf_Configure_Python_PythonPolicy_Radius_Key]*NokiaConf_Configure_Python_PythonPolicy_Radius)
	}

	if _, ok := t.Radius[key]; ok {
		return fmt.Errorf("duplicate key for list Radius %v", key)
	}

	t.Radius[key] = v
	return nil
}

// GetOrCreateCache retrieves the value of the Cache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateCache() *NokiaConf_Configure_Python_PythonPolicy_Cache {
	if t.Cache != nil {
		return t.Cache
	}
	t.Cache = &NokiaConf_Configure_Python_PythonPolicy_Cache{}
	return t.Cache
}

// GetOrCreateSyslog retrieves the value of the Syslog field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateSyslog() *NokiaConf_Configure_Python_PythonPolicy_Syslog {
	if t.Syslog != nil {
		return t.Syslog
	}
	t.Syslog = &NokiaConf_Configure_Python_PythonPolicy_Syslog{}
	return t.Syslog
}

// GetOrCreateVsd retrieves the value of the Vsd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetOrCreateVsd() *NokiaConf_Configure_Python_PythonPolicy_Vsd {
	if t.Vsd != nil {
		return t.Vsd
	}
	t.Vsd = &NokiaConf_Configure_Python_PythonPolicy_Vsd{}
	return t.Vsd
}

// GetCache returns the value of the Cache struct pointer
// from NokiaConf_Configure_Python_PythonPolicy. If the receiver or the field Cache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetCache() *NokiaConf_Configure_Python_PythonPolicy_Cache {
	if t != nil && t.Cache != nil {
		return t.Cache
	}
	return nil
}

// GetSyslog returns the value of the Syslog struct pointer
// from NokiaConf_Configure_Python_PythonPolicy. If the receiver or the field Syslog is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetSyslog() *NokiaConf_Configure_Python_PythonPolicy_Syslog {
	if t != nil && t.Syslog != nil {
		return t.Syslog
	}
	return nil
}

// GetVsd returns the value of the Vsd struct pointer
// from NokiaConf_Configure_Python_PythonPolicy. If the receiver or the field Vsd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetVsd() *NokiaConf_Configure_Python_PythonPolicy_Vsd {
	if t != nil && t.Vsd != nil {
		return t.Vsd
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Python_PythonPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cache.PopulateDefaults()
	t.Syslog.PopulateDefaults()
	t.Vsd.PopulateDefaults()
	for _, e := range t.Dhcp {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcp6 {
		e.PopulateDefaults()
	}
	for _, e := range t.Diameter {
		e.PopulateDefaults()
	}
	for _, e := range t.Gtpv1C {
		e.PopulateDefaults()
	}
	for _, e := range t.Gtpv2C {
		e.PopulateDefaults()
	}
	for _, e := range t.Pppoe {
		e.PopulateDefaults()
	}
	for _, e := range t.Radius {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy.
func (*NokiaConf_Configure_Python_PythonPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Cache represents the /nokia-conf/configure/python/python-policy/cache YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Cache struct {
	AdminState         E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	EntrySize          *int32                                                          `path:"entry-size" module:"nokia-conf"`
	MaxEntries         *int32                                                          `path:"max-entries" module:"nokia-conf"`
	MaxEntryLifetime   *uint32                                                         `path:"max-entry-lifetime" module:"nokia-conf"`
	McsPeer            *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer          `path:"mcs-peer" module:"nokia-conf" yangPresence:"true"`
	MinimumLifetimes   *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes `path:"minimum-lifetimes" module:"nokia-conf"`
	Persistence        *bool                                                           `path:"persistence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Cache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Cache) IsYANGGoStruct() {}

// GetOrCreateMcsPeer retrieves the value of the McsPeer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetOrCreateMcsPeer() *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer {
	if t.McsPeer != nil {
		return t.McsPeer
	}
	t.McsPeer = &NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer{}
	return t.McsPeer
}

// GetOrCreateMinimumLifetimes retrieves the value of the MinimumLifetimes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetOrCreateMinimumLifetimes() *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes {
	if t.MinimumLifetimes != nil {
		return t.MinimumLifetimes
	}
	t.MinimumLifetimes = &NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes{}
	return t.MinimumLifetimes
}

// GetMcsPeer returns the value of the McsPeer struct pointer
// from NokiaConf_Configure_Python_PythonPolicy_Cache. If the receiver or the field McsPeer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetMcsPeer() *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer {
	if t != nil && t.McsPeer != nil {
		return t.McsPeer
	}
	return nil
}

// GetMinimumLifetimes returns the value of the MinimumLifetimes struct pointer
// from NokiaConf_Configure_Python_PythonPolicy_Cache. If the receiver or the field MinimumLifetimes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetMinimumLifetimes() *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes {
	if t != nil && t.MinimumLifetimes != nil {
		return t.MinimumLifetimes
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntrySize retrieves the value of the leaf EntrySize from the NokiaConf_Configure_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntrySize is set, it can
// safely use t.GetEntrySize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntrySize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetEntrySize() int32 {
	if t == nil || t.EntrySize == nil {
		return 256
	}
	return *t.EntrySize
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 128000
	}
	return *t.MaxEntries
}

// GetMaxEntryLifetime retrieves the value of the leaf MaxEntryLifetime from the NokiaConf_Configure_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntryLifetime is set, it can
// safely use t.GetMaxEntryLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntryLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetMaxEntryLifetime() uint32 {
	if t == nil || t.MaxEntryLifetime == nil {
		return 86400
	}
	return *t.MaxEntryLifetime
}

// GetPersistence retrieves the value of the leaf Persistence from the NokiaConf_Configure_Python_PythonPolicy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistence is set, it can
// safely use t.GetPersistence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) GetPersistence() bool {
	if t == nil || t.Persistence == nil {
		return false
	}
	return *t.Persistence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Cache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EntrySize == nil {
		var v int32 = 256
		t.EntrySize = &v
	}
	if t.MaxEntries == nil {
		var v int32 = 128000
		t.MaxEntries = &v
	}
	if t.MaxEntryLifetime == nil {
		var v uint32 = 86400
		t.MaxEntryLifetime = &v
	}
	if t.Persistence == nil {
		var v bool = false
		t.Persistence = &v
	}
	t.McsPeer.PopulateDefaults()
	t.MinimumLifetimes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Cache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Cache.
func (*NokiaConf_Configure_Python_PythonPolicy_Cache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer represents the /nokia-conf/configure/python/python-policy/cache/mcs-peer YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer.
func (*NokiaConf_Configure_Python_PythonPolicy_Cache_McsPeer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes represents the /nokia-conf/configure/python/python-policy/cache/minimum-lifetimes YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes struct {
	HighAvailability       *uint32 `path:"high-availability" module:"nokia-conf"`
	MultiChassisRedundancy *uint32 `path:"multi-chassis-redundancy" module:"nokia-conf"`
	Persistence            *uint32 `path:"persistence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) IsYANGGoStruct() {}

// GetHighAvailability retrieves the value of the leaf HighAvailability from the NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighAvailability is set, it can
// safely use t.GetHighAvailability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighAvailability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) GetHighAvailability() uint32 {
	if t == nil || t.HighAvailability == nil {
		return 0
	}
	return *t.HighAvailability
}

// GetMultiChassisRedundancy retrieves the value of the leaf MultiChassisRedundancy from the NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiChassisRedundancy is set, it can
// safely use t.GetMultiChassisRedundancy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiChassisRedundancy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) GetMultiChassisRedundancy() uint32 {
	if t == nil || t.MultiChassisRedundancy == nil {
		return 0
	}
	return *t.MultiChassisRedundancy
}

// GetPersistence retrieves the value of the leaf Persistence from the NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistence is set, it can
// safely use t.GetPersistence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) GetPersistence() uint32 {
	if t == nil || t.Persistence == nil {
		return 0
	}
	return *t.Persistence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes.
func (*NokiaConf_Configure_Python_PythonPolicy_Cache_MinimumLifetimes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Dhcp represents the /nokia-conf/configure/python/python-policy/dhcp YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Dhcp struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesSros_Direction                                 `path:"direction" module:"nokia-conf"`
	MessageType        E_NokiaConf_Configure_Python_PythonPolicy_Dhcp_MessageType `path:"message-type" module:"nokia-conf"`
	Script             *string                                                    `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Dhcp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) GetDirection() E_NokiaTypesSros_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) GetMessageType() E_NokiaConf_Configure_Python_PythonPolicy_Dhcp_MessageType {
	if t == nil || t.MessageType == 0 {
		return 0
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy_Dhcp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Dhcp.
func (*NokiaConf_Configure_Python_PythonPolicy_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Dhcp6 represents the /nokia-conf/configure/python/python-policy/dhcp6 YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Dhcp6 struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesSros_Direction                                  `path:"direction" module:"nokia-conf"`
	MessageType        E_NokiaConf_Configure_Python_PythonPolicy_Dhcp6_MessageType `path:"message-type" module:"nokia-conf"`
	Script             *string                                                     `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Dhcp6) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) GetDirection() E_NokiaTypesSros_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) GetMessageType() E_NokiaConf_Configure_Python_PythonPolicy_Dhcp6_MessageType {
	if t == nil || t.MessageType == 0 {
		return 0
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy_Dhcp6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Dhcp6.
func (*NokiaConf_Configure_Python_PythonPolicy_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Diameter represents the /nokia-conf/configure/python/python-policy/diameter YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Diameter struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesSros_Direction                                     `path:"direction" module:"nokia-conf"`
	MessageType        E_NokiaConf_Configure_Python_PythonPolicy_Diameter_MessageType `path:"message-type" module:"nokia-conf"`
	Script             *string                                                        `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Diameter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Diameter) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) GetDirection() E_NokiaTypesSros_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) GetMessageType() E_NokiaConf_Configure_Python_PythonPolicy_Diameter_MessageType {
	if t == nil || t.MessageType == 0 {
		return 0
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Diameter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy_Diameter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Diameter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Diameter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Diameter.
func (*NokiaConf_Configure_Python_PythonPolicy_Diameter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Gtpv1C represents the /nokia-conf/configure/python/python-policy/gtpv1-c YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Gtpv1C struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesSros_Direction                                   `path:"direction" module:"nokia-conf"`
	MessageType        E_NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_MessageType `path:"message-type" module:"nokia-conf"`
	Script             *string                                                      `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Gtpv1C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) GetDirection() E_NokiaTypesSros_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) GetMessageType() E_NokiaConf_Configure_Python_PythonPolicy_Gtpv1C_MessageType {
	if t == nil || t.MessageType == 0 {
		return 0
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Gtpv1C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Gtpv1C
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy_Gtpv1C struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Gtpv1C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Gtpv1C.
func (*NokiaConf_Configure_Python_PythonPolicy_Gtpv1C) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Gtpv2C represents the /nokia-conf/configure/python/python-policy/gtpv2-c YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Gtpv2C struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesSros_Direction                                   `path:"direction" module:"nokia-conf"`
	MessageType        E_NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_MessageType `path:"message-type" module:"nokia-conf"`
	Script             *string                                                      `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Gtpv2C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) GetDirection() E_NokiaTypesSros_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) GetMessageType() E_NokiaConf_Configure_Python_PythonPolicy_Gtpv2C_MessageType {
	if t == nil || t.MessageType == 0 {
		return 0
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Gtpv2C
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Gtpv2C
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy_Gtpv2C struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Gtpv2C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Gtpv2C.
func (*NokiaConf_Configure_Python_PythonPolicy_Gtpv2C) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Pppoe represents the /nokia-conf/configure/python/python-policy/pppoe YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Pppoe struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesSros_Direction                                  `path:"direction" module:"nokia-conf"`
	MessageType        E_NokiaConf_Configure_Python_PythonPolicy_Pppoe_MessageType `path:"message-type" module:"nokia-conf"`
	Script             *string                                                     `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Pppoe) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) GetDirection() E_NokiaTypesSros_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) GetMessageType() E_NokiaConf_Configure_Python_PythonPolicy_Pppoe_MessageType {
	if t == nil || t.MessageType == 0 {
		return 0
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy_Pppoe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Pppoe.
func (*NokiaConf_Configure_Python_PythonPolicy_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Radius represents the /nokia-conf/configure/python/python-policy/radius YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Radius struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesSros_Direction                                   `path:"direction" module:"nokia-conf"`
	MessageType        E_NokiaConf_Configure_Python_PythonPolicy_Radius_MessageType `path:"message-type" module:"nokia-conf"`
	Script             *string                                                      `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Radius) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) GetDirection() E_NokiaTypesSros_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMessageType retrieves the value of the leaf MessageType from the NokiaConf_Configure_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageType is set, it can
// safely use t.GetMessageType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) GetMessageType() E_NokiaConf_Configure_Python_PythonPolicy_Radius_MessageType {
	if t == nil || t.MessageType == 0 {
		return 0
	}
	return t.MessageType
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonPolicy_Radius struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":    t.Direction,
		"message-type": t.MessageType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Radius.
func (*NokiaConf_Configure_Python_PythonPolicy_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Syslog represents the /nokia-conf/configure/python/python-policy/syslog YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Syslog struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Script             *string  `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Syslog) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Syslog) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Syslog) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Syslog) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Syslog.
func (*NokiaConf_Configure_Python_PythonPolicy_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonPolicy_Vsd represents the /nokia-conf/configure/python/python-policy/vsd YANG schema element.
type NokiaConf_Configure_Python_PythonPolicy_Vsd struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Script             *string  `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonPolicy_Vsd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonPolicy_Vsd) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonPolicy_Vsd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Vsd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonPolicy_Vsd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Vsd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetScript retrieves the value of the leaf Script from the NokiaConf_Configure_Python_PythonPolicy_Vsd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Script is set, it can
// safely use t.GetScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Script == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonPolicy_Vsd) GetScript() string {
	if t == nil || t.Script == nil {
		return ""
	}
	return *t.Script
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonPolicy_Vsd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonPolicy_Vsd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Vsd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonPolicy_Vsd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonPolicy_Vsd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonPolicy_Vsd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonPolicy_Vsd.
func (*NokiaConf_Configure_Python_PythonPolicy_Vsd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonScript represents the /nokia-conf/configure/python/python-script YANG schema element.
type NokiaConf_Configure_Python_PythonScript struct {
	ActionOnFail       E_NokiaConf_Configure_Python_PythonScript_ActionOnFail `path:"action-on-fail" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	Name               *string                                                `path:"name" module:"nokia-conf"`
	Protection         *NokiaConf_Configure_Python_PythonScript_Protection    `path:"protection" module:"nokia-conf"`
	Urls               []string                                               `path:"urls" module:"nokia-conf"`
	Version            E_NokiaConf_Configure_Python_PythonScript_Version      `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonScript) IsYANGGoStruct() {}

// GetOrCreateProtection retrieves the value of the Protection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Python_PythonScript) GetOrCreateProtection() *NokiaConf_Configure_Python_PythonScript_Protection {
	if t.Protection != nil {
		return t.Protection
	}
	t.Protection = &NokiaConf_Configure_Python_PythonScript_Protection{}
	return t.Protection
}

// GetProtection returns the value of the Protection struct pointer
// from NokiaConf_Configure_Python_PythonScript. If the receiver or the field Protection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Python_PythonScript) GetProtection() *NokiaConf_Configure_Python_PythonScript_Protection {
	if t != nil && t.Protection != nil {
		return t.Protection
	}
	return nil
}

// GetActionOnFail retrieves the value of the leaf ActionOnFail from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionOnFail is set, it can
// safely use t.GetActionOnFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionOnFail == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetActionOnFail() E_NokiaConf_Configure_Python_PythonScript_ActionOnFail {
	if t == nil || t.ActionOnFail == 0 {
		return NokiaConf_Configure_Python_PythonScript_ActionOnFail_drop
	}
	return t.ActionOnFail
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUrls retrieves the value of the leaf Urls from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Urls is set, it can
// safely use t.GetUrls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Urls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetUrls() []string {
	if t == nil || t.Urls == nil {
		return nil
	}
	return t.Urls
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Python_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript) GetVersion() E_NokiaConf_Configure_Python_PythonScript_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Python_PythonScript_Version_python2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActionOnFail == 0 {
		t.ActionOnFail = NokiaConf_Configure_Python_PythonScript_ActionOnFail_drop
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Python_PythonScript_Version_python2
	}
	t.Protection.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Python_PythonScript struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Python_PythonScript) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonScript.
func (*NokiaConf_Configure_Python_PythonScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Python_PythonScript_Protection represents the /nokia-conf/configure/python/python-script/protection YANG schema element.
type NokiaConf_Configure_Python_PythonScript_Protection struct {
	HmacSha256 *string `path:"hmac-sha256" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Python_PythonScript_Protection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Python_PythonScript_Protection) IsYANGGoStruct() {}

// GetHmacSha256 retrieves the value of the leaf HmacSha256 from the NokiaConf_Configure_Python_PythonScript_Protection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HmacSha256 is set, it can
// safely use t.GetHmacSha256() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HmacSha256 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Python_PythonScript_Protection) GetHmacSha256() string {
	if t == nil || t.HmacSha256 == nil {
		return ""
	}
	return *t.HmacSha256
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Python_PythonScript_Protection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Python_PythonScript_Protection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonScript_Protection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Python_PythonScript_Protection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Python_PythonScript_Protection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Python_PythonScript_Protection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Python_PythonScript_Protection.
func (*NokiaConf_Configure_Python_PythonScript_Protection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos represents the /nokia-conf/configure/qos YANG schema element.
type NokiaConf_Configure_Qos struct {
	AdvConfigPolicy             map[string]*NokiaConf_Configure_Qos_AdvConfigPolicy             `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups                 []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	AtmTdProfile                map[int32]*NokiaConf_Configure_Qos_AtmTdProfile                 `path:"atm-td-profile" module:"nokia-conf"`
	Dot1PFcMap                  map[string]*NokiaConf_Configure_Qos_Dot1PFcMap                  `path:"dot1p-fc-map" module:"nokia-conf"`
	DscpFcMap                   map[string]*NokiaConf_Configure_Qos_DscpFcMap                   `path:"dscp-fc-map" module:"nokia-conf"`
	EgressRemarkPolicy          map[string]*NokiaConf_Configure_Qos_EgressRemarkPolicy          `path:"egress-remark-policy" module:"nokia-conf"`
	FcDot1PMap                  map[string]*NokiaConf_Configure_Qos_FcDot1PMap                  `path:"fc-dot1p-map" module:"nokia-conf"`
	FcDscpMap                   map[string]*NokiaConf_Configure_Qos_FcDscpMap                   `path:"fc-dscp-map" module:"nokia-conf"`
	FcLspExpMap                 map[string]*NokiaConf_Configure_Qos_FcLspExpMap                 `path:"fc-lsp-exp-map" module:"nokia-conf"`
	FpResourcePolicy            map[string]*NokiaConf_Configure_Qos_FpResourcePolicy            `path:"fp-resource-policy" module:"nokia-conf"`
	HsAttachmentPolicy          map[string]*NokiaConf_Configure_Qos_HsAttachmentPolicy          `path:"hs-attachment-policy" module:"nokia-conf"`
	HsPoolPolicy                map[string]*NokiaConf_Configure_Qos_HsPoolPolicy                `path:"hs-pool-policy" module:"nokia-conf"`
	HsPortPoolPolicy            map[string]*NokiaConf_Configure_Qos_HsPortPoolPolicy            `path:"hs-port-pool-policy" module:"nokia-conf"`
	HsSchedulerPolicy           map[string]*NokiaConf_Configure_Qos_HsSchedulerPolicy           `path:"hs-scheduler-policy" module:"nokia-conf"`
	HsmdaPoolPolicy             map[string]*NokiaConf_Configure_Qos_HsmdaPoolPolicy             `path:"hsmda-pool-policy" module:"nokia-conf"`
	HsmdaSchedulerPolicy        map[string]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy        `path:"hsmda-scheduler-policy" module:"nokia-conf"`
	HsmdaSlopePolicy            map[string]*NokiaConf_Configure_Qos_HsmdaSlopePolicy            `path:"hsmda-slope-policy" module:"nokia-conf"`
	HsmdaWrrPolicy              map[string]*NokiaConf_Configure_Qos_HsmdaWrrPolicy              `path:"hsmda-wrr-policy" module:"nokia-conf"`
	HwAggShaperSchedulerPolicy  map[string]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy  `path:"hw-agg-shaper-scheduler-policy" module:"nokia-conf"`
	IngressClassificationPolicy map[string]*NokiaConf_Configure_Qos_IngressClassificationPolicy `path:"ingress-classification-policy" module:"nokia-conf"`
	LspExpFcMap                 map[string]*NokiaConf_Configure_Qos_LspExpFcMap                 `path:"lsp-exp-fc-map" module:"nokia-conf"`
	MatchList                   *NokiaConf_Configure_Qos_MatchList                              `path:"match-list" module:"nokia-conf"`
	McFrProfileEgress           map[uint32]*NokiaConf_Configure_Qos_McFrProfileEgress           `path:"mc-fr-profile-egress" module:"nokia-conf"`
	McFrProfileIngress          map[uint32]*NokiaConf_Configure_Qos_McFrProfileIngress          `path:"mc-fr-profile-ingress" module:"nokia-conf"`
	MdAutoId                    *NokiaConf_Configure_Qos_MdAutoId                               `path:"md-auto-id" module:"nokia-conf"`
	MlpppProfileEgress          map[uint32]*NokiaConf_Configure_Qos_MlpppProfileEgress          `path:"mlppp-profile-egress" module:"nokia-conf"`
	MlpppProfileIngress         map[uint32]*NokiaConf_Configure_Qos_MlpppProfileIngress         `path:"mlppp-profile-ingress" module:"nokia-conf"`
	Network                     map[string]*NokiaConf_Configure_Qos_Network                     `path:"network" module:"nokia-conf"`
	NetworkIngress              map[string]*NokiaConf_Configure_Qos_NetworkIngress              `path:"network-ingress" module:"nokia-conf"`
	NetworkQueue                map[string]*NokiaConf_Configure_Qos_NetworkQueue                `path:"network-queue" module:"nokia-conf"`
	PacketByteOffset            *NokiaConf_Configure_Qos_PacketByteOffset                       `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerControlPolicy        map[string]*NokiaConf_Configure_Qos_PolicerControlPolicy        `path:"policer-control-policy" module:"nokia-conf"`
	PortQosPolicy               map[string]*NokiaConf_Configure_Qos_PortQosPolicy               `path:"port-qos-policy" module:"nokia-conf"`
	PortSchedulerPolicy         map[string]*NokiaConf_Configure_Qos_PortSchedulerPolicy         `path:"port-scheduler-policy" module:"nokia-conf"`
	PostPolicerMapping          map[string]*NokiaConf_Configure_Qos_PostPolicerMapping          `path:"post-policer-mapping" module:"nokia-conf"`
	QueueGroupRedirectList      map[string]*NokiaConf_Configure_Qos_QueueGroupRedirectList      `path:"queue-group-redirect-list" module:"nokia-conf"`
	QueueGroupTemplates         *NokiaConf_Configure_Qos_QueueGroupTemplates                    `path:"queue-group-templates" module:"nokia-conf"`
	QueueMgmtPolicy             map[string]*NokiaConf_Configure_Qos_QueueMgmtPolicy             `path:"queue-mgmt-policy" module:"nokia-conf"`
	SapEgress                   map[string]*NokiaConf_Configure_Qos_SapEgress                   `path:"sap-egress" module:"nokia-conf"`
	SapIngress                  map[string]*NokiaConf_Configure_Qos_SapIngress                  `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy             map[string]*NokiaConf_Configure_Qos_SchedulerPolicy             `path:"scheduler-policy" module:"nokia-conf"`
	SharedQueue                 map[string]*NokiaConf_Configure_Qos_SharedQueue                 `path:"shared-queue" module:"nokia-conf"`
	SlopePolicy                 map[string]*NokiaConf_Configure_Qos_SlopePolicy                 `path:"slope-policy" module:"nokia-conf"`
	VlanQosPolicy               map[string]*NokiaConf_Configure_Qos_VlanQosPolicy               `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos) IsYANGGoStruct() {}

// NewAdvConfigPolicy creates a new entry in the AdvConfigPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewAdvConfigPolicy(AdvConfigPolicyName string) (*NokiaConf_Configure_Qos_AdvConfigPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdvConfigPolicy == nil {
		t.AdvConfigPolicy = make(map[string]*NokiaConf_Configure_Qos_AdvConfigPolicy)
	}

	key := AdvConfigPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdvConfigPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdvConfigPolicy", key)
	}

	t.AdvConfigPolicy[key] = &NokiaConf_Configure_Qos_AdvConfigPolicy{
		AdvConfigPolicyName: &AdvConfigPolicyName,
	}

	return t.AdvConfigPolicy[key], nil
}

// RenameAdvConfigPolicy renames an entry in the list AdvConfigPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameAdvConfigPolicy(oldK, newK string) error {
	if _, ok := t.AdvConfigPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in AdvConfigPolicy", newK)
	}

	e, ok := t.AdvConfigPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdvConfigPolicy", oldK)
	}
	e.AdvConfigPolicyName = &newK

	t.AdvConfigPolicy[newK] = e
	delete(t.AdvConfigPolicy, oldK)
	return nil
}

// GetOrCreateAdvConfigPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateAdvConfigPolicy(AdvConfigPolicyName string) *NokiaConf_Configure_Qos_AdvConfigPolicy {

	key := AdvConfigPolicyName

	if v, ok := t.AdvConfigPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvConfigPolicy(AdvConfigPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvConfigPolicy got unexpected error: %v", err))
	}
	return v
}

// GetAdvConfigPolicy retrieves the value with the specified key from
// the AdvConfigPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetAdvConfigPolicy(AdvConfigPolicyName string) *NokiaConf_Configure_Qos_AdvConfigPolicy {

	if t == nil {
		return nil
	}

	key := AdvConfigPolicyName

	if lm, ok := t.AdvConfigPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvConfigPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteAdvConfigPolicy(AdvConfigPolicyName string) {
	key := AdvConfigPolicyName

	delete(t.AdvConfigPolicy, key)
}

// AppendAdvConfigPolicy appends the supplied NokiaConf_Configure_Qos_AdvConfigPolicy struct to the
// list AdvConfigPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_AdvConfigPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendAdvConfigPolicy(v *NokiaConf_Configure_Qos_AdvConfigPolicy) error {
	if v.AdvConfigPolicyName == nil {
		return fmt.Errorf("invalid nil key received for AdvConfigPolicyName")
	}

	key := *v.AdvConfigPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdvConfigPolicy == nil {
		t.AdvConfigPolicy = make(map[string]*NokiaConf_Configure_Qos_AdvConfigPolicy)
	}

	if _, ok := t.AdvConfigPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list AdvConfigPolicy %v", key)
	}

	t.AdvConfigPolicy[key] = v
	return nil
}

// NewAtmTdProfile creates a new entry in the AtmTdProfile list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewAtmTdProfile(AtmTdProfileId int32) (*NokiaConf_Configure_Qos_AtmTdProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AtmTdProfile == nil {
		t.AtmTdProfile = make(map[int32]*NokiaConf_Configure_Qos_AtmTdProfile)
	}

	key := AtmTdProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AtmTdProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AtmTdProfile", key)
	}

	t.AtmTdProfile[key] = &NokiaConf_Configure_Qos_AtmTdProfile{
		AtmTdProfileId: &AtmTdProfileId,
	}

	return t.AtmTdProfile[key], nil
}

// RenameAtmTdProfile renames an entry in the list AtmTdProfile within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameAtmTdProfile(oldK, newK int32) error {
	if _, ok := t.AtmTdProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in AtmTdProfile", newK)
	}

	e, ok := t.AtmTdProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AtmTdProfile", oldK)
	}
	e.AtmTdProfileId = &newK

	t.AtmTdProfile[newK] = e
	delete(t.AtmTdProfile, oldK)
	return nil
}

// GetOrCreateAtmTdProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateAtmTdProfile(AtmTdProfileId int32) *NokiaConf_Configure_Qos_AtmTdProfile {

	key := AtmTdProfileId

	if v, ok := t.AtmTdProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAtmTdProfile(AtmTdProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAtmTdProfile got unexpected error: %v", err))
	}
	return v
}

// GetAtmTdProfile retrieves the value with the specified key from
// the AtmTdProfile map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetAtmTdProfile(AtmTdProfileId int32) *NokiaConf_Configure_Qos_AtmTdProfile {

	if t == nil {
		return nil
	}

	key := AtmTdProfileId

	if lm, ok := t.AtmTdProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteAtmTdProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteAtmTdProfile(AtmTdProfileId int32) {
	key := AtmTdProfileId

	delete(t.AtmTdProfile, key)
}

// AppendAtmTdProfile appends the supplied NokiaConf_Configure_Qos_AtmTdProfile struct to the
// list AtmTdProfile of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_AtmTdProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendAtmTdProfile(v *NokiaConf_Configure_Qos_AtmTdProfile) error {
	if v.AtmTdProfileId == nil {
		return fmt.Errorf("invalid nil key received for AtmTdProfileId")
	}

	key := *v.AtmTdProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AtmTdProfile == nil {
		t.AtmTdProfile = make(map[int32]*NokiaConf_Configure_Qos_AtmTdProfile)
	}

	if _, ok := t.AtmTdProfile[key]; ok {
		return fmt.Errorf("duplicate key for list AtmTdProfile %v", key)
	}

	t.AtmTdProfile[key] = v
	return nil
}

// NewDot1PFcMap creates a new entry in the Dot1PFcMap list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewDot1PFcMap(Dot1PFcMapName string) (*NokiaConf_Configure_Qos_Dot1PFcMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1PFcMap == nil {
		t.Dot1PFcMap = make(map[string]*NokiaConf_Configure_Qos_Dot1PFcMap)
	}

	key := Dot1PFcMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1PFcMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1PFcMap", key)
	}

	t.Dot1PFcMap[key] = &NokiaConf_Configure_Qos_Dot1PFcMap{
		Dot1PFcMapName: &Dot1PFcMapName,
	}

	return t.Dot1PFcMap[key], nil
}

// RenameDot1PFcMap renames an entry in the list Dot1PFcMap within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameDot1PFcMap(oldK, newK string) error {
	if _, ok := t.Dot1PFcMap[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1PFcMap", newK)
	}

	e, ok := t.Dot1PFcMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1PFcMap", oldK)
	}
	e.Dot1PFcMapName = &newK

	t.Dot1PFcMap[newK] = e
	delete(t.Dot1PFcMap, oldK)
	return nil
}

// GetOrCreateDot1PFcMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateDot1PFcMap(Dot1PFcMapName string) *NokiaConf_Configure_Qos_Dot1PFcMap {

	key := Dot1PFcMapName

	if v, ok := t.Dot1PFcMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1PFcMap(Dot1PFcMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1PFcMap got unexpected error: %v", err))
	}
	return v
}

// GetDot1PFcMap retrieves the value with the specified key from
// the Dot1PFcMap map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetDot1PFcMap(Dot1PFcMapName string) *NokiaConf_Configure_Qos_Dot1PFcMap {

	if t == nil {
		return nil
	}

	key := Dot1PFcMapName

	if lm, ok := t.Dot1PFcMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1PFcMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteDot1PFcMap(Dot1PFcMapName string) {
	key := Dot1PFcMapName

	delete(t.Dot1PFcMap, key)
}

// AppendDot1PFcMap appends the supplied NokiaConf_Configure_Qos_Dot1PFcMap struct to the
// list Dot1PFcMap of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Dot1PFcMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendDot1PFcMap(v *NokiaConf_Configure_Qos_Dot1PFcMap) error {
	if v.Dot1PFcMapName == nil {
		return fmt.Errorf("invalid nil key received for Dot1PFcMapName")
	}

	key := *v.Dot1PFcMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1PFcMap == nil {
		t.Dot1PFcMap = make(map[string]*NokiaConf_Configure_Qos_Dot1PFcMap)
	}

	if _, ok := t.Dot1PFcMap[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1PFcMap %v", key)
	}

	t.Dot1PFcMap[key] = v
	return nil
}

// NewDscpFcMap creates a new entry in the DscpFcMap list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewDscpFcMap(DscpFcMapName string) (*NokiaConf_Configure_Qos_DscpFcMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpFcMap == nil {
		t.DscpFcMap = make(map[string]*NokiaConf_Configure_Qos_DscpFcMap)
	}

	key := DscpFcMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DscpFcMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DscpFcMap", key)
	}

	t.DscpFcMap[key] = &NokiaConf_Configure_Qos_DscpFcMap{
		DscpFcMapName: &DscpFcMapName,
	}

	return t.DscpFcMap[key], nil
}

// RenameDscpFcMap renames an entry in the list DscpFcMap within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameDscpFcMap(oldK, newK string) error {
	if _, ok := t.DscpFcMap[newK]; ok {
		return fmt.Errorf("key %v already exists in DscpFcMap", newK)
	}

	e, ok := t.DscpFcMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DscpFcMap", oldK)
	}
	e.DscpFcMapName = &newK

	t.DscpFcMap[newK] = e
	delete(t.DscpFcMap, oldK)
	return nil
}

// GetOrCreateDscpFcMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateDscpFcMap(DscpFcMapName string) *NokiaConf_Configure_Qos_DscpFcMap {

	key := DscpFcMapName

	if v, ok := t.DscpFcMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscpFcMap(DscpFcMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscpFcMap got unexpected error: %v", err))
	}
	return v
}

// GetDscpFcMap retrieves the value with the specified key from
// the DscpFcMap map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetDscpFcMap(DscpFcMapName string) *NokiaConf_Configure_Qos_DscpFcMap {

	if t == nil {
		return nil
	}

	key := DscpFcMapName

	if lm, ok := t.DscpFcMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscpFcMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteDscpFcMap(DscpFcMapName string) {
	key := DscpFcMapName

	delete(t.DscpFcMap, key)
}

// AppendDscpFcMap appends the supplied NokiaConf_Configure_Qos_DscpFcMap struct to the
// list DscpFcMap of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_DscpFcMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendDscpFcMap(v *NokiaConf_Configure_Qos_DscpFcMap) error {
	if v.DscpFcMapName == nil {
		return fmt.Errorf("invalid nil key received for DscpFcMapName")
	}

	key := *v.DscpFcMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpFcMap == nil {
		t.DscpFcMap = make(map[string]*NokiaConf_Configure_Qos_DscpFcMap)
	}

	if _, ok := t.DscpFcMap[key]; ok {
		return fmt.Errorf("duplicate key for list DscpFcMap %v", key)
	}

	t.DscpFcMap[key] = v
	return nil
}

// NewEgressRemarkPolicy creates a new entry in the EgressRemarkPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewEgressRemarkPolicy(EgressRemarkPolicyName string) (*NokiaConf_Configure_Qos_EgressRemarkPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressRemarkPolicy == nil {
		t.EgressRemarkPolicy = make(map[string]*NokiaConf_Configure_Qos_EgressRemarkPolicy)
	}

	key := EgressRemarkPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressRemarkPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressRemarkPolicy", key)
	}

	t.EgressRemarkPolicy[key] = &NokiaConf_Configure_Qos_EgressRemarkPolicy{
		EgressRemarkPolicyName: &EgressRemarkPolicyName,
	}

	return t.EgressRemarkPolicy[key], nil
}

// RenameEgressRemarkPolicy renames an entry in the list EgressRemarkPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameEgressRemarkPolicy(oldK, newK string) error {
	if _, ok := t.EgressRemarkPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in EgressRemarkPolicy", newK)
	}

	e, ok := t.EgressRemarkPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EgressRemarkPolicy", oldK)
	}
	e.EgressRemarkPolicyName = &newK

	t.EgressRemarkPolicy[newK] = e
	delete(t.EgressRemarkPolicy, oldK)
	return nil
}

// GetOrCreateEgressRemarkPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateEgressRemarkPolicy(EgressRemarkPolicyName string) *NokiaConf_Configure_Qos_EgressRemarkPolicy {

	key := EgressRemarkPolicyName

	if v, ok := t.EgressRemarkPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgressRemarkPolicy(EgressRemarkPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgressRemarkPolicy got unexpected error: %v", err))
	}
	return v
}

// GetEgressRemarkPolicy retrieves the value with the specified key from
// the EgressRemarkPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetEgressRemarkPolicy(EgressRemarkPolicyName string) *NokiaConf_Configure_Qos_EgressRemarkPolicy {

	if t == nil {
		return nil
	}

	key := EgressRemarkPolicyName

	if lm, ok := t.EgressRemarkPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteEgressRemarkPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteEgressRemarkPolicy(EgressRemarkPolicyName string) {
	key := EgressRemarkPolicyName

	delete(t.EgressRemarkPolicy, key)
}

// AppendEgressRemarkPolicy appends the supplied NokiaConf_Configure_Qos_EgressRemarkPolicy struct to the
// list EgressRemarkPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_EgressRemarkPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendEgressRemarkPolicy(v *NokiaConf_Configure_Qos_EgressRemarkPolicy) error {
	if v.EgressRemarkPolicyName == nil {
		return fmt.Errorf("invalid nil key received for EgressRemarkPolicyName")
	}

	key := *v.EgressRemarkPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressRemarkPolicy == nil {
		t.EgressRemarkPolicy = make(map[string]*NokiaConf_Configure_Qos_EgressRemarkPolicy)
	}

	if _, ok := t.EgressRemarkPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list EgressRemarkPolicy %v", key)
	}

	t.EgressRemarkPolicy[key] = v
	return nil
}

// NewFcDot1PMap creates a new entry in the FcDot1PMap list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewFcDot1PMap(FcDot1PMapName string) (*NokiaConf_Configure_Qos_FcDot1PMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDot1PMap == nil {
		t.FcDot1PMap = make(map[string]*NokiaConf_Configure_Qos_FcDot1PMap)
	}

	key := FcDot1PMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FcDot1PMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FcDot1PMap", key)
	}

	t.FcDot1PMap[key] = &NokiaConf_Configure_Qos_FcDot1PMap{
		FcDot1PMapName: &FcDot1PMapName,
	}

	return t.FcDot1PMap[key], nil
}

// RenameFcDot1PMap renames an entry in the list FcDot1PMap within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameFcDot1PMap(oldK, newK string) error {
	if _, ok := t.FcDot1PMap[newK]; ok {
		return fmt.Errorf("key %v already exists in FcDot1PMap", newK)
	}

	e, ok := t.FcDot1PMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FcDot1PMap", oldK)
	}
	e.FcDot1PMapName = &newK

	t.FcDot1PMap[newK] = e
	delete(t.FcDot1PMap, oldK)
	return nil
}

// GetOrCreateFcDot1PMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateFcDot1PMap(FcDot1PMapName string) *NokiaConf_Configure_Qos_FcDot1PMap {

	key := FcDot1PMapName

	if v, ok := t.FcDot1PMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFcDot1PMap(FcDot1PMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFcDot1PMap got unexpected error: %v", err))
	}
	return v
}

// GetFcDot1PMap retrieves the value with the specified key from
// the FcDot1PMap map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetFcDot1PMap(FcDot1PMapName string) *NokiaConf_Configure_Qos_FcDot1PMap {

	if t == nil {
		return nil
	}

	key := FcDot1PMapName

	if lm, ok := t.FcDot1PMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteFcDot1PMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteFcDot1PMap(FcDot1PMapName string) {
	key := FcDot1PMapName

	delete(t.FcDot1PMap, key)
}

// AppendFcDot1PMap appends the supplied NokiaConf_Configure_Qos_FcDot1PMap struct to the
// list FcDot1PMap of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_FcDot1PMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendFcDot1PMap(v *NokiaConf_Configure_Qos_FcDot1PMap) error {
	if v.FcDot1PMapName == nil {
		return fmt.Errorf("invalid nil key received for FcDot1PMapName")
	}

	key := *v.FcDot1PMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDot1PMap == nil {
		t.FcDot1PMap = make(map[string]*NokiaConf_Configure_Qos_FcDot1PMap)
	}

	if _, ok := t.FcDot1PMap[key]; ok {
		return fmt.Errorf("duplicate key for list FcDot1PMap %v", key)
	}

	t.FcDot1PMap[key] = v
	return nil
}

// NewFcDscpMap creates a new entry in the FcDscpMap list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewFcDscpMap(FcDscpMapName string) (*NokiaConf_Configure_Qos_FcDscpMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDscpMap == nil {
		t.FcDscpMap = make(map[string]*NokiaConf_Configure_Qos_FcDscpMap)
	}

	key := FcDscpMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FcDscpMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FcDscpMap", key)
	}

	t.FcDscpMap[key] = &NokiaConf_Configure_Qos_FcDscpMap{
		FcDscpMapName: &FcDscpMapName,
	}

	return t.FcDscpMap[key], nil
}

// RenameFcDscpMap renames an entry in the list FcDscpMap within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameFcDscpMap(oldK, newK string) error {
	if _, ok := t.FcDscpMap[newK]; ok {
		return fmt.Errorf("key %v already exists in FcDscpMap", newK)
	}

	e, ok := t.FcDscpMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FcDscpMap", oldK)
	}
	e.FcDscpMapName = &newK

	t.FcDscpMap[newK] = e
	delete(t.FcDscpMap, oldK)
	return nil
}

// GetOrCreateFcDscpMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateFcDscpMap(FcDscpMapName string) *NokiaConf_Configure_Qos_FcDscpMap {

	key := FcDscpMapName

	if v, ok := t.FcDscpMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFcDscpMap(FcDscpMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFcDscpMap got unexpected error: %v", err))
	}
	return v
}

// GetFcDscpMap retrieves the value with the specified key from
// the FcDscpMap map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetFcDscpMap(FcDscpMapName string) *NokiaConf_Configure_Qos_FcDscpMap {

	if t == nil {
		return nil
	}

	key := FcDscpMapName

	if lm, ok := t.FcDscpMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteFcDscpMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteFcDscpMap(FcDscpMapName string) {
	key := FcDscpMapName

	delete(t.FcDscpMap, key)
}

// AppendFcDscpMap appends the supplied NokiaConf_Configure_Qos_FcDscpMap struct to the
// list FcDscpMap of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_FcDscpMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendFcDscpMap(v *NokiaConf_Configure_Qos_FcDscpMap) error {
	if v.FcDscpMapName == nil {
		return fmt.Errorf("invalid nil key received for FcDscpMapName")
	}

	key := *v.FcDscpMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcDscpMap == nil {
		t.FcDscpMap = make(map[string]*NokiaConf_Configure_Qos_FcDscpMap)
	}

	if _, ok := t.FcDscpMap[key]; ok {
		return fmt.Errorf("duplicate key for list FcDscpMap %v", key)
	}

	t.FcDscpMap[key] = v
	return nil
}

// NewFcLspExpMap creates a new entry in the FcLspExpMap list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewFcLspExpMap(FcLspExpMapName string) (*NokiaConf_Configure_Qos_FcLspExpMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcLspExpMap == nil {
		t.FcLspExpMap = make(map[string]*NokiaConf_Configure_Qos_FcLspExpMap)
	}

	key := FcLspExpMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FcLspExpMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FcLspExpMap", key)
	}

	t.FcLspExpMap[key] = &NokiaConf_Configure_Qos_FcLspExpMap{
		FcLspExpMapName: &FcLspExpMapName,
	}

	return t.FcLspExpMap[key], nil
}

// RenameFcLspExpMap renames an entry in the list FcLspExpMap within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameFcLspExpMap(oldK, newK string) error {
	if _, ok := t.FcLspExpMap[newK]; ok {
		return fmt.Errorf("key %v already exists in FcLspExpMap", newK)
	}

	e, ok := t.FcLspExpMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FcLspExpMap", oldK)
	}
	e.FcLspExpMapName = &newK

	t.FcLspExpMap[newK] = e
	delete(t.FcLspExpMap, oldK)
	return nil
}

// GetOrCreateFcLspExpMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateFcLspExpMap(FcLspExpMapName string) *NokiaConf_Configure_Qos_FcLspExpMap {

	key := FcLspExpMapName

	if v, ok := t.FcLspExpMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFcLspExpMap(FcLspExpMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFcLspExpMap got unexpected error: %v", err))
	}
	return v
}

// GetFcLspExpMap retrieves the value with the specified key from
// the FcLspExpMap map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetFcLspExpMap(FcLspExpMapName string) *NokiaConf_Configure_Qos_FcLspExpMap {

	if t == nil {
		return nil
	}

	key := FcLspExpMapName

	if lm, ok := t.FcLspExpMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteFcLspExpMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteFcLspExpMap(FcLspExpMapName string) {
	key := FcLspExpMapName

	delete(t.FcLspExpMap, key)
}

// AppendFcLspExpMap appends the supplied NokiaConf_Configure_Qos_FcLspExpMap struct to the
// list FcLspExpMap of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_FcLspExpMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendFcLspExpMap(v *NokiaConf_Configure_Qos_FcLspExpMap) error {
	if v.FcLspExpMapName == nil {
		return fmt.Errorf("invalid nil key received for FcLspExpMapName")
	}

	key := *v.FcLspExpMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FcLspExpMap == nil {
		t.FcLspExpMap = make(map[string]*NokiaConf_Configure_Qos_FcLspExpMap)
	}

	if _, ok := t.FcLspExpMap[key]; ok {
		return fmt.Errorf("duplicate key for list FcLspExpMap %v", key)
	}

	t.FcLspExpMap[key] = v
	return nil
}

// NewFpResourcePolicy creates a new entry in the FpResourcePolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewFpResourcePolicy(FpResourcePolicyName string) (*NokiaConf_Configure_Qos_FpResourcePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FpResourcePolicy == nil {
		t.FpResourcePolicy = make(map[string]*NokiaConf_Configure_Qos_FpResourcePolicy)
	}

	key := FpResourcePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FpResourcePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FpResourcePolicy", key)
	}

	t.FpResourcePolicy[key] = &NokiaConf_Configure_Qos_FpResourcePolicy{
		FpResourcePolicyName: &FpResourcePolicyName,
	}

	return t.FpResourcePolicy[key], nil
}

// RenameFpResourcePolicy renames an entry in the list FpResourcePolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameFpResourcePolicy(oldK, newK string) error {
	if _, ok := t.FpResourcePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in FpResourcePolicy", newK)
	}

	e, ok := t.FpResourcePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FpResourcePolicy", oldK)
	}
	e.FpResourcePolicyName = &newK

	t.FpResourcePolicy[newK] = e
	delete(t.FpResourcePolicy, oldK)
	return nil
}

// GetOrCreateFpResourcePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateFpResourcePolicy(FpResourcePolicyName string) *NokiaConf_Configure_Qos_FpResourcePolicy {

	key := FpResourcePolicyName

	if v, ok := t.FpResourcePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFpResourcePolicy(FpResourcePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFpResourcePolicy got unexpected error: %v", err))
	}
	return v
}

// GetFpResourcePolicy retrieves the value with the specified key from
// the FpResourcePolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetFpResourcePolicy(FpResourcePolicyName string) *NokiaConf_Configure_Qos_FpResourcePolicy {

	if t == nil {
		return nil
	}

	key := FpResourcePolicyName

	if lm, ok := t.FpResourcePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteFpResourcePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteFpResourcePolicy(FpResourcePolicyName string) {
	key := FpResourcePolicyName

	delete(t.FpResourcePolicy, key)
}

// AppendFpResourcePolicy appends the supplied NokiaConf_Configure_Qos_FpResourcePolicy struct to the
// list FpResourcePolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_FpResourcePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendFpResourcePolicy(v *NokiaConf_Configure_Qos_FpResourcePolicy) error {
	if v.FpResourcePolicyName == nil {
		return fmt.Errorf("invalid nil key received for FpResourcePolicyName")
	}

	key := *v.FpResourcePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FpResourcePolicy == nil {
		t.FpResourcePolicy = make(map[string]*NokiaConf_Configure_Qos_FpResourcePolicy)
	}

	if _, ok := t.FpResourcePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list FpResourcePolicy %v", key)
	}

	t.FpResourcePolicy[key] = v
	return nil
}

// NewHsAttachmentPolicy creates a new entry in the HsAttachmentPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsAttachmentPolicy(Name string) (*NokiaConf_Configure_Qos_HsAttachmentPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsAttachmentPolicy == nil {
		t.HsAttachmentPolicy = make(map[string]*NokiaConf_Configure_Qos_HsAttachmentPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsAttachmentPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsAttachmentPolicy", key)
	}

	t.HsAttachmentPolicy[key] = &NokiaConf_Configure_Qos_HsAttachmentPolicy{
		Name: &Name,
	}

	return t.HsAttachmentPolicy[key], nil
}

// RenameHsAttachmentPolicy renames an entry in the list HsAttachmentPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsAttachmentPolicy(oldK, newK string) error {
	if _, ok := t.HsAttachmentPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsAttachmentPolicy", newK)
	}

	e, ok := t.HsAttachmentPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsAttachmentPolicy", oldK)
	}
	e.Name = &newK

	t.HsAttachmentPolicy[newK] = e
	delete(t.HsAttachmentPolicy, oldK)
	return nil
}

// GetOrCreateHsAttachmentPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsAttachmentPolicy(Name string) *NokiaConf_Configure_Qos_HsAttachmentPolicy {

	key := Name

	if v, ok := t.HsAttachmentPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsAttachmentPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsAttachmentPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsAttachmentPolicy retrieves the value with the specified key from
// the HsAttachmentPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsAttachmentPolicy(Name string) *NokiaConf_Configure_Qos_HsAttachmentPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsAttachmentPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsAttachmentPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsAttachmentPolicy(Name string) {
	key := Name

	delete(t.HsAttachmentPolicy, key)
}

// AppendHsAttachmentPolicy appends the supplied NokiaConf_Configure_Qos_HsAttachmentPolicy struct to the
// list HsAttachmentPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsAttachmentPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsAttachmentPolicy(v *NokiaConf_Configure_Qos_HsAttachmentPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsAttachmentPolicy == nil {
		t.HsAttachmentPolicy = make(map[string]*NokiaConf_Configure_Qos_HsAttachmentPolicy)
	}

	if _, ok := t.HsAttachmentPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsAttachmentPolicy %v", key)
	}

	t.HsAttachmentPolicy[key] = v
	return nil
}

// NewHsPoolPolicy creates a new entry in the HsPoolPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsPoolPolicy(Name string) (*NokiaConf_Configure_Qos_HsPoolPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPoolPolicy == nil {
		t.HsPoolPolicy = make(map[string]*NokiaConf_Configure_Qos_HsPoolPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsPoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsPoolPolicy", key)
	}

	t.HsPoolPolicy[key] = &NokiaConf_Configure_Qos_HsPoolPolicy{
		Name: &Name,
	}

	return t.HsPoolPolicy[key], nil
}

// RenameHsPoolPolicy renames an entry in the list HsPoolPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsPoolPolicy(oldK, newK string) error {
	if _, ok := t.HsPoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsPoolPolicy", newK)
	}

	e, ok := t.HsPoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsPoolPolicy", oldK)
	}
	e.Name = &newK

	t.HsPoolPolicy[newK] = e
	delete(t.HsPoolPolicy, oldK)
	return nil
}

// GetOrCreateHsPoolPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsPoolPolicy(Name string) *NokiaConf_Configure_Qos_HsPoolPolicy {

	key := Name

	if v, ok := t.HsPoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsPoolPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsPoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsPoolPolicy retrieves the value with the specified key from
// the HsPoolPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsPoolPolicy(Name string) *NokiaConf_Configure_Qos_HsPoolPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsPoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsPoolPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsPoolPolicy(Name string) {
	key := Name

	delete(t.HsPoolPolicy, key)
}

// AppendHsPoolPolicy appends the supplied NokiaConf_Configure_Qos_HsPoolPolicy struct to the
// list HsPoolPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsPoolPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsPoolPolicy(v *NokiaConf_Configure_Qos_HsPoolPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPoolPolicy == nil {
		t.HsPoolPolicy = make(map[string]*NokiaConf_Configure_Qos_HsPoolPolicy)
	}

	if _, ok := t.HsPoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsPoolPolicy %v", key)
	}

	t.HsPoolPolicy[key] = v
	return nil
}

// NewHsPortPoolPolicy creates a new entry in the HsPortPoolPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsPortPoolPolicy(Name string) (*NokiaConf_Configure_Qos_HsPortPoolPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPortPoolPolicy == nil {
		t.HsPortPoolPolicy = make(map[string]*NokiaConf_Configure_Qos_HsPortPoolPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsPortPoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsPortPoolPolicy", key)
	}

	t.HsPortPoolPolicy[key] = &NokiaConf_Configure_Qos_HsPortPoolPolicy{
		Name: &Name,
	}

	return t.HsPortPoolPolicy[key], nil
}

// RenameHsPortPoolPolicy renames an entry in the list HsPortPoolPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsPortPoolPolicy(oldK, newK string) error {
	if _, ok := t.HsPortPoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsPortPoolPolicy", newK)
	}

	e, ok := t.HsPortPoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsPortPoolPolicy", oldK)
	}
	e.Name = &newK

	t.HsPortPoolPolicy[newK] = e
	delete(t.HsPortPoolPolicy, oldK)
	return nil
}

// GetOrCreateHsPortPoolPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsPortPoolPolicy(Name string) *NokiaConf_Configure_Qos_HsPortPoolPolicy {

	key := Name

	if v, ok := t.HsPortPoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsPortPoolPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsPortPoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsPortPoolPolicy retrieves the value with the specified key from
// the HsPortPoolPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsPortPoolPolicy(Name string) *NokiaConf_Configure_Qos_HsPortPoolPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsPortPoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsPortPoolPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsPortPoolPolicy(Name string) {
	key := Name

	delete(t.HsPortPoolPolicy, key)
}

// AppendHsPortPoolPolicy appends the supplied NokiaConf_Configure_Qos_HsPortPoolPolicy struct to the
// list HsPortPoolPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsPortPoolPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsPortPoolPolicy(v *NokiaConf_Configure_Qos_HsPortPoolPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsPortPoolPolicy == nil {
		t.HsPortPoolPolicy = make(map[string]*NokiaConf_Configure_Qos_HsPortPoolPolicy)
	}

	if _, ok := t.HsPortPoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsPortPoolPolicy %v", key)
	}

	t.HsPortPoolPolicy[key] = v
	return nil
}

// NewHsSchedulerPolicy creates a new entry in the HsSchedulerPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsSchedulerPolicy(Name string) (*NokiaConf_Configure_Qos_HsSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSchedulerPolicy == nil {
		t.HsSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_HsSchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsSchedulerPolicy", key)
	}

	t.HsSchedulerPolicy[key] = &NokiaConf_Configure_Qos_HsSchedulerPolicy{
		Name: &Name,
	}

	return t.HsSchedulerPolicy[key], nil
}

// RenameHsSchedulerPolicy renames an entry in the list HsSchedulerPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.HsSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsSchedulerPolicy", newK)
	}

	e, ok := t.HsSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsSchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.HsSchedulerPolicy[newK] = e
	delete(t.HsSchedulerPolicy, oldK)
	return nil
}

// GetOrCreateHsSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsSchedulerPolicy(Name string) *NokiaConf_Configure_Qos_HsSchedulerPolicy {

	key := Name

	if v, ok := t.HsSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsSchedulerPolicy retrieves the value with the specified key from
// the HsSchedulerPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsSchedulerPolicy(Name string) *NokiaConf_Configure_Qos_HsSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HsSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsSchedulerPolicy(Name string) {
	key := Name

	delete(t.HsSchedulerPolicy, key)
}

// AppendHsSchedulerPolicy appends the supplied NokiaConf_Configure_Qos_HsSchedulerPolicy struct to the
// list HsSchedulerPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsSchedulerPolicy(v *NokiaConf_Configure_Qos_HsSchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSchedulerPolicy == nil {
		t.HsSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_HsSchedulerPolicy)
	}

	if _, ok := t.HsSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsSchedulerPolicy %v", key)
	}

	t.HsSchedulerPolicy[key] = v
	return nil
}

// NewHsmdaPoolPolicy creates a new entry in the HsmdaPoolPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsmdaPoolPolicy(HsmdaPoolPolicyName string) (*NokiaConf_Configure_Qos_HsmdaPoolPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaPoolPolicy == nil {
		t.HsmdaPoolPolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaPoolPolicy)
	}

	key := HsmdaPoolPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaPoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaPoolPolicy", key)
	}

	t.HsmdaPoolPolicy[key] = &NokiaConf_Configure_Qos_HsmdaPoolPolicy{
		HsmdaPoolPolicyName: &HsmdaPoolPolicyName,
	}

	return t.HsmdaPoolPolicy[key], nil
}

// RenameHsmdaPoolPolicy renames an entry in the list HsmdaPoolPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsmdaPoolPolicy(oldK, newK string) error {
	if _, ok := t.HsmdaPoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaPoolPolicy", newK)
	}

	e, ok := t.HsmdaPoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaPoolPolicy", oldK)
	}
	e.HsmdaPoolPolicyName = &newK

	t.HsmdaPoolPolicy[newK] = e
	delete(t.HsmdaPoolPolicy, oldK)
	return nil
}

// GetOrCreateHsmdaPoolPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsmdaPoolPolicy(HsmdaPoolPolicyName string) *NokiaConf_Configure_Qos_HsmdaPoolPolicy {

	key := HsmdaPoolPolicyName

	if v, ok := t.HsmdaPoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaPoolPolicy(HsmdaPoolPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaPoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaPoolPolicy retrieves the value with the specified key from
// the HsmdaPoolPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsmdaPoolPolicy(HsmdaPoolPolicyName string) *NokiaConf_Configure_Qos_HsmdaPoolPolicy {

	if t == nil {
		return nil
	}

	key := HsmdaPoolPolicyName

	if lm, ok := t.HsmdaPoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaPoolPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsmdaPoolPolicy(HsmdaPoolPolicyName string) {
	key := HsmdaPoolPolicyName

	delete(t.HsmdaPoolPolicy, key)
}

// AppendHsmdaPoolPolicy appends the supplied NokiaConf_Configure_Qos_HsmdaPoolPolicy struct to the
// list HsmdaPoolPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaPoolPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsmdaPoolPolicy(v *NokiaConf_Configure_Qos_HsmdaPoolPolicy) error {
	if v.HsmdaPoolPolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaPoolPolicyName")
	}

	key := *v.HsmdaPoolPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaPoolPolicy == nil {
		t.HsmdaPoolPolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaPoolPolicy)
	}

	if _, ok := t.HsmdaPoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaPoolPolicy %v", key)
	}

	t.HsmdaPoolPolicy[key] = v
	return nil
}

// NewHsmdaSchedulerPolicy creates a new entry in the HsmdaSchedulerPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSchedulerPolicy == nil {
		t.HsmdaSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy)
	}

	key := HsmdaSchedulerPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaSchedulerPolicy", key)
	}

	t.HsmdaSchedulerPolicy[key] = &NokiaConf_Configure_Qos_HsmdaSchedulerPolicy{
		HsmdaSchedulerPolicyName: &HsmdaSchedulerPolicyName,
	}

	return t.HsmdaSchedulerPolicy[key], nil
}

// RenameHsmdaSchedulerPolicy renames an entry in the list HsmdaSchedulerPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsmdaSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.HsmdaSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaSchedulerPolicy", newK)
	}

	e, ok := t.HsmdaSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaSchedulerPolicy", oldK)
	}
	e.HsmdaSchedulerPolicyName = &newK

	t.HsmdaSchedulerPolicy[newK] = e
	delete(t.HsmdaSchedulerPolicy, oldK)
	return nil
}

// GetOrCreateHsmdaSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy {

	key := HsmdaSchedulerPolicyName

	if v, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaSchedulerPolicy retrieves the value with the specified key from
// the HsmdaSchedulerPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := HsmdaSchedulerPolicyName

	if lm, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsmdaSchedulerPolicy(HsmdaSchedulerPolicyName string) {
	key := HsmdaSchedulerPolicyName

	delete(t.HsmdaSchedulerPolicy, key)
}

// AppendHsmdaSchedulerPolicy appends the supplied NokiaConf_Configure_Qos_HsmdaSchedulerPolicy struct to the
// list HsmdaSchedulerPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsmdaSchedulerPolicy(v *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) error {
	if v.HsmdaSchedulerPolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaSchedulerPolicyName")
	}

	key := *v.HsmdaSchedulerPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSchedulerPolicy == nil {
		t.HsmdaSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy)
	}

	if _, ok := t.HsmdaSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaSchedulerPolicy %v", key)
	}

	t.HsmdaSchedulerPolicy[key] = v
	return nil
}

// NewHsmdaSlopePolicy creates a new entry in the HsmdaSlopePolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsmdaSlopePolicy(HsmdaSlopePolicyName string) (*NokiaConf_Configure_Qos_HsmdaSlopePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSlopePolicy == nil {
		t.HsmdaSlopePolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaSlopePolicy)
	}

	key := HsmdaSlopePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaSlopePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaSlopePolicy", key)
	}

	t.HsmdaSlopePolicy[key] = &NokiaConf_Configure_Qos_HsmdaSlopePolicy{
		HsmdaSlopePolicyName: &HsmdaSlopePolicyName,
	}

	return t.HsmdaSlopePolicy[key], nil
}

// RenameHsmdaSlopePolicy renames an entry in the list HsmdaSlopePolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsmdaSlopePolicy(oldK, newK string) error {
	if _, ok := t.HsmdaSlopePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaSlopePolicy", newK)
	}

	e, ok := t.HsmdaSlopePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaSlopePolicy", oldK)
	}
	e.HsmdaSlopePolicyName = &newK

	t.HsmdaSlopePolicy[newK] = e
	delete(t.HsmdaSlopePolicy, oldK)
	return nil
}

// GetOrCreateHsmdaSlopePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsmdaSlopePolicy(HsmdaSlopePolicyName string) *NokiaConf_Configure_Qos_HsmdaSlopePolicy {

	key := HsmdaSlopePolicyName

	if v, ok := t.HsmdaSlopePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaSlopePolicy(HsmdaSlopePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaSlopePolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaSlopePolicy retrieves the value with the specified key from
// the HsmdaSlopePolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsmdaSlopePolicy(HsmdaSlopePolicyName string) *NokiaConf_Configure_Qos_HsmdaSlopePolicy {

	if t == nil {
		return nil
	}

	key := HsmdaSlopePolicyName

	if lm, ok := t.HsmdaSlopePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaSlopePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsmdaSlopePolicy(HsmdaSlopePolicyName string) {
	key := HsmdaSlopePolicyName

	delete(t.HsmdaSlopePolicy, key)
}

// AppendHsmdaSlopePolicy appends the supplied NokiaConf_Configure_Qos_HsmdaSlopePolicy struct to the
// list HsmdaSlopePolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaSlopePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsmdaSlopePolicy(v *NokiaConf_Configure_Qos_HsmdaSlopePolicy) error {
	if v.HsmdaSlopePolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaSlopePolicyName")
	}

	key := *v.HsmdaSlopePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaSlopePolicy == nil {
		t.HsmdaSlopePolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaSlopePolicy)
	}

	if _, ok := t.HsmdaSlopePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaSlopePolicy %v", key)
	}

	t.HsmdaSlopePolicy[key] = v
	return nil
}

// NewHsmdaWrrPolicy creates a new entry in the HsmdaWrrPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHsmdaWrrPolicy(HsmdaWrrPolicyName string) (*NokiaConf_Configure_Qos_HsmdaWrrPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaWrrPolicy == nil {
		t.HsmdaWrrPolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaWrrPolicy)
	}

	key := HsmdaWrrPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsmdaWrrPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsmdaWrrPolicy", key)
	}

	t.HsmdaWrrPolicy[key] = &NokiaConf_Configure_Qos_HsmdaWrrPolicy{
		HsmdaWrrPolicyName: &HsmdaWrrPolicyName,
	}

	return t.HsmdaWrrPolicy[key], nil
}

// RenameHsmdaWrrPolicy renames an entry in the list HsmdaWrrPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHsmdaWrrPolicy(oldK, newK string) error {
	if _, ok := t.HsmdaWrrPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HsmdaWrrPolicy", newK)
	}

	e, ok := t.HsmdaWrrPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsmdaWrrPolicy", oldK)
	}
	e.HsmdaWrrPolicyName = &newK

	t.HsmdaWrrPolicy[newK] = e
	delete(t.HsmdaWrrPolicy, oldK)
	return nil
}

// GetOrCreateHsmdaWrrPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHsmdaWrrPolicy(HsmdaWrrPolicyName string) *NokiaConf_Configure_Qos_HsmdaWrrPolicy {

	key := HsmdaWrrPolicyName

	if v, ok := t.HsmdaWrrPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsmdaWrrPolicy(HsmdaWrrPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsmdaWrrPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHsmdaWrrPolicy retrieves the value with the specified key from
// the HsmdaWrrPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHsmdaWrrPolicy(HsmdaWrrPolicyName string) *NokiaConf_Configure_Qos_HsmdaWrrPolicy {

	if t == nil {
		return nil
	}

	key := HsmdaWrrPolicyName

	if lm, ok := t.HsmdaWrrPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsmdaWrrPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHsmdaWrrPolicy(HsmdaWrrPolicyName string) {
	key := HsmdaWrrPolicyName

	delete(t.HsmdaWrrPolicy, key)
}

// AppendHsmdaWrrPolicy appends the supplied NokiaConf_Configure_Qos_HsmdaWrrPolicy struct to the
// list HsmdaWrrPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaWrrPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHsmdaWrrPolicy(v *NokiaConf_Configure_Qos_HsmdaWrrPolicy) error {
	if v.HsmdaWrrPolicyName == nil {
		return fmt.Errorf("invalid nil key received for HsmdaWrrPolicyName")
	}

	key := *v.HsmdaWrrPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsmdaWrrPolicy == nil {
		t.HsmdaWrrPolicy = make(map[string]*NokiaConf_Configure_Qos_HsmdaWrrPolicy)
	}

	if _, ok := t.HsmdaWrrPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HsmdaWrrPolicy %v", key)
	}

	t.HsmdaWrrPolicy[key] = v
	return nil
}

// NewHwAggShaperSchedulerPolicy creates a new entry in the HwAggShaperSchedulerPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewHwAggShaperSchedulerPolicy(Name string) (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HwAggShaperSchedulerPolicy == nil {
		t.HwAggShaperSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HwAggShaperSchedulerPolicy", key)
	}

	t.HwAggShaperSchedulerPolicy[key] = &NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy{
		Name: &Name,
	}

	return t.HwAggShaperSchedulerPolicy[key], nil
}

// RenameHwAggShaperSchedulerPolicy renames an entry in the list HwAggShaperSchedulerPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameHwAggShaperSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.HwAggShaperSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in HwAggShaperSchedulerPolicy", newK)
	}

	e, ok := t.HwAggShaperSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HwAggShaperSchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.HwAggShaperSchedulerPolicy[newK] = e
	delete(t.HwAggShaperSchedulerPolicy, oldK)
	return nil
}

// GetOrCreateHwAggShaperSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateHwAggShaperSchedulerPolicy(Name string) *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy {

	key := Name

	if v, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHwAggShaperSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHwAggShaperSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetHwAggShaperSchedulerPolicy retrieves the value with the specified key from
// the HwAggShaperSchedulerPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetHwAggShaperSchedulerPolicy(Name string) *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteHwAggShaperSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteHwAggShaperSchedulerPolicy(Name string) {
	key := Name

	delete(t.HwAggShaperSchedulerPolicy, key)
}

// AppendHwAggShaperSchedulerPolicy appends the supplied NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy struct to the
// list HwAggShaperSchedulerPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendHwAggShaperSchedulerPolicy(v *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HwAggShaperSchedulerPolicy == nil {
		t.HwAggShaperSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy)
	}

	if _, ok := t.HwAggShaperSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list HwAggShaperSchedulerPolicy %v", key)
	}

	t.HwAggShaperSchedulerPolicy[key] = v
	return nil
}

// NewIngressClassificationPolicy creates a new entry in the IngressClassificationPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewIngressClassificationPolicy(IngressClassificationPolicyName string) (*NokiaConf_Configure_Qos_IngressClassificationPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressClassificationPolicy == nil {
		t.IngressClassificationPolicy = make(map[string]*NokiaConf_Configure_Qos_IngressClassificationPolicy)
	}

	key := IngressClassificationPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IngressClassificationPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IngressClassificationPolicy", key)
	}

	t.IngressClassificationPolicy[key] = &NokiaConf_Configure_Qos_IngressClassificationPolicy{
		IngressClassificationPolicyName: &IngressClassificationPolicyName,
	}

	return t.IngressClassificationPolicy[key], nil
}

// RenameIngressClassificationPolicy renames an entry in the list IngressClassificationPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameIngressClassificationPolicy(oldK, newK string) error {
	if _, ok := t.IngressClassificationPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in IngressClassificationPolicy", newK)
	}

	e, ok := t.IngressClassificationPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IngressClassificationPolicy", oldK)
	}
	e.IngressClassificationPolicyName = &newK

	t.IngressClassificationPolicy[newK] = e
	delete(t.IngressClassificationPolicy, oldK)
	return nil
}

// GetOrCreateIngressClassificationPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateIngressClassificationPolicy(IngressClassificationPolicyName string) *NokiaConf_Configure_Qos_IngressClassificationPolicy {

	key := IngressClassificationPolicyName

	if v, ok := t.IngressClassificationPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIngressClassificationPolicy(IngressClassificationPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIngressClassificationPolicy got unexpected error: %v", err))
	}
	return v
}

// GetIngressClassificationPolicy retrieves the value with the specified key from
// the IngressClassificationPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetIngressClassificationPolicy(IngressClassificationPolicyName string) *NokiaConf_Configure_Qos_IngressClassificationPolicy {

	if t == nil {
		return nil
	}

	key := IngressClassificationPolicyName

	if lm, ok := t.IngressClassificationPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIngressClassificationPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteIngressClassificationPolicy(IngressClassificationPolicyName string) {
	key := IngressClassificationPolicyName

	delete(t.IngressClassificationPolicy, key)
}

// AppendIngressClassificationPolicy appends the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy struct to the
// list IngressClassificationPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendIngressClassificationPolicy(v *NokiaConf_Configure_Qos_IngressClassificationPolicy) error {
	if v.IngressClassificationPolicyName == nil {
		return fmt.Errorf("invalid nil key received for IngressClassificationPolicyName")
	}

	key := *v.IngressClassificationPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressClassificationPolicy == nil {
		t.IngressClassificationPolicy = make(map[string]*NokiaConf_Configure_Qos_IngressClassificationPolicy)
	}

	if _, ok := t.IngressClassificationPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list IngressClassificationPolicy %v", key)
	}

	t.IngressClassificationPolicy[key] = v
	return nil
}

// NewLspExpFcMap creates a new entry in the LspExpFcMap list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewLspExpFcMap(LspExpFcMapName string) (*NokiaConf_Configure_Qos_LspExpFcMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExpFcMap == nil {
		t.LspExpFcMap = make(map[string]*NokiaConf_Configure_Qos_LspExpFcMap)
	}

	key := LspExpFcMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExpFcMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExpFcMap", key)
	}

	t.LspExpFcMap[key] = &NokiaConf_Configure_Qos_LspExpFcMap{
		LspExpFcMapName: &LspExpFcMapName,
	}

	return t.LspExpFcMap[key], nil
}

// RenameLspExpFcMap renames an entry in the list LspExpFcMap within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameLspExpFcMap(oldK, newK string) error {
	if _, ok := t.LspExpFcMap[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExpFcMap", newK)
	}

	e, ok := t.LspExpFcMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExpFcMap", oldK)
	}
	e.LspExpFcMapName = &newK

	t.LspExpFcMap[newK] = e
	delete(t.LspExpFcMap, oldK)
	return nil
}

// GetOrCreateLspExpFcMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateLspExpFcMap(LspExpFcMapName string) *NokiaConf_Configure_Qos_LspExpFcMap {

	key := LspExpFcMapName

	if v, ok := t.LspExpFcMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExpFcMap(LspExpFcMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExpFcMap got unexpected error: %v", err))
	}
	return v
}

// GetLspExpFcMap retrieves the value with the specified key from
// the LspExpFcMap map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetLspExpFcMap(LspExpFcMapName string) *NokiaConf_Configure_Qos_LspExpFcMap {

	if t == nil {
		return nil
	}

	key := LspExpFcMapName

	if lm, ok := t.LspExpFcMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExpFcMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteLspExpFcMap(LspExpFcMapName string) {
	key := LspExpFcMapName

	delete(t.LspExpFcMap, key)
}

// AppendLspExpFcMap appends the supplied NokiaConf_Configure_Qos_LspExpFcMap struct to the
// list LspExpFcMap of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_LspExpFcMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendLspExpFcMap(v *NokiaConf_Configure_Qos_LspExpFcMap) error {
	if v.LspExpFcMapName == nil {
		return fmt.Errorf("invalid nil key received for LspExpFcMapName")
	}

	key := *v.LspExpFcMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExpFcMap == nil {
		t.LspExpFcMap = make(map[string]*NokiaConf_Configure_Qos_LspExpFcMap)
	}

	if _, ok := t.LspExpFcMap[key]; ok {
		return fmt.Errorf("duplicate key for list LspExpFcMap %v", key)
	}

	t.LspExpFcMap[key] = v
	return nil
}

// NewMcFrProfileEgress creates a new entry in the McFrProfileEgress list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewMcFrProfileEgress(McFrEgressProfIndex uint32) (*NokiaConf_Configure_Qos_McFrProfileEgress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileEgress == nil {
		t.McFrProfileEgress = make(map[uint32]*NokiaConf_Configure_Qos_McFrProfileEgress)
	}

	key := McFrEgressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.McFrProfileEgress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list McFrProfileEgress", key)
	}

	t.McFrProfileEgress[key] = &NokiaConf_Configure_Qos_McFrProfileEgress{
		McFrEgressProfIndex: &McFrEgressProfIndex,
	}

	return t.McFrProfileEgress[key], nil
}

// RenameMcFrProfileEgress renames an entry in the list McFrProfileEgress within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameMcFrProfileEgress(oldK, newK uint32) error {
	if _, ok := t.McFrProfileEgress[newK]; ok {
		return fmt.Errorf("key %v already exists in McFrProfileEgress", newK)
	}

	e, ok := t.McFrProfileEgress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in McFrProfileEgress", oldK)
	}
	e.McFrEgressProfIndex = &newK

	t.McFrProfileEgress[newK] = e
	delete(t.McFrProfileEgress, oldK)
	return nil
}

// GetOrCreateMcFrProfileEgress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateMcFrProfileEgress(McFrEgressProfIndex uint32) *NokiaConf_Configure_Qos_McFrProfileEgress {

	key := McFrEgressProfIndex

	if v, ok := t.McFrProfileEgress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMcFrProfileEgress(McFrEgressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMcFrProfileEgress got unexpected error: %v", err))
	}
	return v
}

// GetMcFrProfileEgress retrieves the value with the specified key from
// the McFrProfileEgress map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetMcFrProfileEgress(McFrEgressProfIndex uint32) *NokiaConf_Configure_Qos_McFrProfileEgress {

	if t == nil {
		return nil
	}

	key := McFrEgressProfIndex

	if lm, ok := t.McFrProfileEgress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMcFrProfileEgress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteMcFrProfileEgress(McFrEgressProfIndex uint32) {
	key := McFrEgressProfIndex

	delete(t.McFrProfileEgress, key)
}

// AppendMcFrProfileEgress appends the supplied NokiaConf_Configure_Qos_McFrProfileEgress struct to the
// list McFrProfileEgress of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_McFrProfileEgress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendMcFrProfileEgress(v *NokiaConf_Configure_Qos_McFrProfileEgress) error {
	if v.McFrEgressProfIndex == nil {
		return fmt.Errorf("invalid nil key received for McFrEgressProfIndex")
	}

	key := *v.McFrEgressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileEgress == nil {
		t.McFrProfileEgress = make(map[uint32]*NokiaConf_Configure_Qos_McFrProfileEgress)
	}

	if _, ok := t.McFrProfileEgress[key]; ok {
		return fmt.Errorf("duplicate key for list McFrProfileEgress %v", key)
	}

	t.McFrProfileEgress[key] = v
	return nil
}

// NewMcFrProfileIngress creates a new entry in the McFrProfileIngress list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewMcFrProfileIngress(McFrIngressProfIndex uint32) (*NokiaConf_Configure_Qos_McFrProfileIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileIngress == nil {
		t.McFrProfileIngress = make(map[uint32]*NokiaConf_Configure_Qos_McFrProfileIngress)
	}

	key := McFrIngressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.McFrProfileIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list McFrProfileIngress", key)
	}

	t.McFrProfileIngress[key] = &NokiaConf_Configure_Qos_McFrProfileIngress{
		McFrIngressProfIndex: &McFrIngressProfIndex,
	}

	return t.McFrProfileIngress[key], nil
}

// RenameMcFrProfileIngress renames an entry in the list McFrProfileIngress within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameMcFrProfileIngress(oldK, newK uint32) error {
	if _, ok := t.McFrProfileIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in McFrProfileIngress", newK)
	}

	e, ok := t.McFrProfileIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in McFrProfileIngress", oldK)
	}
	e.McFrIngressProfIndex = &newK

	t.McFrProfileIngress[newK] = e
	delete(t.McFrProfileIngress, oldK)
	return nil
}

// GetOrCreateMcFrProfileIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateMcFrProfileIngress(McFrIngressProfIndex uint32) *NokiaConf_Configure_Qos_McFrProfileIngress {

	key := McFrIngressProfIndex

	if v, ok := t.McFrProfileIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMcFrProfileIngress(McFrIngressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMcFrProfileIngress got unexpected error: %v", err))
	}
	return v
}

// GetMcFrProfileIngress retrieves the value with the specified key from
// the McFrProfileIngress map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetMcFrProfileIngress(McFrIngressProfIndex uint32) *NokiaConf_Configure_Qos_McFrProfileIngress {

	if t == nil {
		return nil
	}

	key := McFrIngressProfIndex

	if lm, ok := t.McFrProfileIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMcFrProfileIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteMcFrProfileIngress(McFrIngressProfIndex uint32) {
	key := McFrIngressProfIndex

	delete(t.McFrProfileIngress, key)
}

// AppendMcFrProfileIngress appends the supplied NokiaConf_Configure_Qos_McFrProfileIngress struct to the
// list McFrProfileIngress of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_McFrProfileIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendMcFrProfileIngress(v *NokiaConf_Configure_Qos_McFrProfileIngress) error {
	if v.McFrIngressProfIndex == nil {
		return fmt.Errorf("invalid nil key received for McFrIngressProfIndex")
	}

	key := *v.McFrIngressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McFrProfileIngress == nil {
		t.McFrProfileIngress = make(map[uint32]*NokiaConf_Configure_Qos_McFrProfileIngress)
	}

	if _, ok := t.McFrProfileIngress[key]; ok {
		return fmt.Errorf("duplicate key for list McFrProfileIngress %v", key)
	}

	t.McFrProfileIngress[key] = v
	return nil
}

// NewMlpppProfileEgress creates a new entry in the MlpppProfileEgress list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewMlpppProfileEgress(McMlpppEgressProfIndex uint32) (*NokiaConf_Configure_Qos_MlpppProfileEgress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileEgress == nil {
		t.MlpppProfileEgress = make(map[uint32]*NokiaConf_Configure_Qos_MlpppProfileEgress)
	}

	key := McMlpppEgressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MlpppProfileEgress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MlpppProfileEgress", key)
	}

	t.MlpppProfileEgress[key] = &NokiaConf_Configure_Qos_MlpppProfileEgress{
		McMlpppEgressProfIndex: &McMlpppEgressProfIndex,
	}

	return t.MlpppProfileEgress[key], nil
}

// RenameMlpppProfileEgress renames an entry in the list MlpppProfileEgress within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameMlpppProfileEgress(oldK, newK uint32) error {
	if _, ok := t.MlpppProfileEgress[newK]; ok {
		return fmt.Errorf("key %v already exists in MlpppProfileEgress", newK)
	}

	e, ok := t.MlpppProfileEgress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MlpppProfileEgress", oldK)
	}
	e.McMlpppEgressProfIndex = &newK

	t.MlpppProfileEgress[newK] = e
	delete(t.MlpppProfileEgress, oldK)
	return nil
}

// GetOrCreateMlpppProfileEgress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateMlpppProfileEgress(McMlpppEgressProfIndex uint32) *NokiaConf_Configure_Qos_MlpppProfileEgress {

	key := McMlpppEgressProfIndex

	if v, ok := t.MlpppProfileEgress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMlpppProfileEgress(McMlpppEgressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMlpppProfileEgress got unexpected error: %v", err))
	}
	return v
}

// GetMlpppProfileEgress retrieves the value with the specified key from
// the MlpppProfileEgress map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetMlpppProfileEgress(McMlpppEgressProfIndex uint32) *NokiaConf_Configure_Qos_MlpppProfileEgress {

	if t == nil {
		return nil
	}

	key := McMlpppEgressProfIndex

	if lm, ok := t.MlpppProfileEgress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMlpppProfileEgress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteMlpppProfileEgress(McMlpppEgressProfIndex uint32) {
	key := McMlpppEgressProfIndex

	delete(t.MlpppProfileEgress, key)
}

// AppendMlpppProfileEgress appends the supplied NokiaConf_Configure_Qos_MlpppProfileEgress struct to the
// list MlpppProfileEgress of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MlpppProfileEgress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendMlpppProfileEgress(v *NokiaConf_Configure_Qos_MlpppProfileEgress) error {
	if v.McMlpppEgressProfIndex == nil {
		return fmt.Errorf("invalid nil key received for McMlpppEgressProfIndex")
	}

	key := *v.McMlpppEgressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileEgress == nil {
		t.MlpppProfileEgress = make(map[uint32]*NokiaConf_Configure_Qos_MlpppProfileEgress)
	}

	if _, ok := t.MlpppProfileEgress[key]; ok {
		return fmt.Errorf("duplicate key for list MlpppProfileEgress %v", key)
	}

	t.MlpppProfileEgress[key] = v
	return nil
}

// NewMlpppProfileIngress creates a new entry in the MlpppProfileIngress list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewMlpppProfileIngress(McMlpppIngressProfIndex uint32) (*NokiaConf_Configure_Qos_MlpppProfileIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileIngress == nil {
		t.MlpppProfileIngress = make(map[uint32]*NokiaConf_Configure_Qos_MlpppProfileIngress)
	}

	key := McMlpppIngressProfIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MlpppProfileIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MlpppProfileIngress", key)
	}

	t.MlpppProfileIngress[key] = &NokiaConf_Configure_Qos_MlpppProfileIngress{
		McMlpppIngressProfIndex: &McMlpppIngressProfIndex,
	}

	return t.MlpppProfileIngress[key], nil
}

// RenameMlpppProfileIngress renames an entry in the list MlpppProfileIngress within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameMlpppProfileIngress(oldK, newK uint32) error {
	if _, ok := t.MlpppProfileIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in MlpppProfileIngress", newK)
	}

	e, ok := t.MlpppProfileIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MlpppProfileIngress", oldK)
	}
	e.McMlpppIngressProfIndex = &newK

	t.MlpppProfileIngress[newK] = e
	delete(t.MlpppProfileIngress, oldK)
	return nil
}

// GetOrCreateMlpppProfileIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateMlpppProfileIngress(McMlpppIngressProfIndex uint32) *NokiaConf_Configure_Qos_MlpppProfileIngress {

	key := McMlpppIngressProfIndex

	if v, ok := t.MlpppProfileIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMlpppProfileIngress(McMlpppIngressProfIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMlpppProfileIngress got unexpected error: %v", err))
	}
	return v
}

// GetMlpppProfileIngress retrieves the value with the specified key from
// the MlpppProfileIngress map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetMlpppProfileIngress(McMlpppIngressProfIndex uint32) *NokiaConf_Configure_Qos_MlpppProfileIngress {

	if t == nil {
		return nil
	}

	key := McMlpppIngressProfIndex

	if lm, ok := t.MlpppProfileIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMlpppProfileIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteMlpppProfileIngress(McMlpppIngressProfIndex uint32) {
	key := McMlpppIngressProfIndex

	delete(t.MlpppProfileIngress, key)
}

// AppendMlpppProfileIngress appends the supplied NokiaConf_Configure_Qos_MlpppProfileIngress struct to the
// list MlpppProfileIngress of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MlpppProfileIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendMlpppProfileIngress(v *NokiaConf_Configure_Qos_MlpppProfileIngress) error {
	if v.McMlpppIngressProfIndex == nil {
		return fmt.Errorf("invalid nil key received for McMlpppIngressProfIndex")
	}

	key := *v.McMlpppIngressProfIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MlpppProfileIngress == nil {
		t.MlpppProfileIngress = make(map[uint32]*NokiaConf_Configure_Qos_MlpppProfileIngress)
	}

	if _, ok := t.MlpppProfileIngress[key]; ok {
		return fmt.Errorf("duplicate key for list MlpppProfileIngress %v", key)
	}

	t.MlpppProfileIngress[key] = v
	return nil
}

// NewNetwork creates a new entry in the Network list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewNetwork(NetworkPolicyName string) (*NokiaConf_Configure_Qos_Network, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Network == nil {
		t.Network = make(map[string]*NokiaConf_Configure_Qos_Network)
	}

	key := NetworkPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Network[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Network", key)
	}

	t.Network[key] = &NokiaConf_Configure_Qos_Network{
		NetworkPolicyName: &NetworkPolicyName,
	}

	return t.Network[key], nil
}

// RenameNetwork renames an entry in the list Network within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameNetwork(oldK, newK string) error {
	if _, ok := t.Network[newK]; ok {
		return fmt.Errorf("key %v already exists in Network", newK)
	}

	e, ok := t.Network[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Network", oldK)
	}
	e.NetworkPolicyName = &newK

	t.Network[newK] = e
	delete(t.Network, oldK)
	return nil
}

// GetOrCreateNetwork retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateNetwork(NetworkPolicyName string) *NokiaConf_Configure_Qos_Network {

	key := NetworkPolicyName

	if v, ok := t.Network[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetwork(NetworkPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetwork got unexpected error: %v", err))
	}
	return v
}

// GetNetwork retrieves the value with the specified key from
// the Network map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetNetwork(NetworkPolicyName string) *NokiaConf_Configure_Qos_Network {

	if t == nil {
		return nil
	}

	key := NetworkPolicyName

	if lm, ok := t.Network[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetwork deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteNetwork(NetworkPolicyName string) {
	key := NetworkPolicyName

	delete(t.Network, key)
}

// AppendNetwork appends the supplied NokiaConf_Configure_Qos_Network struct to the
// list Network of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendNetwork(v *NokiaConf_Configure_Qos_Network) error {
	if v.NetworkPolicyName == nil {
		return fmt.Errorf("invalid nil key received for NetworkPolicyName")
	}

	key := *v.NetworkPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Network == nil {
		t.Network = make(map[string]*NokiaConf_Configure_Qos_Network)
	}

	if _, ok := t.Network[key]; ok {
		return fmt.Errorf("duplicate key for list Network %v", key)
	}

	t.Network[key] = v
	return nil
}

// NewNetworkIngress creates a new entry in the NetworkIngress list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewNetworkIngress(NetworkIngressPolicyName string) (*NokiaConf_Configure_Qos_NetworkIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkIngress == nil {
		t.NetworkIngress = make(map[string]*NokiaConf_Configure_Qos_NetworkIngress)
	}

	key := NetworkIngressPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkIngress", key)
	}

	t.NetworkIngress[key] = &NokiaConf_Configure_Qos_NetworkIngress{
		NetworkIngressPolicyName: &NetworkIngressPolicyName,
	}

	return t.NetworkIngress[key], nil
}

// RenameNetworkIngress renames an entry in the list NetworkIngress within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameNetworkIngress(oldK, newK string) error {
	if _, ok := t.NetworkIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkIngress", newK)
	}

	e, ok := t.NetworkIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkIngress", oldK)
	}
	e.NetworkIngressPolicyName = &newK

	t.NetworkIngress[newK] = e
	delete(t.NetworkIngress, oldK)
	return nil
}

// GetOrCreateNetworkIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateNetworkIngress(NetworkIngressPolicyName string) *NokiaConf_Configure_Qos_NetworkIngress {

	key := NetworkIngressPolicyName

	if v, ok := t.NetworkIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkIngress(NetworkIngressPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkIngress got unexpected error: %v", err))
	}
	return v
}

// GetNetworkIngress retrieves the value with the specified key from
// the NetworkIngress map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetNetworkIngress(NetworkIngressPolicyName string) *NokiaConf_Configure_Qos_NetworkIngress {

	if t == nil {
		return nil
	}

	key := NetworkIngressPolicyName

	if lm, ok := t.NetworkIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteNetworkIngress(NetworkIngressPolicyName string) {
	key := NetworkIngressPolicyName

	delete(t.NetworkIngress, key)
}

// AppendNetworkIngress appends the supplied NokiaConf_Configure_Qos_NetworkIngress struct to the
// list NetworkIngress of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendNetworkIngress(v *NokiaConf_Configure_Qos_NetworkIngress) error {
	if v.NetworkIngressPolicyName == nil {
		return fmt.Errorf("invalid nil key received for NetworkIngressPolicyName")
	}

	key := *v.NetworkIngressPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkIngress == nil {
		t.NetworkIngress = make(map[string]*NokiaConf_Configure_Qos_NetworkIngress)
	}

	if _, ok := t.NetworkIngress[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkIngress %v", key)
	}

	t.NetworkIngress[key] = v
	return nil
}

// NewNetworkQueue creates a new entry in the NetworkQueue list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewNetworkQueue(NetworkQueuePolicy string) (*NokiaConf_Configure_Qos_NetworkQueue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkQueue == nil {
		t.NetworkQueue = make(map[string]*NokiaConf_Configure_Qos_NetworkQueue)
	}

	key := NetworkQueuePolicy

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkQueue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkQueue", key)
	}

	t.NetworkQueue[key] = &NokiaConf_Configure_Qos_NetworkQueue{
		NetworkQueuePolicy: &NetworkQueuePolicy,
	}

	return t.NetworkQueue[key], nil
}

// RenameNetworkQueue renames an entry in the list NetworkQueue within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameNetworkQueue(oldK, newK string) error {
	if _, ok := t.NetworkQueue[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkQueue", newK)
	}

	e, ok := t.NetworkQueue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkQueue", oldK)
	}
	e.NetworkQueuePolicy = &newK

	t.NetworkQueue[newK] = e
	delete(t.NetworkQueue, oldK)
	return nil
}

// GetOrCreateNetworkQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateNetworkQueue(NetworkQueuePolicy string) *NokiaConf_Configure_Qos_NetworkQueue {

	key := NetworkQueuePolicy

	if v, ok := t.NetworkQueue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkQueue(NetworkQueuePolicy)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkQueue got unexpected error: %v", err))
	}
	return v
}

// GetNetworkQueue retrieves the value with the specified key from
// the NetworkQueue map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetNetworkQueue(NetworkQueuePolicy string) *NokiaConf_Configure_Qos_NetworkQueue {

	if t == nil {
		return nil
	}

	key := NetworkQueuePolicy

	if lm, ok := t.NetworkQueue[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteNetworkQueue(NetworkQueuePolicy string) {
	key := NetworkQueuePolicy

	delete(t.NetworkQueue, key)
}

// AppendNetworkQueue appends the supplied NokiaConf_Configure_Qos_NetworkQueue struct to the
// list NetworkQueue of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkQueue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendNetworkQueue(v *NokiaConf_Configure_Qos_NetworkQueue) error {
	if v.NetworkQueuePolicy == nil {
		return fmt.Errorf("invalid nil key received for NetworkQueuePolicy")
	}

	key := *v.NetworkQueuePolicy

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkQueue == nil {
		t.NetworkQueue = make(map[string]*NokiaConf_Configure_Qos_NetworkQueue)
	}

	if _, ok := t.NetworkQueue[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkQueue %v", key)
	}

	t.NetworkQueue[key] = v
	return nil
}

// NewPolicerControlPolicy creates a new entry in the PolicerControlPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewPolicerControlPolicy(PolicerControlPolicyName string) (*NokiaConf_Configure_Qos_PolicerControlPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerControlPolicy == nil {
		t.PolicerControlPolicy = make(map[string]*NokiaConf_Configure_Qos_PolicerControlPolicy)
	}

	key := PolicerControlPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicerControlPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicerControlPolicy", key)
	}

	t.PolicerControlPolicy[key] = &NokiaConf_Configure_Qos_PolicerControlPolicy{
		PolicerControlPolicyName: &PolicerControlPolicyName,
	}

	return t.PolicerControlPolicy[key], nil
}

// RenamePolicerControlPolicy renames an entry in the list PolicerControlPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenamePolicerControlPolicy(oldK, newK string) error {
	if _, ok := t.PolicerControlPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicerControlPolicy", newK)
	}

	e, ok := t.PolicerControlPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicerControlPolicy", oldK)
	}
	e.PolicerControlPolicyName = &newK

	t.PolicerControlPolicy[newK] = e
	delete(t.PolicerControlPolicy, oldK)
	return nil
}

// GetOrCreatePolicerControlPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreatePolicerControlPolicy(PolicerControlPolicyName string) *NokiaConf_Configure_Qos_PolicerControlPolicy {

	key := PolicerControlPolicyName

	if v, ok := t.PolicerControlPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicerControlPolicy(PolicerControlPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicerControlPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicerControlPolicy retrieves the value with the specified key from
// the PolicerControlPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetPolicerControlPolicy(PolicerControlPolicyName string) *NokiaConf_Configure_Qos_PolicerControlPolicy {

	if t == nil {
		return nil
	}

	key := PolicerControlPolicyName

	if lm, ok := t.PolicerControlPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicerControlPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeletePolicerControlPolicy(PolicerControlPolicyName string) {
	key := PolicerControlPolicyName

	delete(t.PolicerControlPolicy, key)
}

// AppendPolicerControlPolicy appends the supplied NokiaConf_Configure_Qos_PolicerControlPolicy struct to the
// list PolicerControlPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PolicerControlPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendPolicerControlPolicy(v *NokiaConf_Configure_Qos_PolicerControlPolicy) error {
	if v.PolicerControlPolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicerControlPolicyName")
	}

	key := *v.PolicerControlPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerControlPolicy == nil {
		t.PolicerControlPolicy = make(map[string]*NokiaConf_Configure_Qos_PolicerControlPolicy)
	}

	if _, ok := t.PolicerControlPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PolicerControlPolicy %v", key)
	}

	t.PolicerControlPolicy[key] = v
	return nil
}

// NewPortQosPolicy creates a new entry in the PortQosPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewPortQosPolicy(PortQosPolicyName string) (*NokiaConf_Configure_Qos_PortQosPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortQosPolicy == nil {
		t.PortQosPolicy = make(map[string]*NokiaConf_Configure_Qos_PortQosPolicy)
	}

	key := PortQosPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortQosPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortQosPolicy", key)
	}

	t.PortQosPolicy[key] = &NokiaConf_Configure_Qos_PortQosPolicy{
		PortQosPolicyName: &PortQosPolicyName,
	}

	return t.PortQosPolicy[key], nil
}

// RenamePortQosPolicy renames an entry in the list PortQosPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenamePortQosPolicy(oldK, newK string) error {
	if _, ok := t.PortQosPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PortQosPolicy", newK)
	}

	e, ok := t.PortQosPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortQosPolicy", oldK)
	}
	e.PortQosPolicyName = &newK

	t.PortQosPolicy[newK] = e
	delete(t.PortQosPolicy, oldK)
	return nil
}

// GetOrCreatePortQosPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreatePortQosPolicy(PortQosPolicyName string) *NokiaConf_Configure_Qos_PortQosPolicy {

	key := PortQosPolicyName

	if v, ok := t.PortQosPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortQosPolicy(PortQosPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortQosPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPortQosPolicy retrieves the value with the specified key from
// the PortQosPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetPortQosPolicy(PortQosPolicyName string) *NokiaConf_Configure_Qos_PortQosPolicy {

	if t == nil {
		return nil
	}

	key := PortQosPolicyName

	if lm, ok := t.PortQosPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePortQosPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeletePortQosPolicy(PortQosPolicyName string) {
	key := PortQosPolicyName

	delete(t.PortQosPolicy, key)
}

// AppendPortQosPolicy appends the supplied NokiaConf_Configure_Qos_PortQosPolicy struct to the
// list PortQosPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PortQosPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendPortQosPolicy(v *NokiaConf_Configure_Qos_PortQosPolicy) error {
	if v.PortQosPolicyName == nil {
		return fmt.Errorf("invalid nil key received for PortQosPolicyName")
	}

	key := *v.PortQosPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortQosPolicy == nil {
		t.PortQosPolicy = make(map[string]*NokiaConf_Configure_Qos_PortQosPolicy)
	}

	if _, ok := t.PortQosPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PortQosPolicy %v", key)
	}

	t.PortQosPolicy[key] = v
	return nil
}

// NewPortSchedulerPolicy creates a new entry in the PortSchedulerPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewPortSchedulerPolicy(Name string) (*NokiaConf_Configure_Qos_PortSchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSchedulerPolicy == nil {
		t.PortSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_PortSchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortSchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortSchedulerPolicy", key)
	}

	t.PortSchedulerPolicy[key] = &NokiaConf_Configure_Qos_PortSchedulerPolicy{
		Name: &Name,
	}

	return t.PortSchedulerPolicy[key], nil
}

// RenamePortSchedulerPolicy renames an entry in the list PortSchedulerPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenamePortSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.PortSchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PortSchedulerPolicy", newK)
	}

	e, ok := t.PortSchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortSchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.PortSchedulerPolicy[newK] = e
	delete(t.PortSchedulerPolicy, oldK)
	return nil
}

// GetOrCreatePortSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreatePortSchedulerPolicy(Name string) *NokiaConf_Configure_Qos_PortSchedulerPolicy {

	key := Name

	if v, ok := t.PortSchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPortSchedulerPolicy retrieves the value with the specified key from
// the PortSchedulerPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetPortSchedulerPolicy(Name string) *NokiaConf_Configure_Qos_PortSchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PortSchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePortSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeletePortSchedulerPolicy(Name string) {
	key := Name

	delete(t.PortSchedulerPolicy, key)
}

// AppendPortSchedulerPolicy appends the supplied NokiaConf_Configure_Qos_PortSchedulerPolicy struct to the
// list PortSchedulerPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PortSchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendPortSchedulerPolicy(v *NokiaConf_Configure_Qos_PortSchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSchedulerPolicy == nil {
		t.PortSchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_PortSchedulerPolicy)
	}

	if _, ok := t.PortSchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PortSchedulerPolicy %v", key)
	}

	t.PortSchedulerPolicy[key] = v
	return nil
}

// NewPostPolicerMapping creates a new entry in the PostPolicerMapping list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewPostPolicerMapping(Name string) (*NokiaConf_Configure_Qos_PostPolicerMapping, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PostPolicerMapping == nil {
		t.PostPolicerMapping = make(map[string]*NokiaConf_Configure_Qos_PostPolicerMapping)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PostPolicerMapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PostPolicerMapping", key)
	}

	t.PostPolicerMapping[key] = &NokiaConf_Configure_Qos_PostPolicerMapping{
		Name: &Name,
	}

	return t.PostPolicerMapping[key], nil
}

// RenamePostPolicerMapping renames an entry in the list PostPolicerMapping within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenamePostPolicerMapping(oldK, newK string) error {
	if _, ok := t.PostPolicerMapping[newK]; ok {
		return fmt.Errorf("key %v already exists in PostPolicerMapping", newK)
	}

	e, ok := t.PostPolicerMapping[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PostPolicerMapping", oldK)
	}
	e.Name = &newK

	t.PostPolicerMapping[newK] = e
	delete(t.PostPolicerMapping, oldK)
	return nil
}

// GetOrCreatePostPolicerMapping retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreatePostPolicerMapping(Name string) *NokiaConf_Configure_Qos_PostPolicerMapping {

	key := Name

	if v, ok := t.PostPolicerMapping[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPostPolicerMapping(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePostPolicerMapping got unexpected error: %v", err))
	}
	return v
}

// GetPostPolicerMapping retrieves the value with the specified key from
// the PostPolicerMapping map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetPostPolicerMapping(Name string) *NokiaConf_Configure_Qos_PostPolicerMapping {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PostPolicerMapping[key]; ok {
		return lm
	}
	return nil
}

// DeletePostPolicerMapping deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeletePostPolicerMapping(Name string) {
	key := Name

	delete(t.PostPolicerMapping, key)
}

// AppendPostPolicerMapping appends the supplied NokiaConf_Configure_Qos_PostPolicerMapping struct to the
// list PostPolicerMapping of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PostPolicerMapping already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendPostPolicerMapping(v *NokiaConf_Configure_Qos_PostPolicerMapping) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PostPolicerMapping == nil {
		t.PostPolicerMapping = make(map[string]*NokiaConf_Configure_Qos_PostPolicerMapping)
	}

	if _, ok := t.PostPolicerMapping[key]; ok {
		return fmt.Errorf("duplicate key for list PostPolicerMapping %v", key)
	}

	t.PostPolicerMapping[key] = v
	return nil
}

// NewQueueGroupRedirectList creates a new entry in the QueueGroupRedirectList list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewQueueGroupRedirectList(Name string) (*NokiaConf_Configure_Qos_QueueGroupRedirectList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroupRedirectList == nil {
		t.QueueGroupRedirectList = make(map[string]*NokiaConf_Configure_Qos_QueueGroupRedirectList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroupRedirectList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroupRedirectList", key)
	}

	t.QueueGroupRedirectList[key] = &NokiaConf_Configure_Qos_QueueGroupRedirectList{
		Name: &Name,
	}

	return t.QueueGroupRedirectList[key], nil
}

// RenameQueueGroupRedirectList renames an entry in the list QueueGroupRedirectList within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameQueueGroupRedirectList(oldK, newK string) error {
	if _, ok := t.QueueGroupRedirectList[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroupRedirectList", newK)
	}

	e, ok := t.QueueGroupRedirectList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroupRedirectList", oldK)
	}
	e.Name = &newK

	t.QueueGroupRedirectList[newK] = e
	delete(t.QueueGroupRedirectList, oldK)
	return nil
}

// GetOrCreateQueueGroupRedirectList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateQueueGroupRedirectList(Name string) *NokiaConf_Configure_Qos_QueueGroupRedirectList {

	key := Name

	if v, ok := t.QueueGroupRedirectList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroupRedirectList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroupRedirectList got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroupRedirectList retrieves the value with the specified key from
// the QueueGroupRedirectList map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetQueueGroupRedirectList(Name string) *NokiaConf_Configure_Qos_QueueGroupRedirectList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.QueueGroupRedirectList[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroupRedirectList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteQueueGroupRedirectList(Name string) {
	key := Name

	delete(t.QueueGroupRedirectList, key)
}

// AppendQueueGroupRedirectList appends the supplied NokiaConf_Configure_Qos_QueueGroupRedirectList struct to the
// list QueueGroupRedirectList of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupRedirectList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendQueueGroupRedirectList(v *NokiaConf_Configure_Qos_QueueGroupRedirectList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroupRedirectList == nil {
		t.QueueGroupRedirectList = make(map[string]*NokiaConf_Configure_Qos_QueueGroupRedirectList)
	}

	if _, ok := t.QueueGroupRedirectList[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroupRedirectList %v", key)
	}

	t.QueueGroupRedirectList[key] = v
	return nil
}

// NewQueueMgmtPolicy creates a new entry in the QueueMgmtPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewQueueMgmtPolicy(QueueMgmtPolicyName string) (*NokiaConf_Configure_Qos_QueueMgmtPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueMgmtPolicy == nil {
		t.QueueMgmtPolicy = make(map[string]*NokiaConf_Configure_Qos_QueueMgmtPolicy)
	}

	key := QueueMgmtPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueMgmtPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueMgmtPolicy", key)
	}

	t.QueueMgmtPolicy[key] = &NokiaConf_Configure_Qos_QueueMgmtPolicy{
		QueueMgmtPolicyName: &QueueMgmtPolicyName,
	}

	return t.QueueMgmtPolicy[key], nil
}

// RenameQueueMgmtPolicy renames an entry in the list QueueMgmtPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameQueueMgmtPolicy(oldK, newK string) error {
	if _, ok := t.QueueMgmtPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueMgmtPolicy", newK)
	}

	e, ok := t.QueueMgmtPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueMgmtPolicy", oldK)
	}
	e.QueueMgmtPolicyName = &newK

	t.QueueMgmtPolicy[newK] = e
	delete(t.QueueMgmtPolicy, oldK)
	return nil
}

// GetOrCreateQueueMgmtPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateQueueMgmtPolicy(QueueMgmtPolicyName string) *NokiaConf_Configure_Qos_QueueMgmtPolicy {

	key := QueueMgmtPolicyName

	if v, ok := t.QueueMgmtPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueMgmtPolicy(QueueMgmtPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueMgmtPolicy got unexpected error: %v", err))
	}
	return v
}

// GetQueueMgmtPolicy retrieves the value with the specified key from
// the QueueMgmtPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetQueueMgmtPolicy(QueueMgmtPolicyName string) *NokiaConf_Configure_Qos_QueueMgmtPolicy {

	if t == nil {
		return nil
	}

	key := QueueMgmtPolicyName

	if lm, ok := t.QueueMgmtPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueMgmtPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteQueueMgmtPolicy(QueueMgmtPolicyName string) {
	key := QueueMgmtPolicyName

	delete(t.QueueMgmtPolicy, key)
}

// AppendQueueMgmtPolicy appends the supplied NokiaConf_Configure_Qos_QueueMgmtPolicy struct to the
// list QueueMgmtPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueMgmtPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendQueueMgmtPolicy(v *NokiaConf_Configure_Qos_QueueMgmtPolicy) error {
	if v.QueueMgmtPolicyName == nil {
		return fmt.Errorf("invalid nil key received for QueueMgmtPolicyName")
	}

	key := *v.QueueMgmtPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueMgmtPolicy == nil {
		t.QueueMgmtPolicy = make(map[string]*NokiaConf_Configure_Qos_QueueMgmtPolicy)
	}

	if _, ok := t.QueueMgmtPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list QueueMgmtPolicy %v", key)
	}

	t.QueueMgmtPolicy[key] = v
	return nil
}

// NewSapEgress creates a new entry in the SapEgress list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewSapEgress(SapEgressPolicyName string) (*NokiaConf_Configure_Qos_SapEgress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapEgress == nil {
		t.SapEgress = make(map[string]*NokiaConf_Configure_Qos_SapEgress)
	}

	key := SapEgressPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SapEgress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SapEgress", key)
	}

	t.SapEgress[key] = &NokiaConf_Configure_Qos_SapEgress{
		SapEgressPolicyName: &SapEgressPolicyName,
	}

	return t.SapEgress[key], nil
}

// RenameSapEgress renames an entry in the list SapEgress within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameSapEgress(oldK, newK string) error {
	if _, ok := t.SapEgress[newK]; ok {
		return fmt.Errorf("key %v already exists in SapEgress", newK)
	}

	e, ok := t.SapEgress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SapEgress", oldK)
	}
	e.SapEgressPolicyName = &newK

	t.SapEgress[newK] = e
	delete(t.SapEgress, oldK)
	return nil
}

// GetOrCreateSapEgress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateSapEgress(SapEgressPolicyName string) *NokiaConf_Configure_Qos_SapEgress {

	key := SapEgressPolicyName

	if v, ok := t.SapEgress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSapEgress(SapEgressPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSapEgress got unexpected error: %v", err))
	}
	return v
}

// GetSapEgress retrieves the value with the specified key from
// the SapEgress map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetSapEgress(SapEgressPolicyName string) *NokiaConf_Configure_Qos_SapEgress {

	if t == nil {
		return nil
	}

	key := SapEgressPolicyName

	if lm, ok := t.SapEgress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSapEgress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteSapEgress(SapEgressPolicyName string) {
	key := SapEgressPolicyName

	delete(t.SapEgress, key)
}

// AppendSapEgress appends the supplied NokiaConf_Configure_Qos_SapEgress struct to the
// list SapEgress of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendSapEgress(v *NokiaConf_Configure_Qos_SapEgress) error {
	if v.SapEgressPolicyName == nil {
		return fmt.Errorf("invalid nil key received for SapEgressPolicyName")
	}

	key := *v.SapEgressPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapEgress == nil {
		t.SapEgress = make(map[string]*NokiaConf_Configure_Qos_SapEgress)
	}

	if _, ok := t.SapEgress[key]; ok {
		return fmt.Errorf("duplicate key for list SapEgress %v", key)
	}

	t.SapEgress[key] = v
	return nil
}

// NewSapIngress creates a new entry in the SapIngress list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewSapIngress(SapIngressPolicyName string) (*NokiaConf_Configure_Qos_SapIngress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapIngress == nil {
		t.SapIngress = make(map[string]*NokiaConf_Configure_Qos_SapIngress)
	}

	key := SapIngressPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SapIngress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SapIngress", key)
	}

	t.SapIngress[key] = &NokiaConf_Configure_Qos_SapIngress{
		SapIngressPolicyName: &SapIngressPolicyName,
	}

	return t.SapIngress[key], nil
}

// RenameSapIngress renames an entry in the list SapIngress within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameSapIngress(oldK, newK string) error {
	if _, ok := t.SapIngress[newK]; ok {
		return fmt.Errorf("key %v already exists in SapIngress", newK)
	}

	e, ok := t.SapIngress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SapIngress", oldK)
	}
	e.SapIngressPolicyName = &newK

	t.SapIngress[newK] = e
	delete(t.SapIngress, oldK)
	return nil
}

// GetOrCreateSapIngress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateSapIngress(SapIngressPolicyName string) *NokiaConf_Configure_Qos_SapIngress {

	key := SapIngressPolicyName

	if v, ok := t.SapIngress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSapIngress(SapIngressPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSapIngress got unexpected error: %v", err))
	}
	return v
}

// GetSapIngress retrieves the value with the specified key from
// the SapIngress map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetSapIngress(SapIngressPolicyName string) *NokiaConf_Configure_Qos_SapIngress {

	if t == nil {
		return nil
	}

	key := SapIngressPolicyName

	if lm, ok := t.SapIngress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSapIngress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteSapIngress(SapIngressPolicyName string) {
	key := SapIngressPolicyName

	delete(t.SapIngress, key)
}

// AppendSapIngress appends the supplied NokiaConf_Configure_Qos_SapIngress struct to the
// list SapIngress of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendSapIngress(v *NokiaConf_Configure_Qos_SapIngress) error {
	if v.SapIngressPolicyName == nil {
		return fmt.Errorf("invalid nil key received for SapIngressPolicyName")
	}

	key := *v.SapIngressPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SapIngress == nil {
		t.SapIngress = make(map[string]*NokiaConf_Configure_Qos_SapIngress)
	}

	if _, ok := t.SapIngress[key]; ok {
		return fmt.Errorf("duplicate key for list SapIngress %v", key)
	}

	t.SapIngress[key] = v
	return nil
}

// NewSchedulerPolicy creates a new entry in the SchedulerPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewSchedulerPolicy(SchedulerPolicyName string) (*NokiaConf_Configure_Qos_SchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_SchedulerPolicy)
	}

	key := SchedulerPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulerPolicy", key)
	}

	t.SchedulerPolicy[key] = &NokiaConf_Configure_Qos_SchedulerPolicy{
		SchedulerPolicyName: &SchedulerPolicyName,
	}

	return t.SchedulerPolicy[key], nil
}

// RenameSchedulerPolicy renames an entry in the list SchedulerPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.SchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulerPolicy", newK)
	}

	e, ok := t.SchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulerPolicy", oldK)
	}
	e.SchedulerPolicyName = &newK

	t.SchedulerPolicy[newK] = e
	delete(t.SchedulerPolicy, oldK)
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateSchedulerPolicy(SchedulerPolicyName string) *NokiaConf_Configure_Qos_SchedulerPolicy {

	key := SchedulerPolicyName

	if v, ok := t.SchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulerPolicy(SchedulerPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSchedulerPolicy retrieves the value with the specified key from
// the SchedulerPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetSchedulerPolicy(SchedulerPolicyName string) *NokiaConf_Configure_Qos_SchedulerPolicy {

	if t == nil {
		return nil
	}

	key := SchedulerPolicyName

	if lm, ok := t.SchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteSchedulerPolicy(SchedulerPolicyName string) {
	key := SchedulerPolicyName

	delete(t.SchedulerPolicy, key)
}

// AppendSchedulerPolicy appends the supplied NokiaConf_Configure_Qos_SchedulerPolicy struct to the
// list SchedulerPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SchedulerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendSchedulerPolicy(v *NokiaConf_Configure_Qos_SchedulerPolicy) error {
	if v.SchedulerPolicyName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerPolicyName")
	}

	key := *v.SchedulerPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*NokiaConf_Configure_Qos_SchedulerPolicy)
	}

	if _, ok := t.SchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulerPolicy %v", key)
	}

	t.SchedulerPolicy[key] = v
	return nil
}

// NewSharedQueue creates a new entry in the SharedQueue list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewSharedQueue(SharedQueuePolicyName string) (*NokiaConf_Configure_Qos_SharedQueue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SharedQueue == nil {
		t.SharedQueue = make(map[string]*NokiaConf_Configure_Qos_SharedQueue)
	}

	key := SharedQueuePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SharedQueue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SharedQueue", key)
	}

	t.SharedQueue[key] = &NokiaConf_Configure_Qos_SharedQueue{
		SharedQueuePolicyName: &SharedQueuePolicyName,
	}

	return t.SharedQueue[key], nil
}

// RenameSharedQueue renames an entry in the list SharedQueue within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameSharedQueue(oldK, newK string) error {
	if _, ok := t.SharedQueue[newK]; ok {
		return fmt.Errorf("key %v already exists in SharedQueue", newK)
	}

	e, ok := t.SharedQueue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SharedQueue", oldK)
	}
	e.SharedQueuePolicyName = &newK

	t.SharedQueue[newK] = e
	delete(t.SharedQueue, oldK)
	return nil
}

// GetOrCreateSharedQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateSharedQueue(SharedQueuePolicyName string) *NokiaConf_Configure_Qos_SharedQueue {

	key := SharedQueuePolicyName

	if v, ok := t.SharedQueue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSharedQueue(SharedQueuePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSharedQueue got unexpected error: %v", err))
	}
	return v
}

// GetSharedQueue retrieves the value with the specified key from
// the SharedQueue map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetSharedQueue(SharedQueuePolicyName string) *NokiaConf_Configure_Qos_SharedQueue {

	if t == nil {
		return nil
	}

	key := SharedQueuePolicyName

	if lm, ok := t.SharedQueue[key]; ok {
		return lm
	}
	return nil
}

// DeleteSharedQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteSharedQueue(SharedQueuePolicyName string) {
	key := SharedQueuePolicyName

	delete(t.SharedQueue, key)
}

// AppendSharedQueue appends the supplied NokiaConf_Configure_Qos_SharedQueue struct to the
// list SharedQueue of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SharedQueue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendSharedQueue(v *NokiaConf_Configure_Qos_SharedQueue) error {
	if v.SharedQueuePolicyName == nil {
		return fmt.Errorf("invalid nil key received for SharedQueuePolicyName")
	}

	key := *v.SharedQueuePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SharedQueue == nil {
		t.SharedQueue = make(map[string]*NokiaConf_Configure_Qos_SharedQueue)
	}

	if _, ok := t.SharedQueue[key]; ok {
		return fmt.Errorf("duplicate key for list SharedQueue %v", key)
	}

	t.SharedQueue[key] = v
	return nil
}

// NewSlopePolicy creates a new entry in the SlopePolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewSlopePolicy(SlopePolicyName string) (*NokiaConf_Configure_Qos_SlopePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlopePolicy == nil {
		t.SlopePolicy = make(map[string]*NokiaConf_Configure_Qos_SlopePolicy)
	}

	key := SlopePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SlopePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SlopePolicy", key)
	}

	t.SlopePolicy[key] = &NokiaConf_Configure_Qos_SlopePolicy{
		SlopePolicyName: &SlopePolicyName,
	}

	return t.SlopePolicy[key], nil
}

// RenameSlopePolicy renames an entry in the list SlopePolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameSlopePolicy(oldK, newK string) error {
	if _, ok := t.SlopePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SlopePolicy", newK)
	}

	e, ok := t.SlopePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SlopePolicy", oldK)
	}
	e.SlopePolicyName = &newK

	t.SlopePolicy[newK] = e
	delete(t.SlopePolicy, oldK)
	return nil
}

// GetOrCreateSlopePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateSlopePolicy(SlopePolicyName string) *NokiaConf_Configure_Qos_SlopePolicy {

	key := SlopePolicyName

	if v, ok := t.SlopePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSlopePolicy(SlopePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSlopePolicy got unexpected error: %v", err))
	}
	return v
}

// GetSlopePolicy retrieves the value with the specified key from
// the SlopePolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetSlopePolicy(SlopePolicyName string) *NokiaConf_Configure_Qos_SlopePolicy {

	if t == nil {
		return nil
	}

	key := SlopePolicyName

	if lm, ok := t.SlopePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSlopePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteSlopePolicy(SlopePolicyName string) {
	key := SlopePolicyName

	delete(t.SlopePolicy, key)
}

// AppendSlopePolicy appends the supplied NokiaConf_Configure_Qos_SlopePolicy struct to the
// list SlopePolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SlopePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendSlopePolicy(v *NokiaConf_Configure_Qos_SlopePolicy) error {
	if v.SlopePolicyName == nil {
		return fmt.Errorf("invalid nil key received for SlopePolicyName")
	}

	key := *v.SlopePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlopePolicy == nil {
		t.SlopePolicy = make(map[string]*NokiaConf_Configure_Qos_SlopePolicy)
	}

	if _, ok := t.SlopePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SlopePolicy %v", key)
	}

	t.SlopePolicy[key] = v
	return nil
}

// NewVlanQosPolicy creates a new entry in the VlanQosPolicy list of the
// NokiaConf_Configure_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos) NewVlanQosPolicy(VlanQosPolicyName string) (*NokiaConf_Configure_Qos_VlanQosPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanQosPolicy == nil {
		t.VlanQosPolicy = make(map[string]*NokiaConf_Configure_Qos_VlanQosPolicy)
	}

	key := VlanQosPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanQosPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanQosPolicy", key)
	}

	t.VlanQosPolicy[key] = &NokiaConf_Configure_Qos_VlanQosPolicy{
		VlanQosPolicyName: &VlanQosPolicyName,
	}

	return t.VlanQosPolicy[key], nil
}

// RenameVlanQosPolicy renames an entry in the list VlanQosPolicy within
// the NokiaConf_Configure_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos) RenameVlanQosPolicy(oldK, newK string) error {
	if _, ok := t.VlanQosPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanQosPolicy", newK)
	}

	e, ok := t.VlanQosPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanQosPolicy", oldK)
	}
	e.VlanQosPolicyName = &newK

	t.VlanQosPolicy[newK] = e
	delete(t.VlanQosPolicy, oldK)
	return nil
}

// GetOrCreateVlanQosPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos) GetOrCreateVlanQosPolicy(VlanQosPolicyName string) *NokiaConf_Configure_Qos_VlanQosPolicy {

	key := VlanQosPolicyName

	if v, ok := t.VlanQosPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanQosPolicy(VlanQosPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanQosPolicy got unexpected error: %v", err))
	}
	return v
}

// GetVlanQosPolicy retrieves the value with the specified key from
// the VlanQosPolicy map field of NokiaConf_Configure_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos) GetVlanQosPolicy(VlanQosPolicyName string) *NokiaConf_Configure_Qos_VlanQosPolicy {

	if t == nil {
		return nil
	}

	key := VlanQosPolicyName

	if lm, ok := t.VlanQosPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlanQosPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos) DeleteVlanQosPolicy(VlanQosPolicyName string) {
	key := VlanQosPolicyName

	delete(t.VlanQosPolicy, key)
}

// AppendVlanQosPolicy appends the supplied NokiaConf_Configure_Qos_VlanQosPolicy struct to the
// list VlanQosPolicy of NokiaConf_Configure_Qos. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_VlanQosPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos) AppendVlanQosPolicy(v *NokiaConf_Configure_Qos_VlanQosPolicy) error {
	if v.VlanQosPolicyName == nil {
		return fmt.Errorf("invalid nil key received for VlanQosPolicyName")
	}

	key := *v.VlanQosPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanQosPolicy == nil {
		t.VlanQosPolicy = make(map[string]*NokiaConf_Configure_Qos_VlanQosPolicy)
	}

	if _, ok := t.VlanQosPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list VlanQosPolicy %v", key)
	}

	t.VlanQosPolicy[key] = v
	return nil
}

// GetOrCreateMatchList retrieves the value of the MatchList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos) GetOrCreateMatchList() *NokiaConf_Configure_Qos_MatchList {
	if t.MatchList != nil {
		return t.MatchList
	}
	t.MatchList = &NokiaConf_Configure_Qos_MatchList{}
	return t.MatchList
}

// GetOrCreateMdAutoId retrieves the value of the MdAutoId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos) GetOrCreateMdAutoId() *NokiaConf_Configure_Qos_MdAutoId {
	if t.MdAutoId != nil {
		return t.MdAutoId
	}
	t.MdAutoId = &NokiaConf_Configure_Qos_MdAutoId{}
	return t.MdAutoId
}

// GetOrCreatePacketByteOffset retrieves the value of the PacketByteOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos) GetOrCreatePacketByteOffset() *NokiaConf_Configure_Qos_PacketByteOffset {
	if t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	t.PacketByteOffset = &NokiaConf_Configure_Qos_PacketByteOffset{}
	return t.PacketByteOffset
}

// GetOrCreateQueueGroupTemplates retrieves the value of the QueueGroupTemplates field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos) GetOrCreateQueueGroupTemplates() *NokiaConf_Configure_Qos_QueueGroupTemplates {
	if t.QueueGroupTemplates != nil {
		return t.QueueGroupTemplates
	}
	t.QueueGroupTemplates = &NokiaConf_Configure_Qos_QueueGroupTemplates{}
	return t.QueueGroupTemplates
}

// GetMatchList returns the value of the MatchList struct pointer
// from NokiaConf_Configure_Qos. If the receiver or the field MatchList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos) GetMatchList() *NokiaConf_Configure_Qos_MatchList {
	if t != nil && t.MatchList != nil {
		return t.MatchList
	}
	return nil
}

// GetMdAutoId returns the value of the MdAutoId struct pointer
// from NokiaConf_Configure_Qos. If the receiver or the field MdAutoId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos) GetMdAutoId() *NokiaConf_Configure_Qos_MdAutoId {
	if t != nil && t.MdAutoId != nil {
		return t.MdAutoId
	}
	return nil
}

// GetPacketByteOffset returns the value of the PacketByteOffset struct pointer
// from NokiaConf_Configure_Qos. If the receiver or the field PacketByteOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos) GetPacketByteOffset() *NokiaConf_Configure_Qos_PacketByteOffset {
	if t != nil && t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	return nil
}

// GetQueueGroupTemplates returns the value of the QueueGroupTemplates struct pointer
// from NokiaConf_Configure_Qos. If the receiver or the field QueueGroupTemplates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos) GetQueueGroupTemplates() *NokiaConf_Configure_Qos_QueueGroupTemplates {
	if t != nil && t.QueueGroupTemplates != nil {
		return t.QueueGroupTemplates
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MatchList.PopulateDefaults()
	t.MdAutoId.PopulateDefaults()
	t.PacketByteOffset.PopulateDefaults()
	t.QueueGroupTemplates.PopulateDefaults()
	for _, e := range t.AdvConfigPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.AtmTdProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Dot1PFcMap {
		e.PopulateDefaults()
	}
	for _, e := range t.DscpFcMap {
		e.PopulateDefaults()
	}
	for _, e := range t.EgressRemarkPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.FcDot1PMap {
		e.PopulateDefaults()
	}
	for _, e := range t.FcDscpMap {
		e.PopulateDefaults()
	}
	for _, e := range t.FcLspExpMap {
		e.PopulateDefaults()
	}
	for _, e := range t.FpResourcePolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsAttachmentPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsPoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsPortPoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaPoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaSlopePolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HsmdaWrrPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.HwAggShaperSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.IngressClassificationPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExpFcMap {
		e.PopulateDefaults()
	}
	for _, e := range t.McFrProfileEgress {
		e.PopulateDefaults()
	}
	for _, e := range t.McFrProfileIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.MlpppProfileEgress {
		e.PopulateDefaults()
	}
	for _, e := range t.MlpppProfileIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.Network {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkQueue {
		e.PopulateDefaults()
	}
	for _, e := range t.PolicerControlPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PortQosPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PortSchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PostPolicerMapping {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueGroupRedirectList {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueMgmtPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SapEgress {
		e.PopulateDefaults()
	}
	for _, e := range t.SapIngress {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.SharedQueue {
		e.PopulateDefaults()
	}
	for _, e := range t.SlopePolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.VlanQosPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos.
func (*NokiaConf_Configure_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy represents the /nokia-conf/configure/qos/adv-config-policy YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy struct {
	AdvConfigPolicyName *string                                               `path:"adv-config-policy-name" module:"nokia-conf"`
	ApplyGroups         []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	ChildControl        *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl `path:"child-control" module:"nokia-conf"`
	Description         *string                                               `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy) IsYANGGoStruct() {}

// GetOrCreateChildControl retrieves the value of the ChildControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) GetOrCreateChildControl() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl {
	if t.ChildControl != nil {
		return t.ChildControl
	}
	t.ChildControl = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl{}
	return t.ChildControl
}

// GetChildControl returns the value of the ChildControl struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy. If the receiver or the field ChildControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) GetChildControl() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl {
	if t != nil && t.ChildControl != nil {
		return t.ChildControl
	}
	return nil
}

// GetAdvConfigPolicyName retrieves the value of the leaf AdvConfigPolicyName from the NokiaConf_Configure_Qos_AdvConfigPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicyName is set, it can
// safely use t.GetAdvConfigPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) GetAdvConfigPolicyName() string {
	if t == nil || t.AdvConfigPolicyName == nil {
		return ""
	}
	return *t.AdvConfigPolicyName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_AdvConfigPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_AdvConfigPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_AdvConfigPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ChildControl.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_AdvConfigPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AdvConfigPolicyName == nil {
		return nil, fmt.Errorf("nil value for key AdvConfigPolicyName")
	}

	return map[string]interface{}{
		"adv-config-policy-name": *t.AdvConfigPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl represents the /nokia-conf/configure/qos/adv-config-policy/child-control YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl struct {
	BandwidthDistribution *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution `path:"bandwidth-distribution" module:"nokia-conf"`
	OfferedMeasurement    *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement    `path:"offered-measurement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) IsYANGGoStruct() {}

// GetOrCreateBandwidthDistribution retrieves the value of the BandwidthDistribution field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) GetOrCreateBandwidthDistribution() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution {
	if t.BandwidthDistribution != nil {
		return t.BandwidthDistribution
	}
	t.BandwidthDistribution = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution{}
	return t.BandwidthDistribution
}

// GetOrCreateOfferedMeasurement retrieves the value of the OfferedMeasurement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) GetOrCreateOfferedMeasurement() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement {
	if t.OfferedMeasurement != nil {
		return t.OfferedMeasurement
	}
	t.OfferedMeasurement = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement{}
	return t.OfferedMeasurement
}

// GetBandwidthDistribution returns the value of the BandwidthDistribution struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl. If the receiver or the field BandwidthDistribution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) GetBandwidthDistribution() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution {
	if t != nil && t.BandwidthDistribution != nil {
		return t.BandwidthDistribution
	}
	return nil
}

// GetOfferedMeasurement returns the value of the OfferedMeasurement struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl. If the receiver or the field OfferedMeasurement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) GetOfferedMeasurement() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement {
	if t != nil && t.OfferedMeasurement != nil {
		return t.OfferedMeasurement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BandwidthDistribution.PopulateDefaults()
	t.OfferedMeasurement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution struct {
	AboveOfferedAllowance       *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance `path:"above-offered-allowance" module:"nokia-conf"`
	AboveOfferedCap             *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap       `path:"above-offered-cap" module:"nokia-conf"`
	EnqueueOnPirZero            *bool                                                                                             `path:"enqueue-on-pir-zero" module:"nokia-conf"`
	Granularity                 *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity           `path:"granularity" module:"nokia-conf"`
	InternalSchedulerWeightMode E_NokiaTypesQos_InternalSchedulerWeightMode                                                       `path:"internal-scheduler-weight-mode" module:"nokia-conf"`
	LimitPirZeroDrain           *bool                                                                                             `path:"limit-pir-zero-drain" module:"nokia-conf"`
	LubInitMinPir               *bool                                                                                             `path:"lub-init-min-pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) IsYANGGoStruct() {}

// GetOrCreateAboveOfferedAllowance retrieves the value of the AboveOfferedAllowance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetOrCreateAboveOfferedAllowance() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance {
	if t.AboveOfferedAllowance != nil {
		return t.AboveOfferedAllowance
	}
	t.AboveOfferedAllowance = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance{}
	return t.AboveOfferedAllowance
}

// GetOrCreateAboveOfferedCap retrieves the value of the AboveOfferedCap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetOrCreateAboveOfferedCap() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap {
	if t.AboveOfferedCap != nil {
		return t.AboveOfferedCap
	}
	t.AboveOfferedCap = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap{}
	return t.AboveOfferedCap
}

// GetOrCreateGranularity retrieves the value of the Granularity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetOrCreateGranularity() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity {
	if t.Granularity != nil {
		return t.Granularity
	}
	t.Granularity = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity{}
	return t.Granularity
}

// GetAboveOfferedAllowance returns the value of the AboveOfferedAllowance struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution. If the receiver or the field AboveOfferedAllowance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetAboveOfferedAllowance() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance {
	if t != nil && t.AboveOfferedAllowance != nil {
		return t.AboveOfferedAllowance
	}
	return nil
}

// GetAboveOfferedCap returns the value of the AboveOfferedCap struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution. If the receiver or the field AboveOfferedCap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetAboveOfferedCap() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap {
	if t != nil && t.AboveOfferedCap != nil {
		return t.AboveOfferedCap
	}
	return nil
}

// GetGranularity returns the value of the Granularity struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution. If the receiver or the field Granularity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetGranularity() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity {
	if t != nil && t.Granularity != nil {
		return t.Granularity
	}
	return nil
}

// GetEnqueueOnPirZero retrieves the value of the leaf EnqueueOnPirZero from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnqueueOnPirZero is set, it can
// safely use t.GetEnqueueOnPirZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnqueueOnPirZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetEnqueueOnPirZero() bool {
	if t == nil || t.EnqueueOnPirZero == nil {
		return false
	}
	return *t.EnqueueOnPirZero
}

// GetInternalSchedulerWeightMode retrieves the value of the leaf InternalSchedulerWeightMode from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalSchedulerWeightMode is set, it can
// safely use t.GetInternalSchedulerWeightMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalSchedulerWeightMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetInternalSchedulerWeightMode() E_NokiaTypesQos_InternalSchedulerWeightMode {
	if t == nil || t.InternalSchedulerWeightMode == 0 {
		return 0
	}
	return t.InternalSchedulerWeightMode
}

// GetLimitPirZeroDrain retrieves the value of the leaf LimitPirZeroDrain from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitPirZeroDrain is set, it can
// safely use t.GetLimitPirZeroDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitPirZeroDrain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetLimitPirZeroDrain() bool {
	if t == nil || t.LimitPirZeroDrain == nil {
		return false
	}
	return *t.LimitPirZeroDrain
}

// GetLubInitMinPir retrieves the value of the leaf LubInitMinPir from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LubInitMinPir is set, it can
// safely use t.GetLubInitMinPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LubInitMinPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) GetLubInitMinPir() bool {
	if t == nil || t.LubInitMinPir == nil {
		return false
	}
	return *t.LubInitMinPir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnqueueOnPirZero == nil {
		var v bool = false
		t.EnqueueOnPirZero = &v
	}
	if t.LimitPirZeroDrain == nil {
		var v bool = false
		t.LimitPirZeroDrain = &v
	}
	if t.LubInitMinPir == nil {
		var v bool = false
		t.LubInitMinPir = &v
	}
	t.AboveOfferedAllowance.PopulateDefaults()
	t.AboveOfferedCap.PopulateDefaults()
	t.Granularity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance struct {
	DeltaConsumedAggRate        *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate        `path:"delta-consumed-agg-rate" module:"nokia-conf"`
	DeltaConsumedHigherTierRate *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate `path:"delta-consumed-higher-tier-rate" module:"nokia-conf"`
	UnconsumedAggRate           *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate           `path:"unconsumed-agg-rate" module:"nokia-conf"`
	UnconsumedHigherTierRate    *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate    `path:"unconsumed-higher-tier-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) IsYANGGoStruct() {
}

// GetOrCreateDeltaConsumedAggRate retrieves the value of the DeltaConsumedAggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateDeltaConsumedAggRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate {
	if t.DeltaConsumedAggRate != nil {
		return t.DeltaConsumedAggRate
	}
	t.DeltaConsumedAggRate = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate{}
	return t.DeltaConsumedAggRate
}

// GetOrCreateDeltaConsumedHigherTierRate retrieves the value of the DeltaConsumedHigherTierRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateDeltaConsumedHigherTierRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate {
	if t.DeltaConsumedHigherTierRate != nil {
		return t.DeltaConsumedHigherTierRate
	}
	t.DeltaConsumedHigherTierRate = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate{}
	return t.DeltaConsumedHigherTierRate
}

// GetOrCreateUnconsumedAggRate retrieves the value of the UnconsumedAggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateUnconsumedAggRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate {
	if t.UnconsumedAggRate != nil {
		return t.UnconsumedAggRate
	}
	t.UnconsumedAggRate = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate{}
	return t.UnconsumedAggRate
}

// GetOrCreateUnconsumedHigherTierRate retrieves the value of the UnconsumedHigherTierRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetOrCreateUnconsumedHigherTierRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate {
	if t.UnconsumedHigherTierRate != nil {
		return t.UnconsumedHigherTierRate
	}
	t.UnconsumedHigherTierRate = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate{}
	return t.UnconsumedHigherTierRate
}

// GetDeltaConsumedAggRate returns the value of the DeltaConsumedAggRate struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field DeltaConsumedAggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetDeltaConsumedAggRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate {
	if t != nil && t.DeltaConsumedAggRate != nil {
		return t.DeltaConsumedAggRate
	}
	return nil
}

// GetDeltaConsumedHigherTierRate returns the value of the DeltaConsumedHigherTierRate struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field DeltaConsumedHigherTierRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetDeltaConsumedHigherTierRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate {
	if t != nil && t.DeltaConsumedHigherTierRate != nil {
		return t.DeltaConsumedHigherTierRate
	}
	return nil
}

// GetUnconsumedAggRate returns the value of the UnconsumedAggRate struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field UnconsumedAggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetUnconsumedAggRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate {
	if t != nil && t.UnconsumedAggRate != nil {
		return t.UnconsumedAggRate
	}
	return nil
}

// GetUnconsumedHigherTierRate returns the value of the UnconsumedHigherTierRate struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance. If the receiver or the field UnconsumedHigherTierRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) GetUnconsumedHigherTierRate() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate {
	if t != nil && t.UnconsumedHigherTierRate != nil {
		return t.UnconsumedHigherTierRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeltaConsumedAggRate.PopulateDefaults()
	t.DeltaConsumedHigherTierRate.PopulateDefaults()
	t.UnconsumedAggRate.PopulateDefaults()
	t.UnconsumedHigherTierRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/delta-consumed-agg-rate YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 20.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 20.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedAggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/delta-consumed-higher-tier-rate YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 5.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 5.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_DeltaConsumedHigherTierRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/unconsumed-agg-rate YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 100.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 100.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedAggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-allowance/unconsumed-higher-tier-rate YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 100.00
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v float64 = 100.00
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedAllowance_UnconsumedHigherTierRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution/above-offered-cap YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap struct {
	Percent *float64                                                                                              `path:"percent" module:"nokia-conf"`
	Rate    NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) GetRate() NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_AboveOfferedCap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity represents the /nokia-conf/configure/qos/adv-config-policy/child-control/bandwidth-distribution/granularity YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
	Rate    *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_BandwidthDistribution_Granularity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement represents the /nokia-conf/configure/qos/adv-config-policy/child-control/offered-measurement YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement struct {
	Add               *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add               `path:"add" module:"nokia-conf"`
	FastStart         *bool                                                                                      `path:"fast-start" module:"nokia-conf"`
	FastStop          *bool                                                                                      `path:"fast-stop" module:"nokia-conf"`
	Granularity       *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity       `path:"granularity" module:"nokia-conf"`
	HoldTime          *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime          `path:"hold-time" module:"nokia-conf"`
	MaxDecrement      *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement      `path:"max-decrement" module:"nokia-conf"`
	SampleInterval    *uint32                                                                                    `path:"sample-interval" module:"nokia-conf"`
	TimeAverageFactor *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor `path:"time-average-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) IsYANGGoStruct() {}

// GetOrCreateAdd retrieves the value of the Add field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateAdd() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add {
	if t.Add != nil {
		return t.Add
	}
	t.Add = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add{}
	return t.Add
}

// GetOrCreateGranularity retrieves the value of the Granularity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateGranularity() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity {
	if t.Granularity != nil {
		return t.Granularity
	}
	t.Granularity = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity{}
	return t.Granularity
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateHoldTime() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime{}
	return t.HoldTime
}

// GetOrCreateMaxDecrement retrieves the value of the MaxDecrement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateMaxDecrement() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement {
	if t.MaxDecrement != nil {
		return t.MaxDecrement
	}
	t.MaxDecrement = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement{}
	return t.MaxDecrement
}

// GetOrCreateTimeAverageFactor retrieves the value of the TimeAverageFactor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetOrCreateTimeAverageFactor() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor {
	if t.TimeAverageFactor != nil {
		return t.TimeAverageFactor
	}
	t.TimeAverageFactor = &NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor{}
	return t.TimeAverageFactor
}

// GetAdd returns the value of the Add struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field Add is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetAdd() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add {
	if t != nil && t.Add != nil {
		return t.Add
	}
	return nil
}

// GetGranularity returns the value of the Granularity struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field Granularity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetGranularity() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity {
	if t != nil && t.Granularity != nil {
		return t.Granularity
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetHoldTime() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetMaxDecrement returns the value of the MaxDecrement struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field MaxDecrement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetMaxDecrement() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement {
	if t != nil && t.MaxDecrement != nil {
		return t.MaxDecrement
	}
	return nil
}

// GetTimeAverageFactor returns the value of the TimeAverageFactor struct pointer
// from NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement. If the receiver or the field TimeAverageFactor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetTimeAverageFactor() *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor {
	if t != nil && t.TimeAverageFactor != nil {
		return t.TimeAverageFactor
	}
	return nil
}

// GetFastStart retrieves the value of the leaf FastStart from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastStart is set, it can
// safely use t.GetFastStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetFastStart() bool {
	if t == nil || t.FastStart == nil {
		return false
	}
	return *t.FastStart
}

// GetFastStop retrieves the value of the leaf FastStop from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastStop is set, it can
// safely use t.GetFastStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastStop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetFastStop() bool {
	if t == nil || t.FastStop == nil {
		return false
	}
	return *t.FastStop
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) GetSampleInterval() uint32 {
	if t == nil || t.SampleInterval == nil {
		return 1
	}
	return *t.SampleInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastStart == nil {
		var v bool = false
		t.FastStart = &v
	}
	if t.FastStop == nil {
		var v bool = false
		t.FastStop = &v
	}
	if t.SampleInterval == nil {
		var v uint32 = 1
		t.SampleInterval = &v
	}
	t.Add.PopulateDefaults()
	t.Granularity.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.MaxDecrement.PopulateDefaults()
	t.TimeAverageFactor.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add represents the /nokia-conf/configure/qos/adv-config-policy/child-control/offered-measurement/add YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add struct {
	ActiveMinOnly *bool    `path:"active-min-only" module:"nokia-conf"`
	MinOnly       *bool    `path:"min-only" module:"nokia-conf"`
	Percent       *float64 `path:"percent" module:"nokia-conf"`
	Rate          *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) IsYANGGoStruct() {
}

// GetActiveMinOnly retrieves the value of the leaf ActiveMinOnly from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveMinOnly is set, it can
// safely use t.GetActiveMinOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveMinOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetActiveMinOnly() bool {
	if t == nil || t.ActiveMinOnly == nil {
		return false
	}
	return *t.ActiveMinOnly
}

// GetMinOnly retrieves the value of the leaf MinOnly from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinOnly is set, it can
// safely use t.GetMinOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetMinOnly() bool {
	if t == nil || t.MinOnly == nil {
		return false
	}
	return *t.MinOnly
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActiveMinOnly == nil {
		var v bool = false
		t.ActiveMinOnly = &v
	}
	if t.MinOnly == nil {
		var v bool = false
		t.MinOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Add) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity represents the /nokia-conf/configure/qos/adv-config-policy/child-control/offered-measurement/granularity YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
	Rate    *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_Granularity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime represents the /nokia-conf/configure/qos/adv-config-policy/child-control/offered-measurement/hold-time YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime struct {
	ActiveMinOnly *bool   `path:"active-min-only" module:"nokia-conf"`
	HighRate      *uint32 `path:"high-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) IsYANGGoStruct() {
}

// GetActiveMinOnly retrieves the value of the leaf ActiveMinOnly from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveMinOnly is set, it can
// safely use t.GetActiveMinOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveMinOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) GetActiveMinOnly() bool {
	if t == nil || t.ActiveMinOnly == nil {
		return false
	}
	return *t.ActiveMinOnly
}

// GetHighRate retrieves the value of the leaf HighRate from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighRate is set, it can
// safely use t.GetHighRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) GetHighRate() uint32 {
	if t == nil || t.HighRate == nil {
		return 0
	}
	return *t.HighRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActiveMinOnly == nil {
		var v bool = false
		t.ActiveMinOnly = &v
	}
	if t.HighRate == nil {
		var v uint32 = 0
		t.HighRate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement represents the /nokia-conf/configure/qos/adv-config-policy/child-control/offered-measurement/max-decrement YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement struct {
	Percent *float64 `path:"percent" module:"nokia-conf"`
	Rate    *int64   `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) IsYANGGoStruct() {
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) GetPercent() float64 {
	if t == nil || t.Percent == nil {
		return 0.0
	}
	return *t.Percent
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_MaxDecrement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor represents the /nokia-conf/configure/qos/adv-config-policy/child-control/offered-measurement/time-average-factor YANG schema element.
type NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor struct {
	DecOnly         *bool   `path:"dec-only" module:"nokia-conf"`
	WeightingFactor *uint32 `path:"weighting-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) IsYANGGoStruct() {
}

// GetDecOnly retrieves the value of the leaf DecOnly from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecOnly is set, it can
// safely use t.GetDecOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) GetDecOnly() bool {
	if t == nil || t.DecOnly == nil {
		return false
	}
	return *t.DecOnly
}

// GetWeightingFactor retrieves the value of the leaf WeightingFactor from the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightingFactor is set, it can
// safely use t.GetWeightingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightingFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) GetWeightingFactor() uint32 {
	if t == nil || t.WeightingFactor == nil {
		return 0
	}
	return *t.WeightingFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DecOnly == nil {
		var v bool = false
		t.DecOnly = &v
	}
	if t.WeightingFactor == nil {
		var v uint32 = 0
		t.WeightingFactor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor.
func (*NokiaConf_Configure_Qos_AdvConfigPolicy_ChildControl_OfferedMeasurement_TimeAverageFactor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AtmTdProfile represents the /nokia-conf/configure/qos/atm-td-profile YANG schema element.
type NokiaConf_Configure_Qos_AtmTdProfile struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	AtmTdProfileId     *int32                                                `path:"atm-td-profile-id" module:"nokia-conf"`
	ClpTagging         *bool                                                 `path:"clp-tagging" module:"nokia-conf"`
	Description        *string                                               `path:"description" module:"nokia-conf"`
	DescriptorType     E_NokiaConf_Configure_Qos_AtmTdProfile_DescriptorType `path:"descriptor-type" module:"nokia-conf"`
	Policing           *bool                                                 `path:"policing" module:"nokia-conf"`
	ServiceCategory    E_NokiaTypesQos_AtmServiceCategory                    `path:"service-category" module:"nokia-conf"`
	Shaping            *bool                                                 `path:"shaping" module:"nokia-conf"`
	Traffic            *NokiaConf_Configure_Qos_AtmTdProfile_Traffic         `path:"traffic" module:"nokia-conf"`
	Weight             *int32                                                `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AtmTdProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AtmTdProfile) IsYANGGoStruct() {}

// GetOrCreateTraffic retrieves the value of the Traffic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetOrCreateTraffic() *NokiaConf_Configure_Qos_AtmTdProfile_Traffic {
	if t.Traffic != nil {
		return t.Traffic
	}
	t.Traffic = &NokiaConf_Configure_Qos_AtmTdProfile_Traffic{}
	return t.Traffic
}

// GetTraffic returns the value of the Traffic struct pointer
// from NokiaConf_Configure_Qos_AtmTdProfile. If the receiver or the field Traffic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetTraffic() *NokiaConf_Configure_Qos_AtmTdProfile_Traffic {
	if t != nil && t.Traffic != nil {
		return t.Traffic
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAtmTdProfileId retrieves the value of the leaf AtmTdProfileId from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtmTdProfileId is set, it can
// safely use t.GetAtmTdProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtmTdProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetAtmTdProfileId() int32 {
	if t == nil || t.AtmTdProfileId == nil {
		return 0
	}
	return *t.AtmTdProfileId
}

// GetClpTagging retrieves the value of the leaf ClpTagging from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClpTagging is set, it can
// safely use t.GetClpTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClpTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetClpTagging() bool {
	if t == nil || t.ClpTagging == nil {
		return false
	}
	return *t.ClpTagging
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDescriptorType retrieves the value of the leaf DescriptorType from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DescriptorType is set, it can
// safely use t.GetDescriptorType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DescriptorType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetDescriptorType() E_NokiaConf_Configure_Qos_AtmTdProfile_DescriptorType {
	if t == nil || t.DescriptorType == 0 {
		return 0
	}
	return t.DescriptorType
}

// GetPolicing retrieves the value of the leaf Policing from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policing is set, it can
// safely use t.GetPolicing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetPolicing() bool {
	if t == nil || t.Policing == nil {
		return false
	}
	return *t.Policing
}

// GetServiceCategory retrieves the value of the leaf ServiceCategory from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceCategory is set, it can
// safely use t.GetServiceCategory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceCategory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetServiceCategory() E_NokiaTypesQos_AtmServiceCategory {
	if t == nil || t.ServiceCategory == 0 {
		return NokiaTypesQos_AtmServiceCategory_ubr
	}
	return t.ServiceCategory
}

// GetShaping retrieves the value of the leaf Shaping from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Shaping is set, it can
// safely use t.GetShaping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Shaping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetShaping() bool {
	if t == nil || t.Shaping == nil {
		return false
	}
	return *t.Shaping
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_AtmTdProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AtmTdProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClpTagging == nil {
		var v bool = false
		t.ClpTagging = &v
	}
	if t.Policing == nil {
		var v bool = false
		t.Policing = &v
	}
	if t.ServiceCategory == 0 {
		t.ServiceCategory = NokiaTypesQos_AtmServiceCategory_ubr
	}
	t.Traffic.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_AtmTdProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AtmTdProfileId == nil {
		return nil, fmt.Errorf("nil value for key AtmTdProfileId")
	}

	return map[string]interface{}{
		"atm-td-profile-id": *t.AtmTdProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AtmTdProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AtmTdProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AtmTdProfile.
func (*NokiaConf_Configure_Qos_AtmTdProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_AtmTdProfile_Traffic represents the /nokia-conf/configure/qos/atm-td-profile/traffic YANG schema element.
type NokiaConf_Configure_Qos_AtmTdProfile_Traffic struct {
	Cdvt *uint32 `path:"cdvt" module:"nokia-conf"`
	Mbs  *uint32 `path:"mbs" module:"nokia-conf"`
	Mir  *uint32 `path:"mir" module:"nokia-conf"`
	Pir  *uint32 `path:"pir" module:"nokia-conf"`
	Sir  *uint32 `path:"sir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_AtmTdProfile_Traffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_AtmTdProfile_Traffic) IsYANGGoStruct() {}

// GetCdvt retrieves the value of the leaf Cdvt from the NokiaConf_Configure_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdvt is set, it can
// safely use t.GetCdvt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdvt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) GetCdvt() uint32 {
	if t == nil || t.Cdvt == nil {
		return 250
	}
	return *t.Cdvt
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) GetMbs() uint32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetMir retrieves the value of the leaf Mir from the NokiaConf_Configure_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mir is set, it can
// safely use t.GetMir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) GetMir() uint32 {
	if t == nil || t.Mir == nil {
		return 0
	}
	return *t.Mir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) GetPir() uint32 {
	if t == nil || t.Pir == nil {
		return 0
	}
	return *t.Pir
}

// GetSir retrieves the value of the leaf Sir from the NokiaConf_Configure_Qos_AtmTdProfile_Traffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sir is set, it can
// safely use t.GetSir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) GetSir() uint32 {
	if t == nil || t.Sir == nil {
		return 0
	}
	return *t.Sir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_AtmTdProfile_Traffic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdvt == nil {
		var v uint32 = 250
		t.Cdvt = &v
	}
	if t.Mir == nil {
		var v uint32 = 0
		t.Mir = &v
	}
	if t.Sir == nil {
		var v uint32 = 0
		t.Sir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_AtmTdProfile_Traffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_AtmTdProfile_Traffic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_AtmTdProfile_Traffic.
func (*NokiaConf_Configure_Qos_AtmTdProfile_Traffic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Dot1PFcMap represents the /nokia-conf/configure/qos/dot1p-fc-map YANG schema element.
type NokiaConf_Configure_Qos_Dot1PFcMap struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction   `path:"default-action" module:"nokia-conf"`
	Dot1P              map[int32]*NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P `path:"dot1p" module:"nokia-conf"`
	Dot1PFcMapName     *string                                             `path:"dot1p-fc-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Dot1PFcMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Dot1PFcMap) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Qos_Dot1PFcMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) NewDot1P(Dot1PValue int32) (*NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P{
		Dot1PValue: &Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Qos_Dot1PFcMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) RenameDot1P(oldK, newK int32) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = &newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Dot1PFcMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) GetOrCreateDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Qos_Dot1PFcMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) GetDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Dot1PFcMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) DeleteDot1P(Dot1PValue int32) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Qos_Dot1PFcMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) AppendDot1P(v *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) error {
	if v.Dot1PValue == nil {
		return fmt.Errorf("invalid nil key received for Dot1PValue")
	}

	key := *v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) GetOrCreateDefaultAction() *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Qos_Dot1PFcMap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) GetDefaultAction() *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Dot1PFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Dot1PFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1PFcMapName retrieves the value of the leaf Dot1PFcMapName from the NokiaConf_Configure_Qos_Dot1PFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PFcMapName is set, it can
// safely use t.GetDot1PFcMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PFcMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) GetDot1PFcMapName() string {
	if t == nil || t.Dot1PFcMapName == nil {
		return ""
	}
	return *t.Dot1PFcMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Dot1PFcMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Dot1PFcMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dot1PFcMapName == nil {
		return nil, fmt.Errorf("nil value for key Dot1PFcMapName")
	}

	return map[string]interface{}{
		"dot1p-fc-map-name": *t.Dot1PFcMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Dot1PFcMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Dot1PFcMap.
func (*NokiaConf_Configure_Qos_Dot1PFcMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction represents the /nokia-conf/configure/qos/dot1p-fc-map/default-action YANG schema element.
type NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName   `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_ProfileDe `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_ProfileDe_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_ProfileDe_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction.
func (*NokiaConf_Configure_Qos_Dot1PFcMap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P represents the /nokia-conf/configure/qos/dot1p-fc-map/dot1p YANG schema element.
type NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P struct {
	ApplyGroups        []string                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Dot1PValue         *int32                    `path:"dot1p-value" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName   `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_ProfileDe `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) GetDot1PValue() int32 {
	if t == nil || t.Dot1PValue == nil {
		return 0
	}
	return *t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dot1PValue == nil {
		return nil, fmt.Errorf("nil value for key Dot1PValue")
	}

	return map[string]interface{}{
		"dot1p-value": *t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P.
func (*NokiaConf_Configure_Qos_Dot1PFcMap_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_DscpFcMap represents the /nokia-conf/configure/qos/dscp-fc-map YANG schema element.
type NokiaConf_Configure_Qos_DscpFcMap struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction                     `path:"default-action" module:"nokia-conf"`
	Dscp               map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_DscpFcMap_Dscp `path:"dscp" module:"nokia-conf"`
	DscpFcMapName      *string                                                              `path:"dscp-fc-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_DscpFcMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_DscpFcMap) IsYANGGoStruct() {}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Qos_DscpFcMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_DscpFcMap) NewDscp(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Qos_DscpFcMap_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_DscpFcMap_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Qos_DscpFcMap_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Qos_DscpFcMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_DscpFcMap) RenameDscp(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_DscpFcMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_DscpFcMap) GetOrCreateDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_DscpFcMap_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Qos_DscpFcMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_DscpFcMap) GetDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_DscpFcMap_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_DscpFcMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_DscpFcMap) DeleteDscp(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Qos_DscpFcMap_Dscp struct to the
// list Dscp of NokiaConf_Configure_Qos_DscpFcMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_DscpFcMap_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_DscpFcMap) AppendDscp(v *NokiaConf_Configure_Qos_DscpFcMap_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_DscpFcMap_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_DscpFcMap) GetOrCreateDefaultAction() *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Qos_DscpFcMap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Qos_DscpFcMap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_DscpFcMap) GetDefaultAction() *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_DscpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_DscpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpFcMapName retrieves the value of the leaf DscpFcMapName from the NokiaConf_Configure_Qos_DscpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpFcMapName is set, it can
// safely use t.GetDscpFcMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpFcMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap) GetDscpFcMapName() string {
	if t == nil || t.DscpFcMapName == nil {
		return ""
	}
	return *t.DscpFcMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_DscpFcMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_DscpFcMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_DscpFcMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_DscpFcMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DscpFcMapName == nil {
		return nil, fmt.Errorf("nil value for key DscpFcMapName")
	}

	return map[string]interface{}{
		"dscp-fc-map-name": *t.DscpFcMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_DscpFcMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_DscpFcMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_DscpFcMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_DscpFcMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_DscpFcMap.
func (*NokiaConf_Configure_Qos_DscpFcMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_DscpFcMap_DefaultAction represents the /nokia-conf/configure/qos/dscp-fc-map/default-action YANG schema element.
type NokiaConf_Configure_Qos_DscpFcMap_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_DscpFcMap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_DscpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_DscpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_DscpFcMap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_DscpFcMap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_DscpFcMap_DefaultAction.
func (*NokiaConf_Configure_Qos_DscpFcMap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_DscpFcMap_Dscp represents the /nokia-conf/configure/qos/dscp-fc-map/dscp YANG schema element.
type NokiaConf_Configure_Qos_DscpFcMap_Dscp struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName           E_NokiaTypesQos_DscpName `path:"dscp-name" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName  `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_Profile  `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_DscpFcMap_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_DscpFcMap_Dscp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_DscpFcMap_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_in
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_DscpFcMap_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_in
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_DscpFcMap_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_DscpFcMap_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_DscpFcMap_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_DscpFcMap_Dscp.
func (*NokiaConf_Configure_Qos_DscpFcMap_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Qos_EgressRemarkPolicy struct {
	ApplyGroups            []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                                    `path:"description" module:"nokia-conf"`
	EgressRemarkPolicyName *string                                                                    `path:"egress-remark-policy-name" module:"nokia-conf"`
	Fc                     map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc `path:"fc" module:"nokia-conf"`
	FcDot1PMap             *string                                                                    `path:"fc-dot1p-map" module:"nokia-conf"`
	FcDscpMap              *string                                                                    `path:"fc-dscp-map" module:"nokia-conf"`
	FcLspExpMap            *string                                                                    `path:"fc-lsp-exp-map" module:"nokia-conf"`
	Scope                  E_NokiaTypesQos_ItemScope                                                  `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_EgressRemarkPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_EgressRemarkPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_EgressRemarkPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_EgressRemarkPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_EgressRemarkPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_EgressRemarkPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) AppendFc(v *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressRemarkPolicyName retrieves the value of the leaf EgressRemarkPolicyName from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressRemarkPolicyName is set, it can
// safely use t.GetEgressRemarkPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressRemarkPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetEgressRemarkPolicyName() string {
	if t == nil || t.EgressRemarkPolicyName == nil {
		return ""
	}
	return *t.EgressRemarkPolicyName
}

// GetFcDot1PMap retrieves the value of the leaf FcDot1PMap from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDot1PMap is set, it can
// safely use t.GetFcDot1PMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDot1PMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetFcDot1PMap() string {
	if t == nil || t.FcDot1PMap == nil {
		return ""
	}
	return *t.FcDot1PMap
}

// GetFcDscpMap retrieves the value of the leaf FcDscpMap from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDscpMap is set, it can
// safely use t.GetFcDscpMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDscpMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetFcDscpMap() string {
	if t == nil || t.FcDscpMap == nil {
		return ""
	}
	return *t.FcDscpMap
}

// GetFcLspExpMap retrieves the value of the leaf FcLspExpMap from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcLspExpMap is set, it can
// safely use t.GetFcLspExpMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcLspExpMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetFcLspExpMap() string {
	if t == nil || t.FcLspExpMap == nil {
		return ""
	}
	return *t.FcLspExpMap
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_EgressRemarkPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EgressRemarkPolicyName == nil {
		return nil, fmt.Errorf("nil value for key EgressRemarkPolicyName")
	}

	return map[string]interface{}{
		"egress-remark-policy-name": *t.EgressRemarkPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc represents the /nokia-conf/configure/qos/egress-remark-policy/fc YANG schema element.
type NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	DeMark             *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	Dot1P              *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P  `path:"dot1p" module:"nokia-conf"`
	Dscp               *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp   `path:"dscp" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                               `path:"fc-name" module:"nokia-conf"`
	LspExp             *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp `path:"lsp-exp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetOrCreateDot1P() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetOrCreateDscp() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp{}
	return t.Dscp
}

// GetOrCreateLspExp retrieves the value of the LspExp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetOrCreateLspExp() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp {
	if t.LspExp != nil {
		return t.LspExp
	}
	t.LspExp = &NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp{}
	return t.LspExp
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetDeMark() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetDot1P() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetDscp() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetLspExp returns the value of the LspExp struct pointer
// from NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc. If the receiver or the field LspExp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetLspExp() *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp {
	if t != nil && t.LspExp != nil {
		return t.LspExp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.Dscp.PopulateDefaults()
	t.LspExp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark represents the /nokia-conf/configure/qos/egress-remark-policy/fc/de-mark YANG schema element.
type NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P represents the /nokia-conf/configure/qos/egress-remark-policy/fc/dot1p YANG schema element.
type NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P struct {
	Exceed     *int32 `path:"exceed" module:"nokia-conf"`
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	Inplus     *int32 `path:"inplus" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) IsYANGGoStruct() {}

// GetExceed retrieves the value of the leaf Exceed from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exceed is set, it can
// safely use t.GetExceed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exceed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) GetExceed() int32 {
	if t == nil || t.Exceed == nil {
		return 0
	}
	return *t.Exceed
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetInplus retrieves the value of the leaf Inplus from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inplus is set, it can
// safely use t.GetInplus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inplus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) GetInplus() int32 {
	if t == nil || t.Inplus == nil {
		return 0
	}
	return *t.Inplus
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp represents the /nokia-conf/configure/qos/egress-remark-policy/fc/dscp YANG schema element.
type NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp struct {
	Exceed     E_NokiaTypesQos_DscpName `path:"exceed" module:"nokia-conf"`
	InProfile  E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	Inplus     E_NokiaTypesQos_DscpName `path:"inplus" module:"nokia-conf"`
	OutProfile E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) IsYANGGoStruct() {}

// GetExceed retrieves the value of the leaf Exceed from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exceed is set, it can
// safely use t.GetExceed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exceed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) GetExceed() E_NokiaTypesQos_DscpName {
	if t == nil || t.Exceed == 0 {
		return 0
	}
	return t.Exceed
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetInplus retrieves the value of the leaf Inplus from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inplus is set, it can
// safely use t.GetInplus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inplus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) GetInplus() E_NokiaTypesQos_DscpName {
	if t == nil || t.Inplus == 0 {
		return 0
	}
	return t.Inplus
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp represents the /nokia-conf/configure/qos/egress-remark-policy/fc/lsp-exp YANG schema element.
type NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp struct {
	Exceed     *int32 `path:"exceed" module:"nokia-conf"`
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	Inplus     *int32 `path:"inplus" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) IsYANGGoStruct() {}

// GetExceed retrieves the value of the leaf Exceed from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exceed is set, it can
// safely use t.GetExceed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exceed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) GetExceed() int32 {
	if t == nil || t.Exceed == nil {
		return 0
	}
	return *t.Exceed
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetInplus retrieves the value of the leaf Inplus from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inplus is set, it can
// safely use t.GetInplus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inplus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) GetInplus() int32 {
	if t == nil || t.Inplus == nil {
		return 0
	}
	return *t.Inplus
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp.
func (*NokiaConf_Configure_Qos_EgressRemarkPolicy_Fc_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap represents the /nokia-conf/configure/qos/fc-dot1p-map YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcDot1PMap_Fc `path:"fc" module:"nokia-conf"`
	FcDot1PMapName     *string                                                            `path:"fc-dot1p-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_FcDot1PMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_FcDot1PMap_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcDot1PMap_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_FcDot1PMap_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_FcDot1PMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_FcDot1PMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_FcDot1PMap_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_FcDot1PMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_FcDot1PMap_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_FcDot1PMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_FcDot1PMap_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_FcDot1PMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_FcDot1PMap_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) AppendFc(v *NokiaConf_Configure_Qos_FcDot1PMap_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcDot1PMap_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_FcDot1PMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_FcDot1PMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcDot1PMapName retrieves the value of the leaf FcDot1PMapName from the NokiaConf_Configure_Qos_FcDot1PMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDot1PMapName is set, it can
// safely use t.GetFcDot1PMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDot1PMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) GetFcDot1PMapName() string {
	if t == nil || t.FcDot1PMapName == nil {
		return ""
	}
	return *t.FcDot1PMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_FcDot1PMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcDot1PMapName == nil {
		return nil, fmt.Errorf("nil value for key FcDot1PMapName")
	}

	return map[string]interface{}{
		"fc-dot1p-map-name": *t.FcDot1PMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap.
func (*NokiaConf_Configure_Qos_FcDot1PMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap_Fc represents the /nokia-conf/configure/qos/fc-dot1p-map/fc YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap_Fc struct {
	ApplyGroups        []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	DeMark             *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark      `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	DeMarkInner        *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner `path:"de-mark-inner" module:"nokia-conf" yangPresence:"true"`
	DeMarkOuter        *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter `path:"de-mark-outer" module:"nokia-conf" yangPresence:"true"`
	Dot1P              *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P       `path:"dot1p" module:"nokia-conf"`
	Dot1PInner         *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner  `path:"dot1p-inner" module:"nokia-conf"`
	Dot1POuter         *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter  `path:"dot1p-outer" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                            `path:"fc-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreateDeMarkInner retrieves the value of the DeMarkInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetOrCreateDeMarkInner() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner {
	if t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	t.DeMarkInner = &NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner{}
	return t.DeMarkInner
}

// GetOrCreateDeMarkOuter retrieves the value of the DeMarkOuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetOrCreateDeMarkOuter() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter {
	if t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	t.DeMarkOuter = &NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter{}
	return t.DeMarkOuter
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetOrCreateDot1P() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDot1PInner retrieves the value of the Dot1PInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetOrCreateDot1PInner() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner {
	if t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	t.Dot1PInner = &NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner{}
	return t.Dot1PInner
}

// GetOrCreateDot1POuter retrieves the value of the Dot1POuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetOrCreateDot1POuter() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter {
	if t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	t.Dot1POuter = &NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter{}
	return t.Dot1POuter
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Qos_FcDot1PMap_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetDeMark() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetDeMarkInner returns the value of the DeMarkInner struct pointer
// from NokiaConf_Configure_Qos_FcDot1PMap_Fc. If the receiver or the field DeMarkInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetDeMarkInner() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner {
	if t != nil && t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	return nil
}

// GetDeMarkOuter returns the value of the DeMarkOuter struct pointer
// from NokiaConf_Configure_Qos_FcDot1PMap_Fc. If the receiver or the field DeMarkOuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetDeMarkOuter() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter {
	if t != nil && t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Qos_FcDot1PMap_Fc. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetDot1P() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDot1PInner returns the value of the Dot1PInner struct pointer
// from NokiaConf_Configure_Qos_FcDot1PMap_Fc. If the receiver or the field Dot1PInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetDot1PInner() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner {
	if t != nil && t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	return nil
}

// GetDot1POuter returns the value of the Dot1POuter struct pointer
// from NokiaConf_Configure_Qos_FcDot1PMap_Fc. If the receiver or the field Dot1POuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetDot1POuter() *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter {
	if t != nil && t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_FcDot1PMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_FcDot1PMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_FcDot1PMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.DeMarkInner.PopulateDefaults()
	t.DeMarkOuter.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.Dot1PInner.PopulateDefaults()
	t.Dot1POuter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_FcDot1PMap_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap_Fc.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark represents the /nokia-conf/configure/qos/fc-dot1p-map/fc/de-mark YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner represents the /nokia-conf/configure/qos/fc-dot1p-map/fc/de-mark-inner YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter represents the /nokia-conf/configure/qos/fc-dot1p-map/fc/de-mark-outer YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_DeMarkOuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P represents the /nokia-conf/configure/qos/fc-dot1p-map/fc/dot1p YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner represents the /nokia-conf/configure/qos/fc-dot1p-map/fc/dot1p-inner YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1PInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter represents the /nokia-conf/configure/qos/fc-dot1p-map/fc/dot1p-outer YANG schema element.
type NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter.
func (*NokiaConf_Configure_Qos_FcDot1PMap_Fc_Dot1POuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDscpMap represents the /nokia-conf/configure/qos/fc-dscp-map YANG schema element.
type NokiaConf_Configure_Qos_FcDscpMap struct {
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcDscpMap_Fc `path:"fc" module:"nokia-conf"`
	FcDscpMapName      *string                                                           `path:"fc-dscp-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDscpMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDscpMap) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_FcDscpMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_FcDscpMap) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_FcDscpMap_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcDscpMap_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_FcDscpMap_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_FcDscpMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_FcDscpMap) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_FcDscpMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_FcDscpMap) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_FcDscpMap_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_FcDscpMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_FcDscpMap) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_FcDscpMap_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_FcDscpMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_FcDscpMap) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_FcDscpMap_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_FcDscpMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_FcDscpMap_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_FcDscpMap) AppendFc(v *NokiaConf_Configure_Qos_FcDscpMap_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcDscpMap_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_FcDscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_FcDscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcDscpMapName retrieves the value of the leaf FcDscpMapName from the NokiaConf_Configure_Qos_FcDscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcDscpMapName is set, it can
// safely use t.GetFcDscpMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcDscpMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap) GetFcDscpMapName() string {
	if t == nil || t.FcDscpMapName == nil {
		return ""
	}
	return *t.FcDscpMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDscpMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDscpMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_FcDscpMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_FcDscpMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcDscpMapName == nil {
		return nil, fmt.Errorf("nil value for key FcDscpMapName")
	}

	return map[string]interface{}{
		"fc-dscp-map-name": *t.FcDscpMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDscpMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDscpMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDscpMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDscpMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDscpMap.
func (*NokiaConf_Configure_Qos_FcDscpMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDscpMap_Fc represents the /nokia-conf/configure/qos/fc-dscp-map/fc YANG schema element.
type NokiaConf_Configure_Qos_FcDscpMap_Fc struct {
	ApplyGroups        []string                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Dscp               *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp `path:"dscp" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                    `path:"fc-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDscpMap_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDscpMap_Fc) IsYANGGoStruct() {}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) GetOrCreateDscp() *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp{}
	return t.Dscp
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Qos_FcDscpMap_Fc. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) GetDscp() *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_FcDscpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_FcDscpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_FcDscpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDscpMap_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dscp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_FcDscpMap_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDscpMap_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDscpMap_Fc.
func (*NokiaConf_Configure_Qos_FcDscpMap_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp represents the /nokia-conf/configure/qos/fc-dscp-map/fc/dscp YANG schema element.
type NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp struct {
	InProfile  E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	OutProfile E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp.
func (*NokiaConf_Configure_Qos_FcDscpMap_Fc_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcLspExpMap represents the /nokia-conf/configure/qos/fc-lsp-exp-map YANG schema element.
type NokiaConf_Configure_Qos_FcLspExpMap struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcLspExpMap_Fc `path:"fc" module:"nokia-conf"`
	FcLspExpMapName    *string                                                             `path:"fc-lsp-exp-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcLspExpMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcLspExpMap) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_FcLspExpMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_FcLspExpMap_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcLspExpMap_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_FcLspExpMap_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_FcLspExpMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_FcLspExpMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_FcLspExpMap_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_FcLspExpMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_FcLspExpMap_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_FcLspExpMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_FcLspExpMap_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_FcLspExpMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_FcLspExpMap_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) AppendFc(v *NokiaConf_Configure_Qos_FcLspExpMap_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_FcLspExpMap_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_FcLspExpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_FcLspExpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcLspExpMapName retrieves the value of the leaf FcLspExpMapName from the NokiaConf_Configure_Qos_FcLspExpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcLspExpMapName is set, it can
// safely use t.GetFcLspExpMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcLspExpMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) GetFcLspExpMapName() string {
	if t == nil || t.FcLspExpMapName == nil {
		return ""
	}
	return *t.FcLspExpMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcLspExpMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_FcLspExpMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcLspExpMapName == nil {
		return nil, fmt.Errorf("nil value for key FcLspExpMapName")
	}

	return map[string]interface{}{
		"fc-lsp-exp-map-name": *t.FcLspExpMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcLspExpMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcLspExpMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcLspExpMap.
func (*NokiaConf_Configure_Qos_FcLspExpMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcLspExpMap_Fc represents the /nokia-conf/configure/qos/fc-lsp-exp-map/fc YANG schema element.
type NokiaConf_Configure_Qos_FcLspExpMap_Fc struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                        `path:"fc-name" module:"nokia-conf"`
	LspExp             *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp `path:"lsp-exp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcLspExpMap_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcLspExpMap_Fc) IsYANGGoStruct() {}

// GetOrCreateLspExp retrieves the value of the LspExp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) GetOrCreateLspExp() *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp {
	if t.LspExp != nil {
		return t.LspExp
	}
	t.LspExp = &NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp{}
	return t.LspExp
}

// GetLspExp returns the value of the LspExp struct pointer
// from NokiaConf_Configure_Qos_FcLspExpMap_Fc. If the receiver or the field LspExp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) GetLspExp() *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp {
	if t != nil && t.LspExp != nil {
		return t.LspExp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_FcLspExpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_FcLspExpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_FcLspExpMap_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcLspExpMap_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LspExp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_FcLspExpMap_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcLspExpMap_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcLspExpMap_Fc.
func (*NokiaConf_Configure_Qos_FcLspExpMap_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp represents the /nokia-conf/configure/qos/fc-lsp-exp-map/fc/lsp-exp YANG schema element.
type NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp.
func (*NokiaConf_Configure_Qos_FcLspExpMap_Fc_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FpResourcePolicy represents the /nokia-conf/configure/qos/fp-resource-policy YANG schema element.
type NokiaConf_Configure_Qos_FpResourcePolicy struct {
	AggregateShapers     *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers `path:"aggregate-shapers" module:"nokia-conf"`
	ApplyGroups          []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                    `path:"description" module:"nokia-conf"`
	FpResourcePolicyName *string                                                    `path:"fp-resource-policy-name" module:"nokia-conf"`
	Ports                *NokiaConf_Configure_Qos_FpResourcePolicy_Ports            `path:"ports" module:"nokia-conf"`
	Queues               *NokiaConf_Configure_Qos_FpResourcePolicy_Queues           `path:"queues" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FpResourcePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FpResourcePolicy) IsYANGGoStruct() {}

// GetOrCreateAggregateShapers retrieves the value of the AggregateShapers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetOrCreateAggregateShapers() *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers {
	if t.AggregateShapers != nil {
		return t.AggregateShapers
	}
	t.AggregateShapers = &NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers{}
	return t.AggregateShapers
}

// GetOrCreatePorts retrieves the value of the Ports field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetOrCreatePorts() *NokiaConf_Configure_Qos_FpResourcePolicy_Ports {
	if t.Ports != nil {
		return t.Ports
	}
	t.Ports = &NokiaConf_Configure_Qos_FpResourcePolicy_Ports{}
	return t.Ports
}

// GetOrCreateQueues retrieves the value of the Queues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetOrCreateQueues() *NokiaConf_Configure_Qos_FpResourcePolicy_Queues {
	if t.Queues != nil {
		return t.Queues
	}
	t.Queues = &NokiaConf_Configure_Qos_FpResourcePolicy_Queues{}
	return t.Queues
}

// GetAggregateShapers returns the value of the AggregateShapers struct pointer
// from NokiaConf_Configure_Qos_FpResourcePolicy. If the receiver or the field AggregateShapers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetAggregateShapers() *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers {
	if t != nil && t.AggregateShapers != nil {
		return t.AggregateShapers
	}
	return nil
}

// GetPorts returns the value of the Ports struct pointer
// from NokiaConf_Configure_Qos_FpResourcePolicy. If the receiver or the field Ports is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetPorts() *NokiaConf_Configure_Qos_FpResourcePolicy_Ports {
	if t != nil && t.Ports != nil {
		return t.Ports
	}
	return nil
}

// GetQueues returns the value of the Queues struct pointer
// from NokiaConf_Configure_Qos_FpResourcePolicy. If the receiver or the field Queues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetQueues() *NokiaConf_Configure_Qos_FpResourcePolicy_Queues {
	if t != nil && t.Queues != nil {
		return t.Queues
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_FpResourcePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_FpResourcePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_FpResourcePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFpResourcePolicyName retrieves the value of the leaf FpResourcePolicyName from the NokiaConf_Configure_Qos_FpResourcePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpResourcePolicyName is set, it can
// safely use t.GetFpResourcePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpResourcePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) GetFpResourcePolicyName() string {
	if t == nil || t.FpResourcePolicyName == nil {
		return ""
	}
	return *t.FpResourcePolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FpResourcePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggregateShapers.PopulateDefaults()
	t.Ports.PopulateDefaults()
	t.Queues.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_FpResourcePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FpResourcePolicyName == nil {
		return nil, fmt.Errorf("nil value for key FpResourcePolicyName")
	}

	return map[string]interface{}{
		"fp-resource-policy-name": *t.FpResourcePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FpResourcePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FpResourcePolicy.
func (*NokiaConf_Configure_Qos_FpResourcePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers represents the /nokia-conf/configure/qos/fp-resource-policy/aggregate-shapers YANG schema element.
type NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers struct {
	AutoCreation *bool                                                                   `path:"auto-creation" module:"nokia-conf"`
	HwAggShapers *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers `path:"hw-agg-shapers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) IsYANGGoStruct() {}

// GetOrCreateHwAggShapers retrieves the value of the HwAggShapers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) GetOrCreateHwAggShapers() *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers {
	if t.HwAggShapers != nil {
		return t.HwAggShapers
	}
	t.HwAggShapers = &NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers{}
	return t.HwAggShapers
}

// GetHwAggShapers returns the value of the HwAggShapers struct pointer
// from NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers. If the receiver or the field HwAggShapers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) GetHwAggShapers() *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers {
	if t != nil && t.HwAggShapers != nil {
		return t.HwAggShapers
	}
	return nil
}

// GetAutoCreation retrieves the value of the leaf AutoCreation from the NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoCreation is set, it can
// safely use t.GetAutoCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) GetAutoCreation() bool {
	if t == nil || t.AutoCreation == nil {
		return false
	}
	return *t.AutoCreation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoCreation == nil {
		var v bool = false
		t.AutoCreation = &v
	}
	t.HwAggShapers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers represents the /nokia-conf/configure/qos/fp-resource-policy/aggregate-shapers/hw-agg-shapers YANG schema element.
type NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers struct {
	Subscribers *bool `path:"subscribers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) IsYANGGoStruct() {}

// GetSubscribers retrieves the value of the leaf Subscribers from the NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subscribers is set, it can
// safely use t.GetSubscribers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subscribers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) GetSubscribers() bool {
	if t == nil || t.Subscribers == nil {
		return false
	}
	return *t.Subscribers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Subscribers == nil {
		var v bool = false
		t.Subscribers = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_AggregateShapers_HwAggShapers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FpResourcePolicy_Ports represents the /nokia-conf/configure/qos/fp-resource-policy/ports YANG schema element.
type NokiaConf_Configure_Qos_FpResourcePolicy_Ports struct {
	HqosMode E_NokiaConf_Configure_Qos_FpResourcePolicy_Ports_HqosMode `path:"hqos-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FpResourcePolicy_Ports implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_Ports) IsYANGGoStruct() {}

// GetHqosMode retrieves the value of the leaf HqosMode from the NokiaConf_Configure_Qos_FpResourcePolicy_Ports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HqosMode is set, it can
// safely use t.GetHqosMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HqosMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Ports) GetHqosMode() E_NokiaConf_Configure_Qos_FpResourcePolicy_Ports_HqosMode {
	if t == nil || t.HqosMode == 0 {
		return NokiaConf_Configure_Qos_FpResourcePolicy_Ports_HqosMode_port_scheduler
	}
	return t.HqosMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FpResourcePolicy_Ports
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Ports) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HqosMode == 0 {
		t.HqosMode = NokiaConf_Configure_Qos_FpResourcePolicy_Ports_HqosMode_port_scheduler
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Ports) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FpResourcePolicy_Ports"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Ports) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Ports) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FpResourcePolicy_Ports.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_Ports) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_FpResourcePolicy_Queues represents the /nokia-conf/configure/qos/fp-resource-policy/queues YANG schema element.
type NokiaConf_Configure_Qos_FpResourcePolicy_Queues struct {
	IngressPercentOfTotal *float64 `path:"ingress-percent-of-total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_FpResourcePolicy_Queues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_Queues) IsYANGGoStruct() {}

// GetIngressPercentOfTotal retrieves the value of the leaf IngressPercentOfTotal from the NokiaConf_Configure_Qos_FpResourcePolicy_Queues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressPercentOfTotal is set, it can
// safely use t.GetIngressPercentOfTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressPercentOfTotal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Queues) GetIngressPercentOfTotal() float64 {
	if t == nil || t.IngressPercentOfTotal == nil {
		return 0.0
	}
	return *t.IngressPercentOfTotal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_FpResourcePolicy_Queues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Queues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Queues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_FpResourcePolicy_Queues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Queues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_FpResourcePolicy_Queues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_FpResourcePolicy_Queues.
func (*NokiaConf_Configure_Qos_FpResourcePolicy_Queues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsAttachmentPolicy represents the /nokia-conf/configure/qos/hs-attachment-policy YANG schema element.
type NokiaConf_Configure_Qos_HsAttachmentPolicy struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                         `path:"description" module:"nokia-conf"`
	LowBurstMaxClass   *uint32                                                         `path:"low-burst-max-class" module:"nokia-conf"`
	Name               *string                                                         `path:"name" module:"nokia-conf"`
	Queue              map[uint32]*NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue    `path:"queue" module:"nokia-conf"`
	WrrGroup           map[uint32]*NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup `path:"wrr-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsAttachmentPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsAttachmentPolicy) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_HsAttachmentPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) NewQueue(QueueId uint32) (*NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[uint32]*NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_HsAttachmentPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) RenameQueue(oldK, newK uint32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsAttachmentPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetOrCreateQueue(QueueId uint32) *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_HsAttachmentPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetQueue(QueueId uint32) *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsAttachmentPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) DeleteQueue(QueueId uint32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_HsAttachmentPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) AppendQueue(v *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[uint32]*NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewWrrGroup creates a new entry in the WrrGroup list of the
// NokiaConf_Configure_Qos_HsAttachmentPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) NewWrrGroup(WrrGroupId uint32) (*NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrGroup == nil {
		t.WrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup)
	}

	key := WrrGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WrrGroup", key)
	}

	t.WrrGroup[key] = &NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup{
		WrrGroupId: &WrrGroupId,
	}

	return t.WrrGroup[key], nil
}

// RenameWrrGroup renames an entry in the list WrrGroup within
// the NokiaConf_Configure_Qos_HsAttachmentPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) RenameWrrGroup(oldK, newK uint32) error {
	if _, ok := t.WrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in WrrGroup", newK)
	}

	e, ok := t.WrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WrrGroup", oldK)
	}
	e.WrrGroupId = &newK

	t.WrrGroup[newK] = e
	delete(t.WrrGroup, oldK)
	return nil
}

// GetOrCreateWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsAttachmentPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetOrCreateWrrGroup(WrrGroupId uint32) *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup {

	key := WrrGroupId

	if v, ok := t.WrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWrrGroup(WrrGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetWrrGroup retrieves the value with the specified key from
// the WrrGroup map field of NokiaConf_Configure_Qos_HsAttachmentPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetWrrGroup(WrrGroupId uint32) *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup {

	if t == nil {
		return nil
	}

	key := WrrGroupId

	if lm, ok := t.WrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsAttachmentPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) DeleteWrrGroup(WrrGroupId uint32) {
	key := WrrGroupId

	delete(t.WrrGroup, key)
}

// AppendWrrGroup appends the supplied NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup struct to the
// list WrrGroup of NokiaConf_Configure_Qos_HsAttachmentPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) AppendWrrGroup(v *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) error {
	if v.WrrGroupId == nil {
		return fmt.Errorf("invalid nil key received for WrrGroupId")
	}

	key := *v.WrrGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrGroup == nil {
		t.WrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup)
	}

	if _, ok := t.WrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list WrrGroup %v", key)
	}

	t.WrrGroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 6
	}
	return *t.LowBurstMaxClass
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_HsAttachmentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsAttachmentPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 6
		t.LowBurstMaxClass = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.WrrGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsAttachmentPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsAttachmentPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsAttachmentPolicy.
func (*NokiaConf_Configure_Qos_HsAttachmentPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue represents the /nokia-conf/configure/qos/hs-attachment-policy/queue YANG schema element.
type NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue struct {
	ApplyGroups        []string  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string  `path:"apply-groups-exclude" module:"nokia-conf"`
	QueueId            *uint32   `path:"queue-id" module:"nokia-conf"`
	SchedClass         *int32    `path:"sched-class" module:"nokia-conf"`
	Unattached         YANGEmpty `path:"unattached" module:"nokia-conf"`
	WrrGroup           *int32    `path:"wrr-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) GetQueueId() uint32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetSchedClass retrieves the value of the leaf SchedClass from the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClass is set, it can
// safely use t.GetSchedClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) GetSchedClass() int32 {
	if t == nil || t.SchedClass == nil {
		return 0
	}
	return *t.SchedClass
}

// GetUnattached retrieves the value of the leaf Unattached from the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unattached is set, it can
// safely use t.GetUnattached() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unattached == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) GetUnattached() YANGEmpty {
	if t == nil || t.Unattached == false {
		return false
	}
	return t.Unattached
}

// GetWrrGroup retrieves the value of the leaf WrrGroup from the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrGroup is set, it can
// safely use t.GetWrrGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) GetWrrGroup() int32 {
	if t == nil || t.WrrGroup == nil {
		return 0
	}
	return *t.WrrGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue.
func (*NokiaConf_Configure_Qos_HsAttachmentPolicy_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup represents the /nokia-conf/configure/qos/hs-attachment-policy/wrr-group YANG schema element.
type NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup struct {
	ApplyGroups        []string  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string  `path:"apply-groups-exclude" module:"nokia-conf"`
	SchedClass         *int32    `path:"sched-class" module:"nokia-conf"`
	Unattached         YANGEmpty `path:"unattached" module:"nokia-conf"`
	WrrGroupId         *uint32   `path:"wrr-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedClass retrieves the value of the leaf SchedClass from the NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClass is set, it can
// safely use t.GetSchedClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) GetSchedClass() int32 {
	if t == nil || t.SchedClass == nil {
		return 0
	}
	return *t.SchedClass
}

// GetUnattached retrieves the value of the leaf Unattached from the NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unattached is set, it can
// safely use t.GetUnattached() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unattached == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) GetUnattached() YANGEmpty {
	if t == nil || t.Unattached == false {
		return false
	}
	return t.Unattached
}

// GetWrrGroupId retrieves the value of the leaf WrrGroupId from the NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrGroupId is set, it can
// safely use t.GetWrrGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) GetWrrGroupId() uint32 {
	if t == nil || t.WrrGroupId == nil {
		return 0
	}
	return *t.WrrGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.WrrGroupId == nil {
		return nil, fmt.Errorf("nil value for key WrrGroupId")
	}

	return map[string]interface{}{
		"wrr-group-id": *t.WrrGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup.
func (*NokiaConf_Configure_Qos_HsAttachmentPolicy_WrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPoolPolicy represents the /nokia-conf/configure/qos/hs-pool-policy YANG schema element.
type NokiaConf_Configure_Qos_HsPoolPolicy struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                        `path:"description" module:"nokia-conf"`
	MidTier            *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier  `path:"mid-tier" module:"nokia-conf"`
	Name               *string                                        `path:"name" module:"nokia-conf"`
	RootTier           *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier `path:"root-tier" module:"nokia-conf"`
	SystemReserve      *float64                                       `path:"system-reserve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPoolPolicy) IsYANGGoStruct() {}

// GetOrCreateMidTier retrieves the value of the MidTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetOrCreateMidTier() *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier {
	if t.MidTier != nil {
		return t.MidTier
	}
	t.MidTier = &NokiaConf_Configure_Qos_HsPoolPolicy_MidTier{}
	return t.MidTier
}

// GetOrCreateRootTier retrieves the value of the RootTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetOrCreateRootTier() *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier {
	if t.RootTier != nil {
		return t.RootTier
	}
	t.RootTier = &NokiaConf_Configure_Qos_HsPoolPolicy_RootTier{}
	return t.RootTier
}

// GetMidTier returns the value of the MidTier struct pointer
// from NokiaConf_Configure_Qos_HsPoolPolicy. If the receiver or the field MidTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetMidTier() *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier {
	if t != nil && t.MidTier != nil {
		return t.MidTier
	}
	return nil
}

// GetRootTier returns the value of the RootTier struct pointer
// from NokiaConf_Configure_Qos_HsPoolPolicy. If the receiver or the field RootTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetRootTier() *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier {
	if t != nil && t.RootTier != nil {
		return t.RootTier
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSystemReserve retrieves the value of the leaf SystemReserve from the NokiaConf_Configure_Qos_HsPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemReserve is set, it can
// safely use t.GetSystemReserve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemReserve == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) GetSystemReserve() float64 {
	if t == nil || t.SystemReserve == nil {
		return 5.00
	}
	return *t.SystemReserve
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SystemReserve == nil {
		var v float64 = 5.00
		t.SystemReserve = &v
	}
	t.MidTier.PopulateDefaults()
	t.RootTier.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsPoolPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPoolPolicy.
func (*NokiaConf_Configure_Qos_HsPoolPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPoolPolicy_MidTier represents the /nokia-conf/configure/qos/hs-pool-policy/mid-tier YANG schema element.
type NokiaConf_Configure_Qos_HsPoolPolicy_MidTier struct {
	MidPool map[uint32]*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool `path:"mid-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPoolPolicy_MidTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) IsYANGGoStruct() {}

// NewMidPool creates a new entry in the MidPool list of the
// NokiaConf_Configure_Qos_HsPoolPolicy_MidTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) NewMidPool(MidPoolId uint32) (*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPool == nil {
		t.MidPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool)
	}

	key := MidPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MidPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MidPool", key)
	}

	t.MidPool[key] = &NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool{
		MidPoolId: &MidPoolId,
	}

	return t.MidPool[key], nil
}

// RenameMidPool renames an entry in the list MidPool within
// the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) RenameMidPool(oldK, newK uint32) error {
	if _, ok := t.MidPool[newK]; ok {
		return fmt.Errorf("key %v already exists in MidPool", newK)
	}

	e, ok := t.MidPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MidPool", oldK)
	}
	e.MidPoolId = &newK

	t.MidPool[newK] = e
	delete(t.MidPool, oldK)
	return nil
}

// GetOrCreateMidPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPoolPolicy_MidTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) GetOrCreateMidPool(MidPoolId uint32) *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool {

	key := MidPoolId

	if v, ok := t.MidPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMidPool(MidPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMidPool got unexpected error: %v", err))
	}
	return v
}

// GetMidPool retrieves the value with the specified key from
// the MidPool map field of NokiaConf_Configure_Qos_HsPoolPolicy_MidTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) GetMidPool(MidPoolId uint32) *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool {

	if t == nil {
		return nil
	}

	key := MidPoolId

	if lm, ok := t.MidPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteMidPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPoolPolicy_MidTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) DeleteMidPool(MidPoolId uint32) {
	key := MidPoolId

	delete(t.MidPool, key)
}

// AppendMidPool appends the supplied NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool struct to the
// list MidPool of NokiaConf_Configure_Qos_HsPoolPolicy_MidTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) AppendMidPool(v *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) error {
	if v.MidPoolId == nil {
		return fmt.Errorf("invalid nil key received for MidPoolId")
	}

	key := *v.MidPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPool == nil {
		t.MidPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool)
	}

	if _, ok := t.MidPool[key]; ok {
		return fmt.Errorf("duplicate key for list MidPool %v", key)
	}

	t.MidPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MidPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPoolPolicy_MidTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPoolPolicy_MidTier.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool represents the /nokia-conf/configure/qos/hs-pool-policy/mid-tier/mid-pool YANG schema element.
type NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool struct {
	AllocationPercent            *float64                                                             `path:"allocation-percent" module:"nokia-conf"`
	ApplyGroups                  []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	MidPoolId                    *uint32                                                              `path:"mid-pool-id" module:"nokia-conf"`
	ParentRootPool               *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool `path:"parent-root-pool" module:"nokia-conf"`
	PortBwOversubscriptionFactor *uint32                                                              `path:"port-bw-oversubscription-factor" module:"nokia-conf"`
	SlopePolicy                  *string                                                              `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) IsYANGGoStruct() {}

// GetOrCreateParentRootPool retrieves the value of the ParentRootPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetOrCreateParentRootPool() *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool {
	if t.ParentRootPool != nil {
		return t.ParentRootPool
	}
	t.ParentRootPool = &NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool{}
	return t.ParentRootPool
}

// GetParentRootPool returns the value of the ParentRootPool struct pointer
// from NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool. If the receiver or the field ParentRootPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetParentRootPool() *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool {
	if t != nil && t.ParentRootPool != nil {
		return t.ParentRootPool
	}
	return nil
}

// GetAllocationPercent retrieves the value of the leaf AllocationPercent from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationPercent is set, it can
// safely use t.GetAllocationPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetAllocationPercent() float64 {
	if t == nil || t.AllocationPercent == nil {
		return 0.0
	}
	return *t.AllocationPercent
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMidPoolId retrieves the value of the leaf MidPoolId from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MidPoolId is set, it can
// safely use t.GetMidPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MidPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetMidPoolId() uint32 {
	if t == nil || t.MidPoolId == nil {
		return 0
	}
	return *t.MidPoolId
}

// GetPortBwOversubscriptionFactor retrieves the value of the leaf PortBwOversubscriptionFactor from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBwOversubscriptionFactor is set, it can
// safely use t.GetPortBwOversubscriptionFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBwOversubscriptionFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetPortBwOversubscriptionFactor() uint32 {
	if t == nil || t.PortBwOversubscriptionFactor == nil {
		return 1
	}
	return *t.PortBwOversubscriptionFactor
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortBwOversubscriptionFactor == nil {
		var v uint32 = 1
		t.PortBwOversubscriptionFactor = &v
	}
	t.ParentRootPool.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MidPoolId == nil {
		return nil, fmt.Errorf("nil value for key MidPoolId")
	}

	return map[string]interface{}{
		"mid-pool-id": *t.MidPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool represents the /nokia-conf/configure/qos/hs-pool-policy/mid-tier/mid-pool/parent-root-pool YANG schema element.
type NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool struct {
	None   YANGEmpty `path:"none" module:"nokia-conf"`
	PoolId *uint32   `path:"pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) IsYANGGoStruct() {}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPoolId retrieves the value of the leaf PoolId from the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolId is set, it can
// safely use t.GetPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) GetPoolId() uint32 {
	if t == nil || t.PoolId == nil {
		return 0
	}
	return *t.PoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_MidTier_MidPool_ParentRootPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPoolPolicy_RootTier represents the /nokia-conf/configure/qos/hs-pool-policy/root-tier YANG schema element.
type NokiaConf_Configure_Qos_HsPoolPolicy_RootTier struct {
	RootPool map[uint32]*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool `path:"root-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPoolPolicy_RootTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) IsYANGGoStruct() {}

// NewRootPool creates a new entry in the RootPool list of the
// NokiaConf_Configure_Qos_HsPoolPolicy_RootTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) NewRootPool(RootPoolId uint32) (*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool)
	}

	key := RootPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RootPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RootPool", key)
	}

	t.RootPool[key] = &NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool{
		RootPoolId: &RootPoolId,
	}

	return t.RootPool[key], nil
}

// RenameRootPool renames an entry in the list RootPool within
// the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) RenameRootPool(oldK, newK uint32) error {
	if _, ok := t.RootPool[newK]; ok {
		return fmt.Errorf("key %v already exists in RootPool", newK)
	}

	e, ok := t.RootPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RootPool", oldK)
	}
	e.RootPoolId = &newK

	t.RootPool[newK] = e
	delete(t.RootPool, oldK)
	return nil
}

// GetOrCreateRootPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPoolPolicy_RootTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) GetOrCreateRootPool(RootPoolId uint32) *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool {

	key := RootPoolId

	if v, ok := t.RootPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRootPool(RootPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRootPool got unexpected error: %v", err))
	}
	return v
}

// GetRootPool retrieves the value with the specified key from
// the RootPool map field of NokiaConf_Configure_Qos_HsPoolPolicy_RootTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) GetRootPool(RootPoolId uint32) *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool {

	if t == nil {
		return nil
	}

	key := RootPoolId

	if lm, ok := t.RootPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteRootPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPoolPolicy_RootTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) DeleteRootPool(RootPoolId uint32) {
	key := RootPoolId

	delete(t.RootPool, key)
}

// AppendRootPool appends the supplied NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool struct to the
// list RootPool of NokiaConf_Configure_Qos_HsPoolPolicy_RootTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) AppendRootPool(v *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) error {
	if v.RootPoolId == nil {
		return fmt.Errorf("invalid nil key received for RootPoolId")
	}

	key := *v.RootPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool)
	}

	if _, ok := t.RootPool[key]; ok {
		return fmt.Errorf("duplicate key for list RootPool %v", key)
	}

	t.RootPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RootPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPoolPolicy_RootTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPoolPolicy_RootTier.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool represents the /nokia-conf/configure/qos/hs-pool-policy/root-tier/root-pool YANG schema element.
type NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool struct {
	AllocationWeight   *uint32  `path:"allocation-weight" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	RootPoolId         *uint32  `path:"root-pool-id" module:"nokia-conf"`
	SlopePolicy        *string  `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) IsYANGGoStruct() {}

// GetAllocationWeight retrieves the value of the leaf AllocationWeight from the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationWeight is set, it can
// safely use t.GetAllocationWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) GetAllocationWeight() uint32 {
	if t == nil || t.AllocationWeight == nil {
		return 0
	}
	return *t.AllocationWeight
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRootPoolId retrieves the value of the leaf RootPoolId from the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPoolId is set, it can
// safely use t.GetRootPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) GetRootPoolId() uint32 {
	if t == nil || t.RootPoolId == nil {
		return 0
	}
	return *t.RootPoolId
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RootPoolId == nil {
		return nil, fmt.Errorf("nil value for key RootPoolId")
	}

	return map[string]interface{}{
		"root-pool-id": *t.RootPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool.
func (*NokiaConf_Configure_Qos_HsPoolPolicy_RootTier_RootPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy represents the /nokia-conf/configure/qos/hs-port-pool-policy YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy struct {
	AltPortClassPools  *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools `path:"alt-port-class-pools" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                     `path:"description" module:"nokia-conf"`
	Name               *string                                                     `path:"name" module:"nokia-conf"`
	StdPortClassPools  *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools `path:"std-port-class-pools" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy) IsYANGGoStruct() {}

// GetOrCreateAltPortClassPools retrieves the value of the AltPortClassPools field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetOrCreateAltPortClassPools() *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools {
	if t.AltPortClassPools != nil {
		return t.AltPortClassPools
	}
	t.AltPortClassPools = &NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools{}
	return t.AltPortClassPools
}

// GetOrCreateStdPortClassPools retrieves the value of the StdPortClassPools field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetOrCreateStdPortClassPools() *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools {
	if t.StdPortClassPools != nil {
		return t.StdPortClassPools
	}
	t.StdPortClassPools = &NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools{}
	return t.StdPortClassPools
}

// GetAltPortClassPools returns the value of the AltPortClassPools struct pointer
// from NokiaConf_Configure_Qos_HsPortPoolPolicy. If the receiver or the field AltPortClassPools is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetAltPortClassPools() *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools {
	if t != nil && t.AltPortClassPools != nil {
		return t.AltPortClassPools
	}
	return nil
}

// GetStdPortClassPools returns the value of the StdPortClassPools struct pointer
// from NokiaConf_Configure_Qos_HsPortPoolPolicy. If the receiver or the field StdPortClassPools is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetStdPortClassPools() *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools {
	if t != nil && t.StdPortClassPools != nil {
		return t.StdPortClassPools
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsPortPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsPortPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsPortPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_HsPortPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AltPortClassPools.PopulateDefaults()
	t.StdPortClassPools.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsPortPoolPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools represents the /nokia-conf/configure/qos/hs-port-pool-policy/alt-port-class-pools YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools struct {
	ClassPool map[uint32]*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool `path:"class-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) IsYANGGoStruct() {}

// NewClassPool creates a new entry in the ClassPool list of the
// NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) NewClassPool(AltClassPoolId uint32) (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool)
	}

	key := AltClassPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClassPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClassPool", key)
	}

	t.ClassPool[key] = &NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool{
		AltClassPoolId: &AltClassPoolId,
	}

	return t.ClassPool[key], nil
}

// RenameClassPool renames an entry in the list ClassPool within
// the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) RenameClassPool(oldK, newK uint32) error {
	if _, ok := t.ClassPool[newK]; ok {
		return fmt.Errorf("key %v already exists in ClassPool", newK)
	}

	e, ok := t.ClassPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClassPool", oldK)
	}
	e.AltClassPoolId = &newK

	t.ClassPool[newK] = e
	delete(t.ClassPool, oldK)
	return nil
}

// GetOrCreateClassPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) GetOrCreateClassPool(AltClassPoolId uint32) *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool {

	key := AltClassPoolId

	if v, ok := t.ClassPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassPool(AltClassPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassPool got unexpected error: %v", err))
	}
	return v
}

// GetClassPool retrieves the value with the specified key from
// the ClassPool map field of NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) GetClassPool(AltClassPoolId uint32) *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool {

	if t == nil {
		return nil
	}

	key := AltClassPoolId

	if lm, ok := t.ClassPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) DeleteClassPool(AltClassPoolId uint32) {
	key := AltClassPoolId

	delete(t.ClassPool, key)
}

// AppendClassPool appends the supplied NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool struct to the
// list ClassPool of NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) AppendClassPool(v *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) error {
	if v.AltClassPoolId == nil {
		return fmt.Errorf("invalid nil key received for AltClassPoolId")
	}

	key := *v.AltClassPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool)
	}

	if _, ok := t.ClassPool[key]; ok {
		return fmt.Errorf("duplicate key for list ClassPool %v", key)
	}

	t.ClassPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ClassPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool represents the /nokia-conf/configure/qos/hs-port-pool-policy/alt-port-class-pools/class-pool YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool struct {
	Allocation         *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation    `path:"allocation" module:"nokia-conf"`
	AltClassPoolId     *uint32                                                                             `path:"alt-class-pool-id" module:"nokia-conf"`
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ParentMidPool      *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool `path:"parent-mid-pool" module:"nokia-conf"`
	SlopePolicy        *string                                                                             `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) IsYANGGoStruct() {}

// GetOrCreateAllocation retrieves the value of the Allocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetOrCreateAllocation() *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation {
	if t.Allocation != nil {
		return t.Allocation
	}
	t.Allocation = &NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation{}
	return t.Allocation
}

// GetOrCreateParentMidPool retrieves the value of the ParentMidPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetOrCreateParentMidPool() *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool {
	if t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	t.ParentMidPool = &NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool{}
	return t.ParentMidPool
}

// GetAllocation returns the value of the Allocation struct pointer
// from NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool. If the receiver or the field Allocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetAllocation() *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation {
	if t != nil && t.Allocation != nil {
		return t.Allocation
	}
	return nil
}

// GetParentMidPool returns the value of the ParentMidPool struct pointer
// from NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool. If the receiver or the field ParentMidPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetParentMidPool() *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool {
	if t != nil && t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	return nil
}

// GetAltClassPoolId retrieves the value of the leaf AltClassPoolId from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AltClassPoolId is set, it can
// safely use t.GetAltClassPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AltClassPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetAltClassPoolId() uint32 {
	if t == nil || t.AltClassPoolId == nil {
		return 0
	}
	return *t.AltClassPoolId
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Allocation.PopulateDefaults()
	t.ParentMidPool.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AltClassPoolId == nil {
		return nil, fmt.Errorf("nil value for key AltClassPoolId")
	}

	return map[string]interface{}{
		"alt-class-pool-id": *t.AltClassPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation represents the /nokia-conf/configure/qos/hs-port-pool-policy/alt-port-class-pools/class-pool/allocation YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation struct {
	ExplicitPercent *float64 `path:"explicit-percent" module:"nokia-conf"`
	PortBwWeight    *uint32  `path:"port-bw-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) IsYANGGoStruct() {
}

// GetExplicitPercent retrieves the value of the leaf ExplicitPercent from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitPercent is set, it can
// safely use t.GetExplicitPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) GetExplicitPercent() float64 {
	if t == nil || t.ExplicitPercent == nil {
		return 0.0
	}
	return *t.ExplicitPercent
}

// GetPortBwWeight retrieves the value of the leaf PortBwWeight from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBwWeight is set, it can
// safely use t.GetPortBwWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBwWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) GetPortBwWeight() uint32 {
	if t == nil || t.PortBwWeight == nil {
		return 1
	}
	return *t.PortBwWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortBwWeight == nil {
		var v uint32 = 1
		t.PortBwWeight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_Allocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool represents the /nokia-conf/configure/qos/hs-port-pool-policy/alt-port-class-pools/class-pool/parent-mid-pool YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool struct {
	None   YANGEmpty `path:"none" module:"nokia-conf"`
	PoolId *uint32   `path:"pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) IsYANGGoStruct() {
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPoolId retrieves the value of the leaf PoolId from the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolId is set, it can
// safely use t.GetPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) GetPoolId() uint32 {
	if t == nil || t.PoolId == nil {
		return 0
	}
	return *t.PoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_AltPortClassPools_ClassPool_ParentMidPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools represents the /nokia-conf/configure/qos/hs-port-pool-policy/std-port-class-pools YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools struct {
	ClassPool map[uint32]*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool `path:"class-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) IsYANGGoStruct() {}

// NewClassPool creates a new entry in the ClassPool list of the
// NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) NewClassPool(StdClassPoolId uint32) (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool)
	}

	key := StdClassPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClassPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClassPool", key)
	}

	t.ClassPool[key] = &NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool{
		StdClassPoolId: &StdClassPoolId,
	}

	return t.ClassPool[key], nil
}

// RenameClassPool renames an entry in the list ClassPool within
// the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) RenameClassPool(oldK, newK uint32) error {
	if _, ok := t.ClassPool[newK]; ok {
		return fmt.Errorf("key %v already exists in ClassPool", newK)
	}

	e, ok := t.ClassPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClassPool", oldK)
	}
	e.StdClassPoolId = &newK

	t.ClassPool[newK] = e
	delete(t.ClassPool, oldK)
	return nil
}

// GetOrCreateClassPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) GetOrCreateClassPool(StdClassPoolId uint32) *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool {

	key := StdClassPoolId

	if v, ok := t.ClassPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassPool(StdClassPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassPool got unexpected error: %v", err))
	}
	return v
}

// GetClassPool retrieves the value with the specified key from
// the ClassPool map field of NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) GetClassPool(StdClassPoolId uint32) *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool {

	if t == nil {
		return nil
	}

	key := StdClassPoolId

	if lm, ok := t.ClassPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) DeleteClassPool(StdClassPoolId uint32) {
	key := StdClassPoolId

	delete(t.ClassPool, key)
}

// AppendClassPool appends the supplied NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool struct to the
// list ClassPool of NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) AppendClassPool(v *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) error {
	if v.StdClassPoolId == nil {
		return fmt.Errorf("invalid nil key received for StdClassPoolId")
	}

	key := *v.StdClassPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[uint32]*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool)
	}

	if _, ok := t.ClassPool[key]; ok {
		return fmt.Errorf("duplicate key for list ClassPool %v", key)
	}

	t.ClassPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ClassPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool represents the /nokia-conf/configure/qos/hs-port-pool-policy/std-port-class-pools/class-pool YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool struct {
	Allocation         *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation    `path:"allocation" module:"nokia-conf"`
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ParentMidPool      *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool `path:"parent-mid-pool" module:"nokia-conf"`
	SlopePolicy        *string                                                                             `path:"slope-policy" module:"nokia-conf"`
	StdClassPoolId     *uint32                                                                             `path:"std-class-pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) IsYANGGoStruct() {}

// GetOrCreateAllocation retrieves the value of the Allocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetOrCreateAllocation() *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation {
	if t.Allocation != nil {
		return t.Allocation
	}
	t.Allocation = &NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation{}
	return t.Allocation
}

// GetOrCreateParentMidPool retrieves the value of the ParentMidPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetOrCreateParentMidPool() *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool {
	if t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	t.ParentMidPool = &NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool{}
	return t.ParentMidPool
}

// GetAllocation returns the value of the Allocation struct pointer
// from NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool. If the receiver or the field Allocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetAllocation() *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation {
	if t != nil && t.Allocation != nil {
		return t.Allocation
	}
	return nil
}

// GetParentMidPool returns the value of the ParentMidPool struct pointer
// from NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool. If the receiver or the field ParentMidPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetParentMidPool() *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool {
	if t != nil && t.ParentMidPool != nil {
		return t.ParentMidPool
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetStdClassPoolId retrieves the value of the leaf StdClassPoolId from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StdClassPoolId is set, it can
// safely use t.GetStdClassPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StdClassPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) GetStdClassPoolId() uint32 {
	if t == nil || t.StdClassPoolId == nil {
		return 0
	}
	return *t.StdClassPoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Allocation.PopulateDefaults()
	t.ParentMidPool.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StdClassPoolId == nil {
		return nil, fmt.Errorf("nil value for key StdClassPoolId")
	}

	return map[string]interface{}{
		"std-class-pool-id": *t.StdClassPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation represents the /nokia-conf/configure/qos/hs-port-pool-policy/std-port-class-pools/class-pool/allocation YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation struct {
	ExplicitPercent *float64 `path:"explicit-percent" module:"nokia-conf"`
	PortBwWeight    *uint32  `path:"port-bw-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) IsYANGGoStruct() {
}

// GetExplicitPercent retrieves the value of the leaf ExplicitPercent from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitPercent is set, it can
// safely use t.GetExplicitPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) GetExplicitPercent() float64 {
	if t == nil || t.ExplicitPercent == nil {
		return 0.0
	}
	return *t.ExplicitPercent
}

// GetPortBwWeight retrieves the value of the leaf PortBwWeight from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBwWeight is set, it can
// safely use t.GetPortBwWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBwWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) GetPortBwWeight() uint32 {
	if t == nil || t.PortBwWeight == nil {
		return 1
	}
	return *t.PortBwWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortBwWeight == nil {
		var v uint32 = 1
		t.PortBwWeight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_Allocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool represents the /nokia-conf/configure/qos/hs-port-pool-policy/std-port-class-pools/class-pool/parent-mid-pool YANG schema element.
type NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool struct {
	None   YANGEmpty `path:"none" module:"nokia-conf"`
	PoolId *uint32   `path:"pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) IsYANGGoStruct() {
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPoolId retrieves the value of the leaf PoolId from the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolId is set, it can
// safely use t.GetPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) GetPoolId() uint32 {
	if t == nil || t.PoolId == nil {
		return 0
	}
	return *t.PoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool.
func (*NokiaConf_Configure_Qos_HsPortPoolPolicy_StdPortClassPools_ClassPool_ParentMidPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsSchedulerPolicy represents the /nokia-conf/configure/qos/hs-scheduler-policy YANG schema element.
type NokiaConf_Configure_Qos_HsSchedulerPolicy struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                               `path:"description" module:"nokia-conf"`
	Group              map[int32]*NokiaConf_Configure_Qos_HsSchedulerPolicy_Group            `path:"group" module:"nokia-conf"`
	MaxRate            NokiaConf_Configure_Qos_HsSchedulerPolicy_MaxRate_Union               `path:"max-rate" module:"nokia-conf"`
	Name               *string                                                               `path:"name" module:"nokia-conf"`
	SchedulingClass    map[uint32]*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Qos_HsSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) NewGroup(GroupId int32) (*NokiaConf_Configure_Qos_HsSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[int32]*NokiaConf_Configure_Qos_HsSchedulerPolicy_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Qos_HsSchedulerPolicy_Group{
		GroupId: &GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Qos_HsSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) RenameGroup(oldK, newK int32) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetOrCreateGroup(GroupId int32) *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Qos_HsSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetGroup(GroupId int32) *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) DeleteGroup(GroupId int32) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Qos_HsSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Qos_HsSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[int32]*NokiaConf_Configure_Qos_HsSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Qos_HsSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) NewSchedulingClass(ClassId uint32) (*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass{
		ClassId: &ClassId,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Qos_HsSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) RenameSchedulingClass(oldK, newK uint32) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassId = &newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetOrCreateSchedulingClass(ClassId uint32) *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass {

	key := ClassId

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Qos_HsSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetSchedulingClass(ClassId uint32) *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) DeleteSchedulingClass(ClassId uint32) {
	key := ClassId

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Qos_HsSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) AppendSchedulingClass(v *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Qos_HsSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaConf_Configure_Qos_HsSchedulerPolicy_MaxRate_Enum_max
	}
	return t.MaxRate
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRate == nil {
		t.MaxRate = NokiaConf_Configure_Qos_HsSchedulerPolicy_MaxRate_Enum_max
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsSchedulerPolicy.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsSchedulerPolicy_Group represents the /nokia-conf/configure/qos/hs-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Qos_HsSchedulerPolicy_Group struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *int32                                                     `path:"group-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Qos_HsSchedulerPolicy_Group_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Qos_HsSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) GetGroupId() int32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_HsSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) GetRate() NokiaConf_Configure_Qos_HsSchedulerPolicy_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Qos_HsSchedulerPolicy_Group_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Qos_HsSchedulerPolicy_Group_Rate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsSchedulerPolicy_Group.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass represents the /nokia-conf/configure/qos/hs-scheduler-policy/scheduling-class YANG schema element.
type NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *uint32                                                              `path:"class-id" module:"nokia-conf"`
	Group              *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group     `path:"group" module:"nokia-conf" yangPresence:"true"`
	Rate               NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) IsYANGGoStruct() {}

// GetOrCreateGroup retrieves the value of the Group field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) GetOrCreateGroup() *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group {
	if t.Group != nil {
		return t.Group
	}
	t.Group = &NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group{}
	return t.Group
}

// GetGroup returns the value of the Group struct pointer
// from NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass. If the receiver or the field Group is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) GetGroup() *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group {
	if t != nil && t.Group != nil {
		return t.Group
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) GetClassId() uint32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) GetRate() NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	t.Group.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group represents the /nokia-conf/configure/qos/hs-scheduler-policy/scheduling-class/group YANG schema element.
type NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group struct {
	GroupId *int32 `path:"group-id" module:"nokia-conf"`
	Weight  *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) IsYANGGoStruct() {}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) GetGroupId() int32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group.
func (*NokiaConf_Configure_Qos_HsSchedulerPolicy_SchedulingClass_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaPoolPolicy represents the /nokia-conf/configure/qos/hsmda-pool-policy YANG schema element.
type NokiaConf_Configure_Qos_HsmdaPoolPolicy struct {
	ApplyGroups         []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassTier           *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier `path:"class-tier" module:"nokia-conf"`
	Description         *string                                            `path:"description" module:"nokia-conf"`
	HsmdaPoolPolicyName *string                                            `path:"hsmda-pool-policy-name" module:"nokia-conf"`
	RootTier            *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier  `path:"root-tier" module:"nokia-conf"`
	SystemReserve       *float64                                           `path:"system-reserve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaPoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy) IsYANGGoStruct() {}

// GetOrCreateClassTier retrieves the value of the ClassTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetOrCreateClassTier() *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier {
	if t.ClassTier != nil {
		return t.ClassTier
	}
	t.ClassTier = &NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier{}
	return t.ClassTier
}

// GetOrCreateRootTier retrieves the value of the RootTier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetOrCreateRootTier() *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier {
	if t.RootTier != nil {
		return t.RootTier
	}
	t.RootTier = &NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier{}
	return t.RootTier
}

// GetClassTier returns the value of the ClassTier struct pointer
// from NokiaConf_Configure_Qos_HsmdaPoolPolicy. If the receiver or the field ClassTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetClassTier() *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier {
	if t != nil && t.ClassTier != nil {
		return t.ClassTier
	}
	return nil
}

// GetRootTier returns the value of the RootTier struct pointer
// from NokiaConf_Configure_Qos_HsmdaPoolPolicy. If the receiver or the field RootTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetRootTier() *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier {
	if t != nil && t.RootTier != nil {
		return t.RootTier
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaPoolPolicyName retrieves the value of the leaf HsmdaPoolPolicyName from the NokiaConf_Configure_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaPoolPolicyName is set, it can
// safely use t.GetHsmdaPoolPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaPoolPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetHsmdaPoolPolicyName() string {
	if t == nil || t.HsmdaPoolPolicyName == nil {
		return ""
	}
	return *t.HsmdaPoolPolicyName
}

// GetSystemReserve retrieves the value of the leaf SystemReserve from the NokiaConf_Configure_Qos_HsmdaPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemReserve is set, it can
// safely use t.GetSystemReserve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemReserve == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) GetSystemReserve() float64 {
	if t == nil || t.SystemReserve == nil {
		return 10.00
	}
	return *t.SystemReserve
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaPoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SystemReserve == nil {
		var v float64 = 10.00
		t.SystemReserve = &v
	}
	t.ClassTier.PopulateDefaults()
	t.RootTier.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaPoolPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaPoolPolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaPoolPolicyName")
	}

	return map[string]interface{}{
		"hsmda-pool-policy-name": *t.HsmdaPoolPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaPoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaPoolPolicy.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier represents the /nokia-conf/configure/qos/hsmda-pool-policy/class-tier YANG schema element.
type NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier struct {
	ClassPool map[uint32]*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool `path:"class-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) IsYANGGoStruct() {}

// NewClassPool creates a new entry in the ClassPool list of the
// NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) NewClassPool(ClassPoolId uint32) (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool)
	}

	key := ClassPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClassPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClassPool", key)
	}

	t.ClassPool[key] = &NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool{
		ClassPoolId: &ClassPoolId,
	}

	return t.ClassPool[key], nil
}

// RenameClassPool renames an entry in the list ClassPool within
// the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) RenameClassPool(oldK, newK uint32) error {
	if _, ok := t.ClassPool[newK]; ok {
		return fmt.Errorf("key %v already exists in ClassPool", newK)
	}

	e, ok := t.ClassPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClassPool", oldK)
	}
	e.ClassPoolId = &newK

	t.ClassPool[newK] = e
	delete(t.ClassPool, oldK)
	return nil
}

// GetOrCreateClassPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) GetOrCreateClassPool(ClassPoolId uint32) *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool {

	key := ClassPoolId

	if v, ok := t.ClassPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassPool(ClassPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassPool got unexpected error: %v", err))
	}
	return v
}

// GetClassPool retrieves the value with the specified key from
// the ClassPool map field of NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) GetClassPool(ClassPoolId uint32) *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool {

	if t == nil {
		return nil
	}

	key := ClassPoolId

	if lm, ok := t.ClassPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) DeleteClassPool(ClassPoolId uint32) {
	key := ClassPoolId

	delete(t.ClassPool, key)
}

// AppendClassPool appends the supplied NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool struct to the
// list ClassPool of NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) AppendClassPool(v *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) error {
	if v.ClassPoolId == nil {
		return fmt.Errorf("invalid nil key received for ClassPoolId")
	}

	key := *v.ClassPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassPool == nil {
		t.ClassPool = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool)
	}

	if _, ok := t.ClassPool[key]; ok {
		return fmt.Errorf("duplicate key for list ClassPool %v", key)
	}

	t.ClassPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ClassPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool represents the /nokia-conf/configure/qos/hsmda-pool-policy/class-tier/class-pool YANG schema element.
type NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool struct {
	AllocationPercent  *float64 `path:"allocation-percent" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassPoolId        *uint32  `path:"class-pool-id" module:"nokia-conf"`
	RootParent         *uint32  `path:"root-parent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) IsYANGGoStruct() {}

// GetAllocationPercent retrieves the value of the leaf AllocationPercent from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationPercent is set, it can
// safely use t.GetAllocationPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetAllocationPercent() float64 {
	if t == nil || t.AllocationPercent == nil {
		return 0.0
	}
	return *t.AllocationPercent
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassPoolId retrieves the value of the leaf ClassPoolId from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassPoolId is set, it can
// safely use t.GetClassPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetClassPoolId() uint32 {
	if t == nil || t.ClassPoolId == nil {
		return 0
	}
	return *t.ClassPoolId
}

// GetRootParent retrieves the value of the leaf RootParent from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootParent is set, it can
// safely use t.GetRootParent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootParent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) GetRootParent() uint32 {
	if t == nil || t.RootParent == nil {
		return 0
	}
	return *t.RootParent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassPoolId == nil {
		return nil, fmt.Errorf("nil value for key ClassPoolId")
	}

	return map[string]interface{}{
		"class-pool-id": *t.ClassPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_ClassTier_ClassPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier represents the /nokia-conf/configure/qos/hsmda-pool-policy/root-tier YANG schema element.
type NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier struct {
	RootPool map[uint32]*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool `path:"root-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) IsYANGGoStruct() {}

// NewRootPool creates a new entry in the RootPool list of the
// NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) NewRootPool(RootPoolId uint32) (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool)
	}

	key := RootPoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RootPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RootPool", key)
	}

	t.RootPool[key] = &NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool{
		RootPoolId: &RootPoolId,
	}

	return t.RootPool[key], nil
}

// RenameRootPool renames an entry in the list RootPool within
// the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) RenameRootPool(oldK, newK uint32) error {
	if _, ok := t.RootPool[newK]; ok {
		return fmt.Errorf("key %v already exists in RootPool", newK)
	}

	e, ok := t.RootPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RootPool", oldK)
	}
	e.RootPoolId = &newK

	t.RootPool[newK] = e
	delete(t.RootPool, oldK)
	return nil
}

// GetOrCreateRootPool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) GetOrCreateRootPool(RootPoolId uint32) *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool {

	key := RootPoolId

	if v, ok := t.RootPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRootPool(RootPoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRootPool got unexpected error: %v", err))
	}
	return v
}

// GetRootPool retrieves the value with the specified key from
// the RootPool map field of NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) GetRootPool(RootPoolId uint32) *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool {

	if t == nil {
		return nil
	}

	key := RootPoolId

	if lm, ok := t.RootPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteRootPool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) DeleteRootPool(RootPoolId uint32) {
	key := RootPoolId

	delete(t.RootPool, key)
}

// AppendRootPool appends the supplied NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool struct to the
// list RootPool of NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) AppendRootPool(v *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) error {
	if v.RootPoolId == nil {
		return fmt.Errorf("invalid nil key received for RootPoolId")
	}

	key := *v.RootPoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool)
	}

	if _, ok := t.RootPool[key]; ok {
		return fmt.Errorf("duplicate key for list RootPool %v", key)
	}

	t.RootPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RootPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool represents the /nokia-conf/configure/qos/hsmda-pool-policy/root-tier/root-pool YANG schema element.
type NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool struct {
	AllocationWeight   *uint32  `path:"allocation-weight" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	RootPoolId         *uint32  `path:"root-pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) IsYANGGoStruct() {}

// GetAllocationWeight retrieves the value of the leaf AllocationWeight from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationWeight is set, it can
// safely use t.GetAllocationWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) GetAllocationWeight() uint32 {
	if t == nil || t.AllocationWeight == nil {
		return 0
	}
	return *t.AllocationWeight
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRootPoolId retrieves the value of the leaf RootPoolId from the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPoolId is set, it can
// safely use t.GetRootPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) GetRootPoolId() uint32 {
	if t == nil || t.RootPoolId == nil {
		return 0
	}
	return *t.RootPoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllocationWeight == nil {
		var v uint32 = 0
		t.AllocationWeight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RootPoolId == nil {
		return nil, fmt.Errorf("nil value for key RootPoolId")
	}

	return map[string]interface{}{
		"root-pool-id": *t.RootPoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool.
func (*NokiaConf_Configure_Qos_HsmdaPoolPolicy_RootTier_RootPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaSchedulerPolicy represents the /nokia-conf/configure/qos/hsmda-scheduler-policy YANG schema element.
type NokiaConf_Configure_Qos_HsmdaSchedulerPolicy struct {
	ApplyGroups              []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit               NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_BurstLimit_Union            `path:"burst-limit" module:"nokia-conf"`
	Description              *string                                                                  `path:"description" module:"nokia-conf"`
	Group                    map[uint32]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group           `path:"group" module:"nokia-conf"`
	HsmdaSchedulerPolicyName *string                                                                  `path:"hsmda-scheduler-policy-name" module:"nokia-conf"`
	MaxRate                  NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_MaxRate_Union               `path:"max-rate" module:"nokia-conf"`
	SchedulingClass          map[uint32]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Qos_HsmdaSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) NewGroup(GroupId uint32) (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group{
		GroupId: &GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) RenameGroup(oldK, newK uint32) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetOrCreateGroup(GroupId uint32) *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetGroup(GroupId uint32) *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) DeleteGroup(GroupId uint32) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Qos_HsmdaSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) NewSchedulingClass(ClassId uint32) (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass{
		ClassId: &ClassId,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) RenameSchedulingClass(oldK, newK uint32) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassId = &newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetOrCreateSchedulingClass(ClassId uint32) *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass {

	key := ClassId

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetSchedulingClass(ClassId uint32) *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) DeleteSchedulingClass(ClassId uint32) {
	key := ClassId

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) AppendSchedulingClass(v *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetBurstLimit() NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaSchedulerPolicyName retrieves the value of the leaf HsmdaSchedulerPolicyName from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaSchedulerPolicyName is set, it can
// safely use t.GetHsmdaSchedulerPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaSchedulerPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetHsmdaSchedulerPolicyName() string {
	if t == nil || t.HsmdaSchedulerPolicyName == nil {
		return ""
	}
	return *t.HsmdaSchedulerPolicyName
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_MaxRate_Enum_max
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_BurstLimit_Enum_auto
	}
	if t.MaxRate == nil {
		t.MaxRate = NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_MaxRate_Enum_max
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaSchedulerPolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaSchedulerPolicyName")
	}

	return map[string]interface{}{
		"hsmda-scheduler-policy-name": *t.HsmdaSchedulerPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group represents the /nokia-conf/configure/qos/hsmda-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	GroupId            *uint32                                                             `path:"group-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_Rate_Union       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) GetBurstLimit() NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) GetRate() NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_BurstLimit_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group_Rate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass represents the /nokia-conf/configure/qos/hsmda-scheduler-policy/scheduling-class YANG schema element.
type NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	ClassId            *uint32                                                                       `path:"class-id" module:"nokia-conf"`
	Group              *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group           `path:"group" module:"nokia-conf" yangPresence:"true"`
	Rate               NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Union       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) IsYANGGoStruct() {}

// GetOrCreateGroup retrieves the value of the Group field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetOrCreateGroup() *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group {
	if t.Group != nil {
		return t.Group
	}
	t.Group = &NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group{}
	return t.Group
}

// GetGroup returns the value of the Group struct pointer
// from NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass. If the receiver or the field Group is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetGroup() *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group {
	if t != nil && t.Group != nil {
		return t.Group
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetBurstLimit() NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetClassId() uint32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) GetRate() NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_BurstLimit_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Rate_Enum_max
	}
	t.Group.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group represents the /nokia-conf/configure/qos/hsmda-scheduler-policy/scheduling-class/group YANG schema element.
type NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group struct {
	GroupId *uint32 `path:"group-id" module:"nokia-conf"`
	Weight  *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) IsYANGGoStruct() {}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group.
func (*NokiaConf_Configure_Qos_HsmdaSchedulerPolicy_SchedulingClass_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaSlopePolicy represents the /nokia-conf/configure/qos/hsmda-slope-policy YANG schema element.
type NokiaConf_Configure_Qos_HsmdaSlopePolicy struct {
	ApplyGroups          []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                             `path:"description" module:"nokia-conf"`
	HighSlope            *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope `path:"high-slope" module:"nokia-conf"`
	HsmdaSlopePolicyName *string                                             `path:"hsmda-slope-policy-name" module:"nokia-conf"`
	LowSlope             *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope  `path:"low-slope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaSlopePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaSlopePolicy) IsYANGGoStruct() {}

// GetOrCreateHighSlope retrieves the value of the HighSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetOrCreateHighSlope() *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope {
	if t.HighSlope != nil {
		return t.HighSlope
	}
	t.HighSlope = &NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope{}
	return t.HighSlope
}

// GetOrCreateLowSlope retrieves the value of the LowSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetOrCreateLowSlope() *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope {
	if t.LowSlope != nil {
		return t.LowSlope
	}
	t.LowSlope = &NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope{}
	return t.LowSlope
}

// GetHighSlope returns the value of the HighSlope struct pointer
// from NokiaConf_Configure_Qos_HsmdaSlopePolicy. If the receiver or the field HighSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetHighSlope() *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope {
	if t != nil && t.HighSlope != nil {
		return t.HighSlope
	}
	return nil
}

// GetLowSlope returns the value of the LowSlope struct pointer
// from NokiaConf_Configure_Qos_HsmdaSlopePolicy. If the receiver or the field LowSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetLowSlope() *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope {
	if t != nil && t.LowSlope != nil {
		return t.LowSlope
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaSlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaSlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsmdaSlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaSlopePolicyName retrieves the value of the leaf HsmdaSlopePolicyName from the NokiaConf_Configure_Qos_HsmdaSlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaSlopePolicyName is set, it can
// safely use t.GetHsmdaSlopePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaSlopePolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) GetHsmdaSlopePolicyName() string {
	if t == nil || t.HsmdaSlopePolicyName == nil {
		return ""
	}
	return *t.HsmdaSlopePolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaSlopePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HighSlope.PopulateDefaults()
	t.LowSlope.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaSlopePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaSlopePolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaSlopePolicyName")
	}

	return map[string]interface{}{
		"hsmda-slope-policy-name": *t.HsmdaSlopePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaSlopePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaSlopePolicy.
func (*NokiaConf_Configure_Qos_HsmdaSlopePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope represents the /nokia-conf/configure/qos/hsmda-slope-policy/high-slope YANG schema element.
type NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxDepth   *float64                    `path:"max-depth" module:"nokia-conf"`
	MaxProb    *float64                    `path:"max-prob" module:"nokia-conf"`
	StartDepth *float64                    `path:"start-depth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxDepth retrieves the value of the leaf MaxDepth from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDepth is set, it can
// safely use t.GetMaxDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) GetMaxDepth() float64 {
	if t == nil || t.MaxDepth == nil {
		return 100.00
	}
	return *t.MaxDepth
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) GetMaxProb() float64 {
	if t == nil || t.MaxProb == nil {
		return 100.00
	}
	return *t.MaxProb
}

// GetStartDepth retrieves the value of the leaf StartDepth from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartDepth is set, it can
// safely use t.GetStartDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) GetStartDepth() float64 {
	if t == nil || t.StartDepth == nil {
		return 100.00
	}
	return *t.StartDepth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxDepth == nil {
		var v float64 = 100.00
		t.MaxDepth = &v
	}
	if t.MaxProb == nil {
		var v float64 = 100.00
		t.MaxProb = &v
	}
	if t.StartDepth == nil {
		var v float64 = 100.00
		t.StartDepth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope.
func (*NokiaConf_Configure_Qos_HsmdaSlopePolicy_HighSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope represents the /nokia-conf/configure/qos/hsmda-slope-policy/low-slope YANG schema element.
type NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxDepth   *float64                    `path:"max-depth" module:"nokia-conf"`
	MaxProb    *float64                    `path:"max-prob" module:"nokia-conf"`
	StartDepth *float64                    `path:"start-depth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxDepth retrieves the value of the leaf MaxDepth from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDepth is set, it can
// safely use t.GetMaxDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) GetMaxDepth() float64 {
	if t == nil || t.MaxDepth == nil {
		return 90.00
	}
	return *t.MaxDepth
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) GetMaxProb() float64 {
	if t == nil || t.MaxProb == nil {
		return 100.00
	}
	return *t.MaxProb
}

// GetStartDepth retrieves the value of the leaf StartDepth from the NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartDepth is set, it can
// safely use t.GetStartDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) GetStartDepth() float64 {
	if t == nil || t.StartDepth == nil {
		return 90.00
	}
	return *t.StartDepth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxDepth == nil {
		var v float64 = 90.00
		t.MaxDepth = &v
	}
	if t.MaxProb == nil {
		var v float64 = 100.00
		t.MaxProb = &v
	}
	if t.StartDepth == nil {
		var v float64 = 90.00
		t.StartDepth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope.
func (*NokiaConf_Configure_Qos_HsmdaSlopePolicy_LowSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HsmdaWrrPolicy represents the /nokia-conf/configure/qos/hsmda-wrr-policy YANG schema element.
type NokiaConf_Configure_Qos_HsmdaWrrPolicy struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassAggWeight     *int32                                                 `path:"class-agg-weight" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	HsmdaWrrPolicyName *string                                                `path:"hsmda-wrr-policy-name" module:"nokia-conf"`
	IncludeQueues      E_NokiaConf_Configure_Qos_HsmdaWrrPolicy_IncludeQueues `path:"include-queues" module:"nokia-conf"`
	ScheduleUsingClass *int32                                                 `path:"schedule-using-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HsmdaWrrPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HsmdaWrrPolicy) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassAggWeight retrieves the value of the leaf ClassAggWeight from the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassAggWeight is set, it can
// safely use t.GetClassAggWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassAggWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) GetClassAggWeight() int32 {
	if t == nil || t.ClassAggWeight == nil {
		return 1
	}
	return *t.ClassAggWeight
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsmdaWrrPolicyName retrieves the value of the leaf HsmdaWrrPolicyName from the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaWrrPolicyName is set, it can
// safely use t.GetHsmdaWrrPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaWrrPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) GetHsmdaWrrPolicyName() string {
	if t == nil || t.HsmdaWrrPolicyName == nil {
		return ""
	}
	return *t.HsmdaWrrPolicyName
}

// GetIncludeQueues retrieves the value of the leaf IncludeQueues from the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeQueues is set, it can
// safely use t.GetIncludeQueues() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeQueues == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) GetIncludeQueues() E_NokiaConf_Configure_Qos_HsmdaWrrPolicy_IncludeQueues {
	if t == nil || t.IncludeQueues == 0 {
		return NokiaConf_Configure_Qos_HsmdaWrrPolicy_IncludeQueues_1_2
	}
	return t.IncludeQueues
}

// GetScheduleUsingClass retrieves the value of the leaf ScheduleUsingClass from the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScheduleUsingClass is set, it can
// safely use t.GetScheduleUsingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScheduleUsingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) GetScheduleUsingClass() int32 {
	if t == nil || t.ScheduleUsingClass == nil {
		return 1
	}
	return *t.ScheduleUsingClass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HsmdaWrrPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClassAggWeight == nil {
		var v int32 = 1
		t.ClassAggWeight = &v
	}
	if t.IncludeQueues == 0 {
		t.IncludeQueues = NokiaConf_Configure_Qos_HsmdaWrrPolicy_IncludeQueues_1_2
	}
	if t.ScheduleUsingClass == nil {
		var v int32 = 1
		t.ScheduleUsingClass = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HsmdaWrrPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HsmdaWrrPolicyName == nil {
		return nil, fmt.Errorf("nil value for key HsmdaWrrPolicyName")
	}

	return map[string]interface{}{
		"hsmda-wrr-policy-name": *t.HsmdaWrrPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HsmdaWrrPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HsmdaWrrPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HsmdaWrrPolicy.
func (*NokiaConf_Configure_Qos_HsmdaWrrPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy represents the /nokia-conf/configure/qos/hw-agg-shaper-scheduler-policy YANG schema element.
type NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy struct {
	ApplyGroups         []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	CongestionThreshold *uint32                                                                  `path:"congestion-threshold" module:"nokia-conf"`
	Description         *string                                                                  `path:"description" module:"nokia-conf"`
	Group               map[string]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group     `path:"group" module:"nokia-conf"`
	MaxPercentRate      *float64                                                                 `path:"max-percent-rate" module:"nokia-conf"`
	MaxRate             NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_MaxRate_Union         `path:"max-rate" module:"nokia-conf"`
	MonitorThreshold    *uint32                                                                  `path:"monitor-threshold" module:"nokia-conf"`
	Name                *string                                                                  `path:"name" module:"nokia-conf"`
	SchedClass          map[int32]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass `path:"sched-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) NewGroup(GroupName string) (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetGroup(GroupName string) *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedClass creates a new entry in the SchedClass list of the
// NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) NewSchedClass(ClassId int32) (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[int32]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedClass", key)
	}

	t.SchedClass[key] = &NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass{
		ClassId: &ClassId,
	}

	return t.SchedClass[key], nil
}

// RenameSchedClass renames an entry in the list SchedClass within
// the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) RenameSchedClass(oldK, newK int32) error {
	if _, ok := t.SchedClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedClass", newK)
	}

	e, ok := t.SchedClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedClass", oldK)
	}
	e.ClassId = &newK

	t.SchedClass[newK] = e
	delete(t.SchedClass, oldK)
	return nil
}

// GetOrCreateSchedClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetOrCreateSchedClass(ClassId int32) *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass {

	key := ClassId

	if v, ok := t.SchedClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedClass retrieves the value with the specified key from
// the SchedClass map field of NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetSchedClass(ClassId int32) *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) DeleteSchedClass(ClassId int32) {
	key := ClassId

	delete(t.SchedClass, key)
}

// AppendSchedClass appends the supplied NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass struct to the
// list SchedClass of NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) AppendSchedClass(v *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[int32]*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass)
	}

	if _, ok := t.SchedClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedClass %v", key)
	}

	t.SchedClass[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCongestionThreshold retrieves the value of the leaf CongestionThreshold from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CongestionThreshold is set, it can
// safely use t.GetCongestionThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CongestionThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetCongestionThreshold() uint32 {
	if t == nil || t.CongestionThreshold == nil {
		return 90
	}
	return *t.CongestionThreshold
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxPercentRate retrieves the value of the leaf MaxPercentRate from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPercentRate is set, it can
// safely use t.GetMaxPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetMaxPercentRate() float64 {
	if t == nil || t.MaxPercentRate == nil {
		return 0.0
	}
	return *t.MaxPercentRate
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaTypesQos_ShaperMaxRate_Enum_max
	}
	return t.MaxRate
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CongestionThreshold == nil {
		var v uint32 = 90
		t.CongestionThreshold = &v
	}
	if t.MaxRate == nil {
		t.MaxRate = NokiaTypesQos_ShaperMaxRate_Enum_max
	}
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy.
func (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group represents the /nokia-conf/configure/qos/hw-agg-shaper-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group.
func (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass represents the /nokia-conf/configure/qos/hw-agg-shaper-scheduler-policy/sched-class YANG schema element.
type NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *int32   `path:"class-id" module:"nokia-conf"`
	Group              *string  `path:"group" module:"nokia-conf"`
	Weight             *int32   `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetClassId() int32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass.
func (*NokiaConf_Configure_Qos_HwAggShaperSchedulerPolicy_SchedClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_IngressClassificationPolicy represents the /nokia-conf/configure/qos/ingress-classification-policy YANG schema element.
type NokiaConf_Configure_Qos_IngressClassificationPolicy struct {
	AllowAttachment                 E_NokiaTypesQos_IngressClassPlcyProfAttach                                             `path:"allow-attachment" module:"nokia-conf"`
	ApplyGroups                     []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude              []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction                   *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction                     `path:"default-action" module:"nokia-conf"`
	Description                     *string                                                                                `path:"description" module:"nokia-conf"`
	Dot1P                           map[int32]*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P                   `path:"dot1p" module:"nokia-conf"`
	Dot1PFcMap                      *string                                                                                `path:"dot1p-fc-map" module:"nokia-conf"`
	Dscp                            map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp `path:"dscp" module:"nokia-conf"`
	DscpFcMap                       *string                                                                                `path:"dscp-fc-map" module:"nokia-conf"`
	IngressClassificationPolicyName *string                                                                                `path:"ingress-classification-policy-name" module:"nokia-conf"`
	LspExp                          map[int32]*NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp                  `path:"lsp-exp" module:"nokia-conf"`
	LspExpFcMap                     *string                                                                                `path:"lsp-exp-fc-map" module:"nokia-conf"`
	Remark                          E_NokiaTypesQos_IngClassRemarkValue                                                    `path:"remark" module:"nokia-conf"`
	Scope                           E_NokiaTypesQos_ItemScope                                                              `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_IngressClassificationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Qos_IngressClassificationPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) NewDot1P(Dot1PValue int32) (*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P{
		Dot1PValue: &Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Qos_IngressClassificationPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) RenameDot1P(oldK, newK int32) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = &newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_IngressClassificationPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetOrCreateDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Qos_IngressClassificationPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_IngressClassificationPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) DeleteDot1P(Dot1PValue int32) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Qos_IngressClassificationPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) AppendDot1P(v *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) error {
	if v.Dot1PValue == nil {
		return fmt.Errorf("invalid nil key received for Dot1PValue")
	}

	key := *v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Qos_IngressClassificationPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) NewDscp(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Qos_IngressClassificationPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) RenameDscp(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_IngressClassificationPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetOrCreateDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Qos_IngressClassificationPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_IngressClassificationPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) DeleteDscp(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp struct to the
// list Dscp of NokiaConf_Configure_Qos_IngressClassificationPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) AppendDscp(v *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Qos_IngressClassificationPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) NewLspExp(LspExpValue int32) (*NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp{
		LspExpValue: &LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Qos_IngressClassificationPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) RenameLspExp(oldK, newK int32) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = &newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_IngressClassificationPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetOrCreateLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Qos_IngressClassificationPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_IngressClassificationPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) DeleteLspExp(LspExpValue int32) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp struct to the
// list LspExp of NokiaConf_Configure_Qos_IngressClassificationPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) AppendLspExp(v *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) error {
	if v.LspExpValue == nil {
		return fmt.Errorf("invalid nil key received for LspExpValue")
	}

	key := *v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetOrCreateDefaultAction() *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Qos_IngressClassificationPolicy. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetDefaultAction() *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetAllowAttachment retrieves the value of the leaf AllowAttachment from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowAttachment is set, it can
// safely use t.GetAllowAttachment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowAttachment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetAllowAttachment() E_NokiaTypesQos_IngressClassPlcyProfAttach {
	if t == nil || t.AllowAttachment == 0 {
		return NokiaTypesQos_IngressClassPlcyProfAttach_any
	}
	return t.AllowAttachment
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDot1PFcMap retrieves the value of the leaf Dot1PFcMap from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PFcMap is set, it can
// safely use t.GetDot1PFcMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PFcMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetDot1PFcMap() string {
	if t == nil || t.Dot1PFcMap == nil {
		return ""
	}
	return *t.Dot1PFcMap
}

// GetDscpFcMap retrieves the value of the leaf DscpFcMap from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpFcMap is set, it can
// safely use t.GetDscpFcMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpFcMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetDscpFcMap() string {
	if t == nil || t.DscpFcMap == nil {
		return ""
	}
	return *t.DscpFcMap
}

// GetIngressClassificationPolicyName retrieves the value of the leaf IngressClassificationPolicyName from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressClassificationPolicyName is set, it can
// safely use t.GetIngressClassificationPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressClassificationPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetIngressClassificationPolicyName() string {
	if t == nil || t.IngressClassificationPolicyName == nil {
		return ""
	}
	return *t.IngressClassificationPolicyName
}

// GetLspExpFcMap retrieves the value of the leaf LspExpFcMap from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpFcMap is set, it can
// safely use t.GetLspExpFcMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpFcMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetLspExpFcMap() string {
	if t == nil || t.LspExpFcMap == nil {
		return ""
	}
	return *t.LspExpFcMap
}

// GetRemark retrieves the value of the leaf Remark from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remark is set, it can
// safely use t.GetRemark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetRemark() E_NokiaTypesQos_IngClassRemarkValue {
	if t == nil || t.Remark == 0 {
		return NokiaTypesQos_IngClassRemarkValue_any
	}
	return t.Remark
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_IngressClassificationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_IngressClassificationPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowAttachment == 0 {
		t.AllowAttachment = NokiaTypesQos_IngressClassPlcyProfAttach_any
	}
	if t.Remark == 0 {
		t.Remark = NokiaTypesQos_IngClassRemarkValue_any
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_IngressClassificationPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IngressClassificationPolicyName == nil {
		return nil, fmt.Errorf("nil value for key IngressClassificationPolicyName")
	}

	return map[string]interface{}{
		"ingress-classification-policy-name": *t.IngressClassificationPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_IngressClassificationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_IngressClassificationPolicy.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction represents the /nokia-conf/configure/qos/ingress-classification-policy/default-action YANG schema element.
type NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P represents the /nokia-conf/configure/qos/ingress-classification-policy/dot1p YANG schema element.
type NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P struct {
	ApplyGroups        []string                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Dot1PValue         *int32                    `path:"dot1p-value" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName   `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_ProfileDe `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) GetDot1PValue() int32 {
	if t == nil || t.Dot1PValue == nil {
		return 0
	}
	return *t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dot1PValue == nil {
		return nil, fmt.Errorf("nil value for key Dot1PValue")
	}

	return map[string]interface{}{
		"dot1p-value": *t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp represents the /nokia-conf/configure/qos/ingress-classification-policy/dscp YANG schema element.
type NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName           E_NokiaTypesQos_DscpName `path:"dscp-name" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName  `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_Profile  `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp represents the /nokia-conf/configure/qos/ingress-classification-policy/lsp-exp YANG schema element.
type NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	LspExpValue        *int32                  `path:"lsp-exp-value" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) GetLspExpValue() int32 {
	if t == nil || t.LspExpValue == nil {
		return 0
	}
	return *t.LspExpValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspExpValue == nil {
		return nil, fmt.Errorf("nil value for key LspExpValue")
	}

	return map[string]interface{}{
		"lsp-exp-value": *t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp.
func (*NokiaConf_Configure_Qos_IngressClassificationPolicy_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_LspExpFcMap represents the /nokia-conf/configure/qos/lsp-exp-fc-map YANG schema element.
type NokiaConf_Configure_Qos_LspExpFcMap struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction    `path:"default-action" module:"nokia-conf"`
	LspExp             map[int32]*NokiaConf_Configure_Qos_LspExpFcMap_LspExp `path:"lsp-exp" module:"nokia-conf"`
	LspExpFcMapName    *string                                               `path:"lsp-exp-fc-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_LspExpFcMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_LspExpFcMap) IsYANGGoStruct() {}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Qos_LspExpFcMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) NewLspExp(LspExpValue int32) (*NokiaConf_Configure_Qos_LspExpFcMap_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_LspExpFcMap_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Qos_LspExpFcMap_LspExp{
		LspExpValue: &LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Qos_LspExpFcMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) RenameLspExp(oldK, newK int32) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = &newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_LspExpFcMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) GetOrCreateLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_LspExpFcMap_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Qos_LspExpFcMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) GetLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_LspExpFcMap_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_LspExpFcMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) DeleteLspExp(LspExpValue int32) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Qos_LspExpFcMap_LspExp struct to the
// list LspExp of NokiaConf_Configure_Qos_LspExpFcMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_LspExpFcMap_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) AppendLspExp(v *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) error {
	if v.LspExpValue == nil {
		return fmt.Errorf("invalid nil key received for LspExpValue")
	}

	key := *v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_LspExpFcMap_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) GetOrCreateDefaultAction() *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Qos_LspExpFcMap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) GetDefaultAction() *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_LspExpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_LspExpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLspExpFcMapName retrieves the value of the leaf LspExpFcMapName from the NokiaConf_Configure_Qos_LspExpFcMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpFcMapName is set, it can
// safely use t.GetLspExpFcMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpFcMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) GetLspExpFcMapName() string {
	if t == nil || t.LspExpFcMapName == nil {
		return ""
	}
	return *t.LspExpFcMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_LspExpFcMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_LspExpFcMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspExpFcMapName == nil {
		return nil, fmt.Errorf("nil value for key LspExpFcMapName")
	}

	return map[string]interface{}{
		"lsp-exp-fc-map-name": *t.LspExpFcMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_LspExpFcMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_LspExpFcMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_LspExpFcMap.
func (*NokiaConf_Configure_Qos_LspExpFcMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction represents the /nokia-conf/configure/qos/lsp-exp-fc-map/default-action YANG schema element.
type NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction.
func (*NokiaConf_Configure_Qos_LspExpFcMap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_LspExpFcMap_LspExp represents the /nokia-conf/configure/qos/lsp-exp-fc-map/lsp-exp YANG schema element.
type NokiaConf_Configure_Qos_LspExpFcMap_LspExp struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	LspExpValue        *int32                  `path:"lsp-exp-value" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_LspExpFcMap_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_LspExpFcMap_LspExp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) GetLspExpValue() int32 {
	if t == nil || t.LspExpValue == nil {
		return 0
	}
	return *t.LspExpValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_LspExpFcMap_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_in
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_LspExpFcMap_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_in
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_LspExpFcMap_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspExpValue == nil {
		return nil, fmt.Errorf("nil value for key LspExpValue")
	}

	return map[string]interface{}{
		"lsp-exp-value": *t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_LspExpFcMap_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_LspExpFcMap_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_LspExpFcMap_LspExp.
func (*NokiaConf_Configure_Qos_LspExpFcMap_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList represents the /nokia-conf/configure/qos/match-list YANG schema element.
type NokiaConf_Configure_Qos_MatchList struct {
	IpPrefixList   map[string]*NokiaConf_Configure_Qos_MatchList_IpPrefixList   `path:"ip-prefix-list" module:"nokia-conf"`
	Ipv6PrefixList map[string]*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList `path:"ipv6-prefix-list" module:"nokia-conf"`
	PortList       map[string]*NokiaConf_Configure_Qos_MatchList_PortList       `path:"port-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList) IsYANGGoStruct() {}

// NewIpPrefixList creates a new entry in the IpPrefixList list of the
// NokiaConf_Configure_Qos_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MatchList) NewIpPrefixList(PrefixListName string) (*NokiaConf_Configure_Qos_MatchList_IpPrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Qos_MatchList_IpPrefixList)
	}

	key := PrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpPrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpPrefixList", key)
	}

	t.IpPrefixList[key] = &NokiaConf_Configure_Qos_MatchList_IpPrefixList{
		PrefixListName: &PrefixListName,
	}

	return t.IpPrefixList[key], nil
}

// RenameIpPrefixList renames an entry in the list IpPrefixList within
// the NokiaConf_Configure_Qos_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MatchList) RenameIpPrefixList(oldK, newK string) error {
	if _, ok := t.IpPrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in IpPrefixList", newK)
	}

	e, ok := t.IpPrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpPrefixList", oldK)
	}
	e.PrefixListName = &newK

	t.IpPrefixList[newK] = e
	delete(t.IpPrefixList, oldK)
	return nil
}

// GetOrCreateIpPrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MatchList) GetOrCreateIpPrefixList(PrefixListName string) *NokiaConf_Configure_Qos_MatchList_IpPrefixList {

	key := PrefixListName

	if v, ok := t.IpPrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpPrefixList(PrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpPrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpPrefixList retrieves the value with the specified key from
// the IpPrefixList map field of NokiaConf_Configure_Qos_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MatchList) GetIpPrefixList(PrefixListName string) *NokiaConf_Configure_Qos_MatchList_IpPrefixList {

	if t == nil {
		return nil
	}

	key := PrefixListName

	if lm, ok := t.IpPrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpPrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MatchList) DeleteIpPrefixList(PrefixListName string) {
	key := PrefixListName

	delete(t.IpPrefixList, key)
}

// AppendIpPrefixList appends the supplied NokiaConf_Configure_Qos_MatchList_IpPrefixList struct to the
// list IpPrefixList of NokiaConf_Configure_Qos_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MatchList_IpPrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MatchList) AppendIpPrefixList(v *NokiaConf_Configure_Qos_MatchList_IpPrefixList) error {
	if v.PrefixListName == nil {
		return fmt.Errorf("invalid nil key received for PrefixListName")
	}

	key := *v.PrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Qos_MatchList_IpPrefixList)
	}

	if _, ok := t.IpPrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list IpPrefixList %v", key)
	}

	t.IpPrefixList[key] = v
	return nil
}

// NewIpv6PrefixList creates a new entry in the Ipv6PrefixList list of the
// NokiaConf_Configure_Qos_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MatchList) NewIpv6PrefixList(PrefixListName string) (*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixList == nil {
		t.Ipv6PrefixList = make(map[string]*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList)
	}

	key := PrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6PrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6PrefixList", key)
	}

	t.Ipv6PrefixList[key] = &NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList{
		PrefixListName: &PrefixListName,
	}

	return t.Ipv6PrefixList[key], nil
}

// RenameIpv6PrefixList renames an entry in the list Ipv6PrefixList within
// the NokiaConf_Configure_Qos_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MatchList) RenameIpv6PrefixList(oldK, newK string) error {
	if _, ok := t.Ipv6PrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6PrefixList", newK)
	}

	e, ok := t.Ipv6PrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6PrefixList", oldK)
	}
	e.PrefixListName = &newK

	t.Ipv6PrefixList[newK] = e
	delete(t.Ipv6PrefixList, oldK)
	return nil
}

// GetOrCreateIpv6PrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MatchList) GetOrCreateIpv6PrefixList(PrefixListName string) *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList {

	key := PrefixListName

	if v, ok := t.Ipv6PrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6PrefixList(PrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6PrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpv6PrefixList retrieves the value with the specified key from
// the Ipv6PrefixList map field of NokiaConf_Configure_Qos_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MatchList) GetIpv6PrefixList(PrefixListName string) *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList {

	if t == nil {
		return nil
	}

	key := PrefixListName

	if lm, ok := t.Ipv6PrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6PrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MatchList) DeleteIpv6PrefixList(PrefixListName string) {
	key := PrefixListName

	delete(t.Ipv6PrefixList, key)
}

// AppendIpv6PrefixList appends the supplied NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList struct to the
// list Ipv6PrefixList of NokiaConf_Configure_Qos_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MatchList) AppendIpv6PrefixList(v *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) error {
	if v.PrefixListName == nil {
		return fmt.Errorf("invalid nil key received for PrefixListName")
	}

	key := *v.PrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixList == nil {
		t.Ipv6PrefixList = make(map[string]*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList)
	}

	if _, ok := t.Ipv6PrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6PrefixList %v", key)
	}

	t.Ipv6PrefixList[key] = v
	return nil
}

// NewPortList creates a new entry in the PortList list of the
// NokiaConf_Configure_Qos_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MatchList) NewPortList(PortListName string) (*NokiaConf_Configure_Qos_MatchList_PortList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Qos_MatchList_PortList)
	}

	key := PortListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortList", key)
	}

	t.PortList[key] = &NokiaConf_Configure_Qos_MatchList_PortList{
		PortListName: &PortListName,
	}

	return t.PortList[key], nil
}

// RenamePortList renames an entry in the list PortList within
// the NokiaConf_Configure_Qos_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MatchList) RenamePortList(oldK, newK string) error {
	if _, ok := t.PortList[newK]; ok {
		return fmt.Errorf("key %v already exists in PortList", newK)
	}

	e, ok := t.PortList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortList", oldK)
	}
	e.PortListName = &newK

	t.PortList[newK] = e
	delete(t.PortList, oldK)
	return nil
}

// GetOrCreatePortList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MatchList) GetOrCreatePortList(PortListName string) *NokiaConf_Configure_Qos_MatchList_PortList {

	key := PortListName

	if v, ok := t.PortList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortList(PortListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortList got unexpected error: %v", err))
	}
	return v
}

// GetPortList retrieves the value with the specified key from
// the PortList map field of NokiaConf_Configure_Qos_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MatchList) GetPortList(PortListName string) *NokiaConf_Configure_Qos_MatchList_PortList {

	if t == nil {
		return nil
	}

	key := PortListName

	if lm, ok := t.PortList[key]; ok {
		return lm
	}
	return nil
}

// DeletePortList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MatchList) DeletePortList(PortListName string) {
	key := PortListName

	delete(t.PortList, key)
}

// AppendPortList appends the supplied NokiaConf_Configure_Qos_MatchList_PortList struct to the
// list PortList of NokiaConf_Configure_Qos_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MatchList_PortList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MatchList) AppendPortList(v *NokiaConf_Configure_Qos_MatchList_PortList) error {
	if v.PortListName == nil {
		return fmt.Errorf("invalid nil key received for PortListName")
	}

	key := *v.PortListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Qos_MatchList_PortList)
	}

	if _, ok := t.PortList[key]; ok {
		return fmt.Errorf("duplicate key for list PortList %v", key)
	}

	t.PortList[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpPrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6PrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.PortList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList.
func (*NokiaConf_Configure_Qos_MatchList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList_IpPrefixList represents the /nokia-conf/configure/qos/match-list/ip-prefix-list YANG schema element.
type NokiaConf_Configure_Qos_MatchList_IpPrefixList struct {
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix `path:"prefix" module:"nokia-conf"`
	PrefixListName     *string                                                           `path:"prefix-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList_IpPrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList_IpPrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Qos_MatchList_IpPrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Qos_MatchList_IpPrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_IpPrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Qos_MatchList_IpPrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) GetPrefix(IpPrefix string) *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_IpPrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Qos_MatchList_IpPrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) AppendPrefix(v *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixListName retrieves the value of the leaf PrefixListName from the NokiaConf_Configure_Qos_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixListName is set, it can
// safely use t.GetPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) GetPrefixListName() string {
	if t == nil || t.PrefixListName == nil {
		return ""
	}
	return *t.PrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList_IpPrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MatchList_IpPrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixListName == nil {
		return nil, fmt.Errorf("nil value for key PrefixListName")
	}

	return map[string]interface{}{
		"prefix-list-name": *t.PrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList_IpPrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList_IpPrefixList.
func (*NokiaConf_Configure_Qos_MatchList_IpPrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix represents the /nokia-conf/configure/qos/match-list/ip-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix.
func (*NokiaConf_Configure_Qos_MatchList_IpPrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList represents the /nokia-conf/configure/qos/match-list/ipv6-prefix-list YANG schema element.
type NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix `path:"prefix" module:"nokia-conf"`
	PrefixListName     *string                                                             `path:"prefix-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) AppendPrefix(v *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixListName retrieves the value of the leaf PrefixListName from the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixListName is set, it can
// safely use t.GetPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) GetPrefixListName() string {
	if t == nil || t.PrefixListName == nil {
		return ""
	}
	return *t.PrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixListName == nil {
		return nil, fmt.Errorf("nil value for key PrefixListName")
	}

	return map[string]interface{}{
		"prefix-list-name": *t.PrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList.
func (*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix represents the /nokia-conf/configure/qos/match-list/ipv6-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix.
func (*NokiaConf_Configure_Qos_MatchList_Ipv6PrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList_PortList represents the /nokia-conf/configure/qos/match-list/port-list YANG schema element.
type NokiaConf_Configure_Qos_MatchList_PortList struct {
	ApplyGroups        []string                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                    `path:"description" module:"nokia-conf"`
	Port               map[int32]*NokiaConf_Configure_Qos_MatchList_PortList_Port                                                 `path:"port" module:"nokia-conf"`
	PortListName       *string                                                                                                    `path:"port-list-name" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Qos_MatchList_PortList_Range_Key]*NokiaConf_Configure_Qos_MatchList_PortList_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList_PortList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList_PortList) IsYANGGoStruct() {}

// NokiaConf_Configure_Qos_MatchList_PortList_Range_Key represents the key for list Range of element /nokia-conf/configure/qos/match-list/port-list.
type NokiaConf_Configure_Qos_MatchList_PortList_Range_Key struct {
	Start int32 `path:"start"`
	End   int32 `path:"end"`
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Qos_MatchList_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) NewPort(Value int32) (*NokiaConf_Configure_Qos_MatchList_PortList_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[int32]*NokiaConf_Configure_Qos_MatchList_PortList_Port)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Qos_MatchList_PortList_Port{
		Value: &Value,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Qos_MatchList_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) RenamePort(oldK, newK int32) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.Value = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetOrCreatePort(Value int32) *NokiaConf_Configure_Qos_MatchList_PortList_Port {

	key := Value

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Qos_MatchList_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetPort(Value int32) *NokiaConf_Configure_Qos_MatchList_PortList_Port {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) DeletePort(Value int32) {
	key := Value

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Qos_MatchList_PortList_Port struct to the
// list Port of NokiaConf_Configure_Qos_MatchList_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MatchList_PortList_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) AppendPort(v *NokiaConf_Configure_Qos_MatchList_PortList_Port) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[int32]*NokiaConf_Configure_Qos_MatchList_PortList_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Qos_MatchList_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) NewRange(Start int32, End int32) (*NokiaConf_Configure_Qos_MatchList_PortList_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Qos_MatchList_PortList_Range_Key]*NokiaConf_Configure_Qos_MatchList_PortList_Range)
	}

	key := NokiaConf_Configure_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Qos_MatchList_PortList_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Qos_MatchList_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) RenameRange(oldK, newK NokiaConf_Configure_Qos_MatchList_PortList_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetOrCreateRange(Start int32, End int32) *NokiaConf_Configure_Qos_MatchList_PortList_Range {

	key := NokiaConf_Configure_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Qos_MatchList_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetRange(Start int32, End int32) *NokiaConf_Configure_Qos_MatchList_PortList_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MatchList_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) DeleteRange(Start int32, End int32) {
	key := NokiaConf_Configure_Qos_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Qos_MatchList_PortList_Range struct to the
// list Range of NokiaConf_Configure_Qos_MatchList_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MatchList_PortList_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) AppendRange(v *NokiaConf_Configure_Qos_MatchList_PortList_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Qos_MatchList_PortList_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Qos_MatchList_PortList_Range_Key]*NokiaConf_Configure_Qos_MatchList_PortList_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortListName retrieves the value of the leaf PortListName from the NokiaConf_Configure_Qos_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortListName is set, it can
// safely use t.GetPortListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) GetPortListName() string {
	if t == nil || t.PortListName == nil {
		return ""
	}
	return *t.PortListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList_PortList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MatchList_PortList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortListName == nil {
		return nil, fmt.Errorf("nil value for key PortListName")
	}

	return map[string]interface{}{
		"port-list-name": *t.PortListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList_PortList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList_PortList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList_PortList.
func (*NokiaConf_Configure_Qos_MatchList_PortList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList_PortList_Port represents the /nokia-conf/configure/qos/match-list/port-list/port YANG schema element.
type NokiaConf_Configure_Qos_MatchList_PortList_Port struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList_PortList_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList_PortList_Port) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Qos_MatchList_PortList_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Port) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList_PortList_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MatchList_PortList_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList_PortList_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList_PortList_Port.
func (*NokiaConf_Configure_Qos_MatchList_PortList_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MatchList_PortList_Range represents the /nokia-conf/configure/qos/match-list/port-list/range YANG schema element.
type NokiaConf_Configure_Qos_MatchList_PortList_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MatchList_PortList_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MatchList_PortList_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_MatchList_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_MatchList_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MatchList_PortList_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MatchList_PortList_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MatchList_PortList_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MatchList_PortList_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MatchList_PortList_Range.
func (*NokiaConf_Configure_Qos_MatchList_PortList_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_McFrProfileEgress represents the /nokia-conf/configure/qos/mc-fr-profile-egress YANG schema element.
type NokiaConf_Configure_Qos_McFrProfileEgress struct {
	ApplyGroups         []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Class               map[int32]*NokiaConf_Configure_Qos_McFrProfileEgress_Class `path:"class" module:"nokia-conf"`
	Description         *string                                                    `path:"description" module:"nokia-conf"`
	McFrEgressProfIndex *uint32                                                    `path:"mc-fr-egress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_McFrProfileEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_McFrProfileEgress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Qos_McFrProfileEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) NewClass(ClassId int32) (*NokiaConf_Configure_Qos_McFrProfileEgress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_McFrProfileEgress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Qos_McFrProfileEgress_Class{
		ClassId: &ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Qos_McFrProfileEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) RenameClass(oldK, newK int32) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = &newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_McFrProfileEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) GetOrCreateClass(ClassId int32) *NokiaConf_Configure_Qos_McFrProfileEgress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Qos_McFrProfileEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) GetClass(ClassId int32) *NokiaConf_Configure_Qos_McFrProfileEgress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_McFrProfileEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) DeleteClass(ClassId int32) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Qos_McFrProfileEgress_Class struct to the
// list Class of NokiaConf_Configure_Qos_McFrProfileEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_McFrProfileEgress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) AppendClass(v *NokiaConf_Configure_Qos_McFrProfileEgress_Class) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_McFrProfileEgress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_McFrProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_McFrProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_McFrProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcFrEgressProfIndex retrieves the value of the leaf McFrEgressProfIndex from the NokiaConf_Configure_Qos_McFrProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McFrEgressProfIndex is set, it can
// safely use t.GetMcFrEgressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McFrEgressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) GetMcFrEgressProfIndex() uint32 {
	if t == nil || t.McFrEgressProfIndex == nil {
		return 0
	}
	return *t.McFrEgressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_McFrProfileEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_McFrProfileEgress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.McFrEgressProfIndex == nil {
		return nil, fmt.Errorf("nil value for key McFrEgressProfIndex")
	}

	return map[string]interface{}{
		"mc-fr-egress-prof-index": *t.McFrEgressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_McFrProfileEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_McFrProfileEgress.
func (*NokiaConf_Configure_Qos_McFrProfileEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_McFrProfileEgress_Class represents the /nokia-conf/configure/qos/mc-fr-profile-egress/class YANG schema element.
type NokiaConf_Configure_Qos_McFrProfileEgress_Class struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *int32   `path:"class-id" module:"nokia-conf"`
	MaxQueueSize       *uint32  `path:"max-queue-size" module:"nokia-conf"`
	Mir                *uint32  `path:"mir" module:"nokia-conf"`
	Weight             *uint32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_McFrProfileEgress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_McFrProfileEgress_Class) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) GetClassId() int32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetMaxQueueSize retrieves the value of the leaf MaxQueueSize from the NokiaConf_Configure_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueSize is set, it can
// safely use t.GetMaxQueueSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) GetMaxQueueSize() uint32 {
	if t == nil || t.MaxQueueSize == nil {
		return 0
	}
	return *t.MaxQueueSize
}

// GetMir retrieves the value of the leaf Mir from the NokiaConf_Configure_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mir is set, it can
// safely use t.GetMir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) GetMir() uint32 {
	if t == nil || t.Mir == nil {
		return 0
	}
	return *t.Mir
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_McFrProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_McFrProfileEgress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_McFrProfileEgress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_McFrProfileEgress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_McFrProfileEgress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_McFrProfileEgress_Class.
func (*NokiaConf_Configure_Qos_McFrProfileEgress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_McFrProfileIngress represents the /nokia-conf/configure/qos/mc-fr-profile-ingress YANG schema element.
type NokiaConf_Configure_Qos_McFrProfileIngress struct {
	ApplyGroups          []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Class                map[int32]*NokiaConf_Configure_Qos_McFrProfileIngress_Class `path:"class" module:"nokia-conf"`
	Description          *string                                                     `path:"description" module:"nokia-conf"`
	McFrIngressProfIndex *uint32                                                     `path:"mc-fr-ingress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_McFrProfileIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_McFrProfileIngress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Qos_McFrProfileIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) NewClass(ClassId int32) (*NokiaConf_Configure_Qos_McFrProfileIngress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_McFrProfileIngress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Qos_McFrProfileIngress_Class{
		ClassId: &ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Qos_McFrProfileIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) RenameClass(oldK, newK int32) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = &newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_McFrProfileIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) GetOrCreateClass(ClassId int32) *NokiaConf_Configure_Qos_McFrProfileIngress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Qos_McFrProfileIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) GetClass(ClassId int32) *NokiaConf_Configure_Qos_McFrProfileIngress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_McFrProfileIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) DeleteClass(ClassId int32) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Qos_McFrProfileIngress_Class struct to the
// list Class of NokiaConf_Configure_Qos_McFrProfileIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_McFrProfileIngress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) AppendClass(v *NokiaConf_Configure_Qos_McFrProfileIngress_Class) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_McFrProfileIngress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_McFrProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_McFrProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_McFrProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcFrIngressProfIndex retrieves the value of the leaf McFrIngressProfIndex from the NokiaConf_Configure_Qos_McFrProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McFrIngressProfIndex is set, it can
// safely use t.GetMcFrIngressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McFrIngressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) GetMcFrIngressProfIndex() uint32 {
	if t == nil || t.McFrIngressProfIndex == nil {
		return 0
	}
	return *t.McFrIngressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_McFrProfileIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_McFrProfileIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.McFrIngressProfIndex == nil {
		return nil, fmt.Errorf("nil value for key McFrIngressProfIndex")
	}

	return map[string]interface{}{
		"mc-fr-ingress-prof-index": *t.McFrIngressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_McFrProfileIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_McFrProfileIngress.
func (*NokiaConf_Configure_Qos_McFrProfileIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_McFrProfileIngress_Class represents the /nokia-conf/configure/qos/mc-fr-profile-ingress/class YANG schema element.
type NokiaConf_Configure_Qos_McFrProfileIngress_Class struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *int32   `path:"class-id" module:"nokia-conf"`
	ReassemblyTimeout  *uint32  `path:"reassembly-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_McFrProfileIngress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_McFrProfileIngress_Class) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_McFrProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_McFrProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_McFrProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) GetClassId() int32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Qos_McFrProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 0
	}
	return *t.ReassemblyTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_McFrProfileIngress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_McFrProfileIngress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_McFrProfileIngress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_McFrProfileIngress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_McFrProfileIngress_Class.
func (*NokiaConf_Configure_Qos_McFrProfileIngress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MdAutoId represents the /nokia-conf/configure/qos/md-auto-id YANG schema element.
type NokiaConf_Configure_Qos_MdAutoId struct {
	QosPolicyIdRange *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange `path:"qos-policy-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MdAutoId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MdAutoId) IsYANGGoStruct() {}

// GetOrCreateQosPolicyIdRange retrieves the value of the QosPolicyIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_MdAutoId) GetOrCreateQosPolicyIdRange() *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange {
	if t.QosPolicyIdRange != nil {
		return t.QosPolicyIdRange
	}
	t.QosPolicyIdRange = &NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange{}
	return t.QosPolicyIdRange
}

// GetQosPolicyIdRange returns the value of the QosPolicyIdRange struct pointer
// from NokiaConf_Configure_Qos_MdAutoId. If the receiver or the field QosPolicyIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_MdAutoId) GetQosPolicyIdRange() *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange {
	if t != nil && t.QosPolicyIdRange != nil {
		return t.QosPolicyIdRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MdAutoId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MdAutoId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.QosPolicyIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MdAutoId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MdAutoId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MdAutoId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MdAutoId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MdAutoId.
func (*NokiaConf_Configure_Qos_MdAutoId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange represents the /nokia-conf/configure/qos/md-auto-id/qos-policy-id-range YANG schema element.
type NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange.
func (*NokiaConf_Configure_Qos_MdAutoId_QosPolicyIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MlpppProfileEgress represents the /nokia-conf/configure/qos/mlppp-profile-egress YANG schema element.
type NokiaConf_Configure_Qos_MlpppProfileEgress struct {
	ApplyGroups            []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Class                  map[int32]*NokiaConf_Configure_Qos_MlpppProfileEgress_Class                `path:"class" module:"nokia-conf"`
	Description            *string                                                                    `path:"description" module:"nokia-conf"`
	Fc                     map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_MlpppProfileEgress_Fc `path:"fc" module:"nokia-conf"`
	McMlpppEgressProfIndex *uint32                                                                    `path:"mc-mlppp-egress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MlpppProfileEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MlpppProfileEgress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Qos_MlpppProfileEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) NewClass(ClassId int32) (*NokiaConf_Configure_Qos_MlpppProfileEgress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_MlpppProfileEgress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Qos_MlpppProfileEgress_Class{
		ClassId: &ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Qos_MlpppProfileEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) RenameClass(oldK, newK int32) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = &newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MlpppProfileEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetOrCreateClass(ClassId int32) *NokiaConf_Configure_Qos_MlpppProfileEgress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Qos_MlpppProfileEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetClass(ClassId int32) *NokiaConf_Configure_Qos_MlpppProfileEgress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MlpppProfileEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) DeleteClass(ClassId int32) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Qos_MlpppProfileEgress_Class struct to the
// list Class of NokiaConf_Configure_Qos_MlpppProfileEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MlpppProfileEgress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) AppendClass(v *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_MlpppProfileEgress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_MlpppProfileEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_MlpppProfileEgress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_MlpppProfileEgress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_MlpppProfileEgress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_MlpppProfileEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MlpppProfileEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_MlpppProfileEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MlpppProfileEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_MlpppProfileEgress_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_MlpppProfileEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MlpppProfileEgress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) AppendFc(v *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_MlpppProfileEgress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MlpppProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MlpppProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_MlpppProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcMlpppEgressProfIndex retrieves the value of the leaf McMlpppEgressProfIndex from the NokiaConf_Configure_Qos_MlpppProfileEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McMlpppEgressProfIndex is set, it can
// safely use t.GetMcMlpppEgressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McMlpppEgressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) GetMcMlpppEgressProfIndex() uint32 {
	if t == nil || t.McMlpppEgressProfIndex == nil {
		return 0
	}
	return *t.McMlpppEgressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MlpppProfileEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MlpppProfileEgress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.McMlpppEgressProfIndex == nil {
		return nil, fmt.Errorf("nil value for key McMlpppEgressProfIndex")
	}

	return map[string]interface{}{
		"mc-mlppp-egress-prof-index": *t.McMlpppEgressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MlpppProfileEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MlpppProfileEgress.
func (*NokiaConf_Configure_Qos_MlpppProfileEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MlpppProfileEgress_Class represents the /nokia-conf/configure/qos/mlppp-profile-egress/class YANG schema element.
type NokiaConf_Configure_Qos_MlpppProfileEgress_Class struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *int32   `path:"class-id" module:"nokia-conf"`
	MaxQueueSize       *uint32  `path:"max-queue-size" module:"nokia-conf"`
	Mir                *uint32  `path:"mir" module:"nokia-conf"`
	Weight             *uint32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MlpppProfileEgress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MlpppProfileEgress_Class) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) GetClassId() int32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetMaxQueueSize retrieves the value of the leaf MaxQueueSize from the NokiaConf_Configure_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueSize is set, it can
// safely use t.GetMaxQueueSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) GetMaxQueueSize() uint32 {
	if t == nil || t.MaxQueueSize == nil {
		return 0
	}
	return *t.MaxQueueSize
}

// GetMir retrieves the value of the leaf Mir from the NokiaConf_Configure_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mir is set, it can
// safely use t.GetMir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) GetMir() uint32 {
	if t == nil || t.Mir == nil {
		return 0
	}
	return *t.Mir
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_MlpppProfileEgress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MlpppProfileEgress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MlpppProfileEgress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MlpppProfileEgress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MlpppProfileEgress_Class.
func (*NokiaConf_Configure_Qos_MlpppProfileEgress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MlpppProfileEgress_Fc represents the /nokia-conf/configure/qos/mlppp-profile-egress/fc YANG schema element.
type NokiaConf_Configure_Qos_MlpppProfileEgress_Fc struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName `path:"fc-name" module:"nokia-conf"`
	MlpppClass         *uint32                 `path:"mlppp-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MlpppProfileEgress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MlpppProfileEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MlpppProfileEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_MlpppProfileEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetMlpppClass retrieves the value of the leaf MlpppClass from the NokiaConf_Configure_Qos_MlpppProfileEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MlpppClass is set, it can
// safely use t.GetMlpppClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MlpppClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) GetMlpppClass() uint32 {
	if t == nil || t.MlpppClass == nil {
		return 0
	}
	return *t.MlpppClass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MlpppProfileEgress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MlpppProfileEgress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MlpppProfileEgress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MlpppProfileEgress_Fc.
func (*NokiaConf_Configure_Qos_MlpppProfileEgress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MlpppProfileIngress represents the /nokia-conf/configure/qos/mlppp-profile-ingress YANG schema element.
type NokiaConf_Configure_Qos_MlpppProfileIngress struct {
	ApplyGroups             []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Class                   map[int32]*NokiaConf_Configure_Qos_MlpppProfileIngress_Class `path:"class" module:"nokia-conf"`
	Description             *string                                                      `path:"description" module:"nokia-conf"`
	McMlpppIngressProfIndex *uint32                                                      `path:"mc-mlppp-ingress-prof-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MlpppProfileIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MlpppProfileIngress) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Qos_MlpppProfileIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) NewClass(ClassId int32) (*NokiaConf_Configure_Qos_MlpppProfileIngress_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_MlpppProfileIngress_Class)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Qos_MlpppProfileIngress_Class{
		ClassId: &ClassId,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Qos_MlpppProfileIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) RenameClass(oldK, newK int32) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassId = &newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MlpppProfileIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) GetOrCreateClass(ClassId int32) *NokiaConf_Configure_Qos_MlpppProfileIngress_Class {

	key := ClassId

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Qos_MlpppProfileIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) GetClass(ClassId int32) *NokiaConf_Configure_Qos_MlpppProfileIngress_Class {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_MlpppProfileIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) DeleteClass(ClassId int32) {
	key := ClassId

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Qos_MlpppProfileIngress_Class struct to the
// list Class of NokiaConf_Configure_Qos_MlpppProfileIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_MlpppProfileIngress_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) AppendClass(v *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[int32]*NokiaConf_Configure_Qos_MlpppProfileIngress_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MlpppProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MlpppProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_MlpppProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMcMlpppIngressProfIndex retrieves the value of the leaf McMlpppIngressProfIndex from the NokiaConf_Configure_Qos_MlpppProfileIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McMlpppIngressProfIndex is set, it can
// safely use t.GetMcMlpppIngressProfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McMlpppIngressProfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) GetMcMlpppIngressProfIndex() uint32 {
	if t == nil || t.McMlpppIngressProfIndex == nil {
		return 0
	}
	return *t.McMlpppIngressProfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MlpppProfileIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MlpppProfileIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.McMlpppIngressProfIndex == nil {
		return nil, fmt.Errorf("nil value for key McMlpppIngressProfIndex")
	}

	return map[string]interface{}{
		"mc-mlppp-ingress-prof-index": *t.McMlpppIngressProfIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MlpppProfileIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MlpppProfileIngress.
func (*NokiaConf_Configure_Qos_MlpppProfileIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_MlpppProfileIngress_Class represents the /nokia-conf/configure/qos/mlppp-profile-ingress/class YANG schema element.
type NokiaConf_Configure_Qos_MlpppProfileIngress_Class struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *int32   `path:"class-id" module:"nokia-conf"`
	ReassemblyTimeout  *uint32  `path:"reassembly-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_MlpppProfileIngress_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_MlpppProfileIngress_Class) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_MlpppProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_MlpppProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_MlpppProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) GetClassId() int32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Qos_MlpppProfileIngress_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 0
	}
	return *t.ReassemblyTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_MlpppProfileIngress_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_MlpppProfileIngress_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_MlpppProfileIngress_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_MlpppProfileIngress_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_MlpppProfileIngress_Class.
func (*NokiaConf_Configure_Qos_MlpppProfileIngress_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network represents the /nokia-conf/configure/qos/network YANG schema element.
type NokiaConf_Configure_Qos_Network struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                  `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Qos_Network_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Qos_Network_Ingress `path:"ingress" module:"nokia-conf"`
	NetworkPolicyName  *string                                  `path:"network-policy-name" module:"nokia-conf"`
	PolicyId           *uint32                                  `path:"policy-id" module:"nokia-conf"`
	Scope              E_NokiaTypesQos_ItemScope                `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network) GetOrCreateEgress() *NokiaConf_Configure_Qos_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Qos_Network_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network) GetOrCreateIngress() *NokiaConf_Configure_Qos_Network_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Qos_Network_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Qos_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network) GetEgress() *NokiaConf_Configure_Qos_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Qos_Network. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network) GetIngress() *NokiaConf_Configure_Qos_Network_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetNetworkPolicyName retrieves the value of the leaf NetworkPolicyName from the NokiaConf_Configure_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkPolicyName is set, it can
// safely use t.GetNetworkPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network) GetNetworkPolicyName() string {
	if t == nil || t.NetworkPolicyName == nil {
		return ""
	}
	return *t.NetworkPolicyName
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkPolicyName == nil {
		return nil, fmt.Errorf("nil value for key NetworkPolicyName")
	}

	return map[string]interface{}{
		"network-policy-name": *t.NetworkPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network.
func (*NokiaConf_Configure_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkIngress represents the /nokia-conf/configure/qos/network-ingress YANG schema element.
type NokiaConf_Configure_Qos_NetworkIngress struct {
	ApplyGroups                 []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description                 *string                                                   `path:"description" module:"nokia-conf"`
	Fc                          map[string]*NokiaConf_Configure_Qos_NetworkIngress_Fc     `path:"fc" module:"nokia-conf"`
	IngressClassificationPolicy *string                                                   `path:"ingress-classification-policy" module:"nokia-conf"`
	NetworkIngressPolicyName    *string                                                   `path:"network-ingress-policy-name" module:"nokia-conf"`
	Policer                     map[int32]*NokiaConf_Configure_Qos_NetworkIngress_Policer `path:"policer" module:"nokia-conf"`
	PolicerAllocation           E_NokiaTypesQos_NetworkIngressPolicerMode                 `path:"policer-allocation" module:"nokia-conf"`
	Scope                       E_NokiaTypesQos_ItemScope                                 `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkIngress) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_NetworkIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_NetworkIngress) NewFc(FcName string) (*NokiaConf_Configure_Qos_NetworkIngress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Qos_NetworkIngress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_NetworkIngress_Fc{
		FcName: &FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_NetworkIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) RenameFc(oldK, newK string) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = &newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetOrCreateFc(FcName string) *NokiaConf_Configure_Qos_NetworkIngress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_NetworkIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetFc(FcName string) *NokiaConf_Configure_Qos_NetworkIngress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_NetworkIngress) DeleteFc(FcName string) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_NetworkIngress_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_NetworkIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkIngress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_NetworkIngress) AppendFc(v *NokiaConf_Configure_Qos_NetworkIngress_Fc) error {
	if v.FcName == nil {
		return fmt.Errorf("invalid nil key received for FcName")
	}

	key := *v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Qos_NetworkIngress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Qos_NetworkIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_NetworkIngress) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Qos_NetworkIngress_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_NetworkIngress_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Qos_NetworkIngress_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Qos_NetworkIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Qos_NetworkIngress_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Qos_NetworkIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetPolicer(PolicerId int32) *NokiaConf_Configure_Qos_NetworkIngress_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_NetworkIngress) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Qos_NetworkIngress_Policer struct to the
// list Policer of NokiaConf_Configure_Qos_NetworkIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkIngress_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_NetworkIngress) AppendPolicer(v *NokiaConf_Configure_Qos_NetworkIngress_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_NetworkIngress_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIngressClassificationPolicy retrieves the value of the leaf IngressClassificationPolicy from the NokiaConf_Configure_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressClassificationPolicy is set, it can
// safely use t.GetIngressClassificationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressClassificationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetIngressClassificationPolicy() string {
	if t == nil || t.IngressClassificationPolicy == nil {
		return ""
	}
	return *t.IngressClassificationPolicy
}

// GetNetworkIngressPolicyName retrieves the value of the leaf NetworkIngressPolicyName from the NokiaConf_Configure_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkIngressPolicyName is set, it can
// safely use t.GetNetworkIngressPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkIngressPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetNetworkIngressPolicyName() string {
	if t == nil || t.NetworkIngressPolicyName == nil {
		return ""
	}
	return *t.NetworkIngressPolicyName
}

// GetPolicerAllocation retrieves the value of the leaf PolicerAllocation from the NokiaConf_Configure_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerAllocation is set, it can
// safely use t.GetPolicerAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetPolicerAllocation() E_NokiaTypesQos_NetworkIngressPolicerMode {
	if t == nil || t.PolicerAllocation == 0 {
		return NokiaTypesQos_NetworkIngressPolicerMode_none
	}
	return t.PolicerAllocation
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PolicerAllocation == 0 {
		t.PolicerAllocation = NokiaTypesQos_NetworkIngressPolicerMode_none
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkIngress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkIngressPolicyName == nil {
		return nil, fmt.Errorf("nil value for key NetworkIngressPolicyName")
	}

	return map[string]interface{}{
		"network-ingress-policy-name": *t.NetworkIngressPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkIngress.
func (*NokiaConf_Configure_Qos_NetworkIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkIngress_Fc represents the /nokia-conf/configure/qos/network-ingress/fc YANG schema element.
type NokiaConf_Configure_Qos_NetworkIngress_Fc struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             *string  `path:"fc-name" module:"nokia-conf"`
	MulticastPolicer   *int32   `path:"multicast-policer" module:"nokia-conf"`
	Policer            *int32   `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkIngress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkIngress_Fc) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) GetFcName() string {
	if t == nil || t.FcName == nil {
		return ""
	}
	return *t.FcName
}

// GetMulticastPolicer retrieves the value of the leaf MulticastPolicer from the NokiaConf_Configure_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastPolicer is set, it can
// safely use t.GetMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) GetMulticastPolicer() int32 {
	if t == nil || t.MulticastPolicer == nil {
		return 0
	}
	return *t.MulticastPolicer
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_NetworkIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkIngress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkIngress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcName == nil {
		return nil, fmt.Errorf("nil value for key FcName")
	}

	return map[string]interface{}{
		"fc-name": *t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkIngress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkIngress_Fc.
func (*NokiaConf_Configure_Qos_NetworkIngress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkIngress_Policer represents the /nokia-conf/configure/qos/network-ingress/policer YANG schema element.
type NokiaConf_Configure_Qos_NetworkIngress_Policer struct {
	AdaptationRule     *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_NetworkIngress_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_NetworkIngress_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PolicerId          *int32                                                         `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaConf_Configure_Qos_NetworkIngress_Policer_StatMode      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkIngress_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkIngress_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetOrCreateRate() *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_NetworkIngress_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetAdaptationRule() *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_NetworkIngress_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetRate() *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetCbs() NokiaConf_Configure_Qos_NetworkIngress_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Qos_NetworkIngress_Policer_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetMbs() NokiaConf_Configure_Qos_NetworkIngress_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Qos_NetworkIngress_Policer_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_NetworkIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) GetStatMode() E_NokiaConf_Configure_Qos_NetworkIngress_Policer_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkIngress_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Qos_NetworkIngress_Policer_Cbs_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Qos_NetworkIngress_Policer_Mbs_Enum_auto
	}
	t.AdaptationRule.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkIngress_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkIngress_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkIngress_Policer.
func (*NokiaConf_Configure_Qos_NetworkIngress_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule represents the /nokia-conf/configure/qos/network-ingress/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule.
func (*NokiaConf_Configure_Qos_NetworkIngress_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate represents the /nokia-conf/configure/qos/network-ingress/policer/rate YANG schema element.
type NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate struct {
	Cir NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) GetCir() NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionUint32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) GetPir() NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate_Pir_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionUint32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate_Pir_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate.
func (*NokiaConf_Configure_Qos_NetworkIngress_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue represents the /nokia-conf/configure/qos/network-queue YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                              `path:"description" module:"nokia-conf"`
	EgressHsmda        *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda                    `path:"egress-hsmda" module:"nokia-conf"`
	Fc                 map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_NetworkQueue_Fc `path:"fc" module:"nokia-conf"`
	HsAttachmentPolicy *string                                                              `path:"hs-attachment-policy" module:"nokia-conf"`
	HsWrrGroup         map[uint32]*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup          `path:"hs-wrr-group" module:"nokia-conf"`
	NetworkQueuePolicy *string                                                              `path:"network-queue-policy" module:"nokia-conf"`
	Queue              map[int32]*NokiaConf_Configure_Qos_NetworkQueue_Queue                `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_NetworkQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_NetworkQueue) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_NetworkQueue_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_NetworkQueue_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_NetworkQueue_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_NetworkQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_NetworkQueue_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_NetworkQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_NetworkQueue_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_NetworkQueue) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_NetworkQueue_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_NetworkQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkQueue_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_NetworkQueue) AppendFc(v *NokiaConf_Configure_Qos_NetworkQueue_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_NetworkQueue_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Qos_NetworkQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_NetworkQueue) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Qos_NetworkQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Qos_NetworkQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_NetworkQueue) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Qos_NetworkQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_NetworkQueue) AppendHsWrrGroup(v *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_NetworkQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_NetworkQueue) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_NetworkQueue_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_NetworkQueue_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_NetworkQueue_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_NetworkQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_NetworkQueue_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_NetworkQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_NetworkQueue_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_NetworkQueue) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_NetworkQueue_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_NetworkQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkQueue_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_NetworkQueue) AppendQueue(v *NokiaConf_Configure_Qos_NetworkQueue_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_NetworkQueue_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateEgressHsmda retrieves the value of the EgressHsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetOrCreateEgressHsmda() *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda {
	if t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	t.EgressHsmda = &NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda{}
	return t.EgressHsmda
}

// GetEgressHsmda returns the value of the EgressHsmda struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue. If the receiver or the field EgressHsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetEgressHsmda() *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda {
	if t != nil && t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsAttachmentPolicy retrieves the value of the leaf HsAttachmentPolicy from the NokiaConf_Configure_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAttachmentPolicy is set, it can
// safely use t.GetHsAttachmentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAttachmentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetHsAttachmentPolicy() string {
	if t == nil || t.HsAttachmentPolicy == nil {
		return ""
	}
	return *t.HsAttachmentPolicy
}

// GetNetworkQueuePolicy retrieves the value of the leaf NetworkQueuePolicy from the NokiaConf_Configure_Qos_NetworkQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkQueuePolicy is set, it can
// safely use t.GetNetworkQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkQueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue) GetNetworkQueuePolicy() string {
	if t == nil || t.NetworkQueuePolicy == nil {
		return ""
	}
	return *t.NetworkQueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressHsmda.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkQueue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkQueue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkQueuePolicy == nil {
		return nil, fmt.Errorf("nil value for key NetworkQueuePolicy")
	}

	return map[string]interface{}{
		"network-queue-policy": *t.NetworkQueuePolicy,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue.
func (*NokiaConf_Configure_Qos_NetworkQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda represents the /nokia-conf/configure/qos/network-queue/egress-hsmda YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda struct {
	PacketByteOffset *int32                                                            `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue `path:"queue" module:"nokia-conf"`
	WrrPolicy        *string                                                           `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) AppendQueue(v *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda.
func (*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue represents the /nokia-conf/configure/qos/network-queue/egress-hsmda/queue YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	PercentRate        *float64                                                                `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                  `path:"queue-id" module:"nokia-conf"`
	SlopePolicy        *string                                                                 `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *uint32                                                                 `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetBurstLimit() NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetMbs() NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100.00
	}
	return *t.PercentRate
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) GetWrrWeight() uint32 {
	if t == nil || t.WrrWeight == nil {
		return 1
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_BurstLimit_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_Mbs_Enum_auto
	}
	if t.PercentRate == nil {
		var v float64 = 100.00
		t.PercentRate = &v
	}
	if t.WrrWeight == nil {
		var v uint32 = 1
		t.WrrWeight = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue.
func (*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule represents the /nokia-conf/configure/qos/network-queue/egress-hsmda/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_NetworkQueue_EgressHsmda_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Fc represents the /nokia-conf/configure/qos/network-queue/fc YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Fc struct {
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	EgressHsmda        *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda `path:"egress-hsmda" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                              `path:"fc-name" module:"nokia-conf"`
	MulticastQueue     *int32                                               `path:"multicast-queue" module:"nokia-conf"`
	Queue              *int32                                               `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Fc) IsYANGGoStruct() {}

// GetOrCreateEgressHsmda retrieves the value of the EgressHsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) GetOrCreateEgressHsmda() *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda {
	if t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	t.EgressHsmda = &NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda{}
	return t.EgressHsmda
}

// GetEgressHsmda returns the value of the EgressHsmda struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_Fc. If the receiver or the field EgressHsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) GetEgressHsmda() *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda {
	if t != nil && t.EgressHsmda != nil {
		return t.EgressHsmda
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetMulticastQueue retrieves the value of the leaf MulticastQueue from the NokiaConf_Configure_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastQueue is set, it can
// safely use t.GetMulticastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) GetMulticastQueue() int32 {
	if t == nil || t.MulticastQueue == nil {
		return 0
	}
	return *t.MulticastQueue
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_NetworkQueue_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressHsmda.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkQueue_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Fc.
func (*NokiaConf_Configure_Qos_NetworkQueue_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda represents the /nokia-conf/configure/qos/network-queue/fc/egress-hsmda YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda struct {
	Queue *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda.
func (*NokiaConf_Configure_Qos_NetworkQueue_Fc_EgressHsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup represents the /nokia-conf/configure/qos/network-queue/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup struct {
	AdaptationRule     *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                         `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *uint32                                                         `path:"hs-class-weight" module:"nokia-conf"`
	Rate               *uint32                                                         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) GetAdaptationRule() *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 100
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.Rate == nil {
		var v uint32 = 100
		t.Rate = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup.
func (*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule represents the /nokia-conf/configure/qos/network-queue/hs-wrr-group/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) IsYANGGoStruct() {}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule.
func (*NokiaConf_Configure_Qos_NetworkQueue_HsWrrGroup_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Queue represents the /nokia-conf/configure/qos/network-queue/queue YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                   `path:"avg-frame-overhead" module:"nokia-conf"`
	Cbs                *float64                                                   `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail       `path:"drop-tail" module:"nokia-conf"`
	HsAltPortClassPool *bool                                                      `path:"hs-alt-port-class-pool" module:"nokia-conf"`
	HsClassWeight      *uint32                                                    `path:"hs-class-weight" module:"nokia-conf"`
	HsMbs              *float64                                                   `path:"hs-mbs" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue    `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *uint32                                                    `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                *float64                                                   `path:"mbs" module:"nokia-conf"`
	Multipoint         *bool                                                      `path:"multipoint" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent     `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	QueueId            *int32                                                     `path:"queue-id" module:"nokia-conf"`
	QueueType          E_NokiaConf_Configure_Qos_NetworkQueue_Queue_QueueType     `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate           `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetOrCreatePortParent() *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetOrCreateRate() *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetDropTail() *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetHsWredQueue() *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_Queue. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetPortParent() *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetRate() *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.00
	}
	return *t.AvgFrameOverhead
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetCbs() float64 {
	if t == nil || t.Cbs == nil {
		return 0.0
	}
	return *t.Cbs
}

// GetHsAltPortClassPool retrieves the value of the leaf HsAltPortClassPool from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAltPortClassPool is set, it can
// safely use t.GetHsAltPortClassPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAltPortClassPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetHsAltPortClassPool() bool {
	if t == nil || t.HsAltPortClassPool == nil {
		return false
	}
	return *t.HsAltPortClassPool
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetHsMbs retrieves the value of the leaf HsMbs from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsMbs is set, it can
// safely use t.GetHsMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetHsMbs() float64 {
	if t == nil || t.HsMbs == nil {
		return 100.00
	}
	return *t.HsMbs
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetHsWrrWeight() uint32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetMbs() float64 {
	if t == nil || t.Mbs == nil {
		return 0.0
	}
	return *t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Qos_NetworkQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) GetQueueType() E_NokiaConf_Configure_Qos_NetworkQueue_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaConf_Configure_Qos_NetworkQueue_Queue_QueueType_auto_expedited
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AvgFrameOverhead == nil {
		var v float64 = 0.00
		t.AvgFrameOverhead = &v
	}
	if t.HsAltPortClassPool == nil {
		var v bool = false
		t.HsAltPortClassPool = &v
	}
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.HsMbs == nil {
		var v float64 = 100.00
		t.HsMbs = &v
	}
	if t.HsWrrWeight == nil {
		var v uint32 = 1
		t.HsWrrWeight = &v
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaConf_Configure_Qos_NetworkQueue_Queue_QueueType_auto_expedited
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_NetworkQueue_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Queue.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule represents the /nokia-conf/configure/qos/network-queue/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Fir E_NokiaTypesQos_AdaptationRule `path:"fir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) GetFir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Fir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Fir == 0 {
		t.Fir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail represents the /nokia-conf/configure/qos/network-queue/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail struct {
	Low *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) GetLow() *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low represents the /nokia-conf/configure/qos/network-queue/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue represents the /nokia-conf/configure/qos/network-queue/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent represents the /nokia-conf/configure/qos/network-queue/queue/port-parent YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate represents the /nokia-conf/configure/qos/network-queue/queue/rate YANG schema element.
type NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate struct {
	Cir *int32 `path:"cir" module:"nokia-conf"`
	Fir *int32 `path:"fir" module:"nokia-conf"`
	Pir *int32 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) GetCir() int32 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) GetFir() int32 {
	if t == nil || t.Fir == nil {
		return 0
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) GetPir() int32 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fir == nil {
		var v int32 = 0
		t.Fir = &v
	}
	if t.Pir == nil {
		var v int32 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate.
func (*NokiaConf_Configure_Qos_NetworkQueue_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress represents the /nokia-conf/configure/qos/network/egress YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress struct {
	Dscp          map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_Network_Egress_Dscp `path:"dscp" module:"nokia-conf"`
	Fc            map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_Network_Egress_Fc    `path:"fc" module:"nokia-conf"`
	IpCriteria    *NokiaConf_Configure_Qos_Network_Egress_IpCriteria                        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria  *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria                      `path:"ipv6-criteria" module:"nokia-conf"`
	Prec          map[int32]*NokiaConf_Configure_Qos_Network_Egress_Prec                    `path:"prec" module:"nokia-conf"`
	RemarkTrusted *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted                     `path:"remark-trusted" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress) IsYANGGoStruct() {}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Qos_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Egress) NewDscp(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Qos_Network_Egress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_Network_Egress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Qos_Network_Egress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Qos_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Egress) RenameDscp(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetOrCreateDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_Network_Egress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Qos_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_Network_Egress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Egress) DeleteDscp(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Qos_Network_Egress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Qos_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Egress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Egress) AppendDscp(v *NokiaConf_Configure_Qos_Network_Egress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_Network_Egress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Egress) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_Network_Egress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_Network_Egress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_Network_Egress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Egress) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_Network_Egress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_Network_Egress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Egress) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_Network_Egress_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Egress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Egress) AppendFc(v *NokiaConf_Configure_Qos_Network_Egress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_Network_Egress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewPrec creates a new entry in the Prec list of the
// NokiaConf_Configure_Qos_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Egress) NewPrec(PrecValue int32) (*NokiaConf_Configure_Qos_Network_Egress_Prec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[int32]*NokiaConf_Configure_Qos_Network_Egress_Prec)
	}

	key := PrecValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prec", key)
	}

	t.Prec[key] = &NokiaConf_Configure_Qos_Network_Egress_Prec{
		PrecValue: &PrecValue,
	}

	return t.Prec[key], nil
}

// RenamePrec renames an entry in the list Prec within
// the NokiaConf_Configure_Qos_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Egress) RenamePrec(oldK, newK int32) error {
	if _, ok := t.Prec[newK]; ok {
		return fmt.Errorf("key %v already exists in Prec", newK)
	}

	e, ok := t.Prec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prec", oldK)
	}
	e.PrecValue = &newK

	t.Prec[newK] = e
	delete(t.Prec, oldK)
	return nil
}

// GetOrCreatePrec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetOrCreatePrec(PrecValue int32) *NokiaConf_Configure_Qos_Network_Egress_Prec {

	key := PrecValue

	if v, ok := t.Prec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrec(PrecValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrec got unexpected error: %v", err))
	}
	return v
}

// GetPrec retrieves the value with the specified key from
// the Prec map field of NokiaConf_Configure_Qos_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetPrec(PrecValue int32) *NokiaConf_Configure_Qos_Network_Egress_Prec {

	if t == nil {
		return nil
	}

	key := PrecValue

	if lm, ok := t.Prec[key]; ok {
		return lm
	}
	return nil
}

// DeletePrec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Egress) DeletePrec(PrecValue int32) {
	key := PrecValue

	delete(t.Prec, key)
}

// AppendPrec appends the supplied NokiaConf_Configure_Qos_Network_Egress_Prec struct to the
// list Prec of NokiaConf_Configure_Qos_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Egress_Prec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Egress) AppendPrec(v *NokiaConf_Configure_Qos_Network_Egress_Prec) error {
	if v.PrecValue == nil {
		return fmt.Errorf("invalid nil key received for PrecValue")
	}

	key := *v.PrecValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[int32]*NokiaConf_Configure_Qos_Network_Egress_Prec)
	}

	if _, ok := t.Prec[key]; ok {
		return fmt.Errorf("duplicate key for list Prec %v", key)
	}

	t.Prec[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetOrCreateIpCriteria() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetOrCreateRemarkTrusted retrieves the value of the RemarkTrusted field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetOrCreateRemarkTrusted() *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted {
	if t.RemarkTrusted != nil {
		return t.RemarkTrusted
	}
	t.RemarkTrusted = &NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted{}
	return t.RemarkTrusted
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Qos_Network_Egress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetIpCriteria() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Qos_Network_Egress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetIpv6Criteria() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetRemarkTrusted returns the value of the RemarkTrusted struct pointer
// from NokiaConf_Configure_Qos_Network_Egress. If the receiver or the field RemarkTrusted is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress) GetRemarkTrusted() *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted {
	if t != nil && t.RemarkTrusted != nil {
		return t.RemarkTrusted
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	t.RemarkTrusted.PopulateDefaults()
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Prec {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress.
func (*NokiaConf_Configure_Qos_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Dscp represents the /nokia-conf/configure/qos/network/egress/dscp YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Dscp struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName           E_NokiaTypesQos_DscpName      `path:"dscp-name" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName       `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_EgressProfile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Dscp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Egress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Egress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Dscp.
func (*NokiaConf_Configure_Qos_Network_Egress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Fc represents the /nokia-conf/configure/qos/network/egress/fc YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Fc struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	DeMark             *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark            `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	Dot1PInProfile     *int32                                                       `path:"dot1p-in-profile" module:"nokia-conf"`
	Dot1POutProfile    *int32                                                       `path:"dot1p-out-profile" module:"nokia-conf"`
	DscpInProfile      E_NokiaTypesQos_DscpName                                     `path:"dscp-in-profile" module:"nokia-conf"`
	DscpOutProfile     E_NokiaTypesQos_DscpName                                     `path:"dscp-out-profile" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                                      `path:"fc-name" module:"nokia-conf"`
	LspExpInProfile    *int32                                                       `path:"lsp-exp-in-profile" module:"nokia-conf"`
	LspExpOutProfile   *int32                                                       `path:"lsp-exp-out-profile" module:"nokia-conf"`
	PortRedirectGroup  *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetDeMark() *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Fc. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetPortRedirectGroup() *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1PInProfile retrieves the value of the leaf Dot1PInProfile from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PInProfile is set, it can
// safely use t.GetDot1PInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetDot1PInProfile() int32 {
	if t == nil || t.Dot1PInProfile == nil {
		return 0
	}
	return *t.Dot1PInProfile
}

// GetDot1POutProfile retrieves the value of the leaf Dot1POutProfile from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1POutProfile is set, it can
// safely use t.GetDot1POutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1POutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetDot1POutProfile() int32 {
	if t == nil || t.Dot1POutProfile == nil {
		return 0
	}
	return *t.Dot1POutProfile
}

// GetDscpInProfile retrieves the value of the leaf DscpInProfile from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpInProfile is set, it can
// safely use t.GetDscpInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetDscpInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpInProfile == 0 {
		return 0
	}
	return t.DscpInProfile
}

// GetDscpOutProfile retrieves the value of the leaf DscpOutProfile from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpOutProfile is set, it can
// safely use t.GetDscpOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpOutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetDscpOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpOutProfile == 0 {
		return 0
	}
	return t.DscpOutProfile
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetLspExpInProfile retrieves the value of the leaf LspExpInProfile from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpInProfile is set, it can
// safely use t.GetLspExpInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetLspExpInProfile() int32 {
	if t == nil || t.LspExpInProfile == nil {
		return 0
	}
	return *t.LspExpInProfile
}

// GetLspExpOutProfile retrieves the value of the leaf LspExpOutProfile from the NokiaConf_Configure_Qos_Network_Egress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpOutProfile is set, it can
// safely use t.GetLspExpOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpOutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) GetLspExpOutProfile() int32 {
	if t == nil || t.LspExpOutProfile == nil {
		return 0
	}
	return *t.LspExpOutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Egress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Fc.
func (*NokiaConf_Configure_Qos_Network_Egress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark represents the /nokia-conf/configure/qos/network/egress/fc/de-mark YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark.
func (*NokiaConf_Configure_Qos_Network_Egress_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup represents the /nokia-conf/configure/qos/network/egress/fc/port-redirect-group YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup struct {
	Policer *int32 `path:"policer" module:"nokia-conf"`
	Queue   *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) IsYANGGoStruct() {}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup.
func (*NokiaConf_Configure_Qos_Network_Egress_Fc_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria represents the /nokia-conf/configure/qos/network/egress/ip-criteria YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_Network_Egress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_Network_Egress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_Network_Egress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_Network_Egress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                         `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                         `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action struct {
	Fc                E_NokiaTypesSros_FcName                                                           `path:"fc" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
	Profile           E_NokiaTypesQos_EgressProfile                                                     `path:"profile" module:"nokia-conf"`
	Type              E_NokiaTypesQos_CriteriaActionType                                                `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) GetPortRedirectGroup() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/action/port-redirect-group YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup struct {
	Policer *int32 `path:"policer" module:"nokia-conf"`
	Queue   *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Action_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                     `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	IcmpType *int32                                                                       `path:"icmp-type" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetIcmpType retrieves the value of the leaf IcmpType from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpType is set, it can
// safely use t.GetIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetIcmpType() int32 {
	if t == nil || t.IcmpType == nil {
		return 0
	}
	return *t.IcmpType
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                       `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                       `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                       `path:"lt" module:"nokia-conf"`
	PortList *string                                                                      `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                       `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                       `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                       `path:"lt" module:"nokia-conf"`
	PortList *string                                                                      `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/network/egress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_Network_Egress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                           `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action struct {
	Fc                E_NokiaTypesSros_FcName                                                             `path:"fc" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
	Profile           E_NokiaTypesQos_EgressProfile                                                       `path:"profile" module:"nokia-conf"`
	Type              E_NokiaTypesQos_CriteriaActionType                                                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetPortRedirectGroup() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/action/port-redirect-group YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup struct {
	Policer *int32 `path:"policer" module:"nokia-conf"`
	Queue   *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) IsYANGGoStruct() {
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Action_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                         `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Fragment   E_NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	IcmpType   *int32                                                                           `path:"icmp-type" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetIcmpType retrieves the value of the leaf IcmpType from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpType is set, it can
// safely use t.GetIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetIcmpType() int32 {
	if t == nil || t.IcmpType == nil {
		return 0
	}
	return *t.IcmpType
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                         `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                         `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                         `path:"lt" module:"nokia-conf"`
	PortList *string                                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                         `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                         `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                         `path:"lt" module:"nokia-conf"`
	PortList *string                                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/network/egress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_Network_Egress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_Prec represents the /nokia-conf/configure/qos/network/egress/prec YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_Prec struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName       `path:"fc" module:"nokia-conf"`
	PrecValue          *int32                        `path:"prec-value" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_EgressProfile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_Prec) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPrecValue retrieves the value of the leaf PrecValue from the NokiaConf_Configure_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrecValue is set, it can
// safely use t.GetPrecValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrecValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) GetPrecValue() int32 {
	if t == nil || t.PrecValue == nil {
		return 0
	}
	return *t.PrecValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Egress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Egress_Prec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrecValue == nil {
		return nil, fmt.Errorf("nil value for key PrecValue")
	}

	return map[string]interface{}{
		"prec-value": *t.PrecValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_Prec.
func (*NokiaConf_Configure_Qos_Network_Egress_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted represents the /nokia-conf/configure/qos/network/egress/remark-trusted YANG schema element.
type NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted struct {
	ForceEgressMarking *bool `path:"force-egress-marking" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted) IsYANGGoStruct() {}

// GetForceEgressMarking retrieves the value of the leaf ForceEgressMarking from the NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceEgressMarking is set, it can
// safely use t.GetForceEgressMarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceEgressMarking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted) GetForceEgressMarking() bool {
	if t == nil || t.ForceEgressMarking == nil {
		return false
	}
	return *t.ForceEgressMarking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceEgressMarking == nil {
		var v bool = false
		t.ForceEgressMarking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted.
func (*NokiaConf_Configure_Qos_Network_Egress_RemarkTrusted) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress represents the /nokia-conf/configure/qos/network/ingress YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress struct {
	DefaultAction *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction                     `path:"default-action" module:"nokia-conf"`
	Dot1P         map[int32]*NokiaConf_Configure_Qos_Network_Ingress_Dot1P                   `path:"dot1p" module:"nokia-conf"`
	Dscp          map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_Network_Ingress_Dscp `path:"dscp" module:"nokia-conf"`
	Fc            map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_Network_Ingress_Fc    `path:"fc" module:"nokia-conf"`
	IpCriteria    *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria                        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria  *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria                      `path:"ipv6-criteria" module:"nokia-conf"`
	LerUseDscp    *bool                                                                      `path:"ler-use-dscp" module:"nokia-conf"`
	LspExp        map[int32]*NokiaConf_Configure_Qos_Network_Ingress_LspExp                  `path:"lsp-exp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Ingress) NewDot1P(Dot1PValue int32) (*NokiaConf_Configure_Qos_Network_Ingress_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_Network_Ingress_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Qos_Network_Ingress_Dot1P{
		Dot1PValue: &Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Ingress) RenameDot1P(oldK, newK int32) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = &newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetOrCreateDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_Network_Ingress_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_Network_Ingress_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Ingress) DeleteDot1P(Dot1PValue int32) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Qos_Network_Ingress_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Ingress_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Ingress) AppendDot1P(v *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) error {
	if v.Dot1PValue == nil {
		return fmt.Errorf("invalid nil key received for Dot1PValue")
	}

	key := *v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_Network_Ingress_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Ingress) NewDscp(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Qos_Network_Ingress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_Network_Ingress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Qos_Network_Ingress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Ingress) RenameDscp(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetOrCreateDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_Network_Ingress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_Network_Ingress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Ingress) DeleteDscp(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Qos_Network_Ingress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Ingress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Ingress) AppendDscp(v *NokiaConf_Configure_Qos_Network_Ingress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_Network_Ingress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Ingress) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_Network_Ingress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_Network_Ingress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_Network_Ingress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Ingress) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_Network_Ingress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_Network_Ingress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Ingress) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_Network_Ingress_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Ingress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Ingress) AppendFc(v *NokiaConf_Configure_Qos_Network_Ingress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_Network_Ingress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Qos_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Ingress) NewLspExp(LspExpValue int32) (*NokiaConf_Configure_Qos_Network_Ingress_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_Network_Ingress_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Qos_Network_Ingress_LspExp{
		LspExpValue: &LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Qos_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Ingress) RenameLspExp(oldK, newK int32) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = &newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetOrCreateLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_Network_Ingress_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Qos_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_Network_Ingress_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Ingress) DeleteLspExp(LspExpValue int32) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Qos_Network_Ingress_LspExp struct to the
// list LspExp of NokiaConf_Configure_Qos_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Ingress_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Ingress) AppendLspExp(v *NokiaConf_Configure_Qos_Network_Ingress_LspExp) error {
	if v.LspExpValue == nil {
		return fmt.Errorf("invalid nil key received for LspExpValue")
	}

	key := *v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_Network_Ingress_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetOrCreateDefaultAction() *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Qos_Network_Ingress_DefaultAction{}
	return t.DefaultAction
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetOrCreateIpCriteria() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetDefaultAction() *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetIpCriteria() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetIpv6Criteria() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetLerUseDscp retrieves the value of the leaf LerUseDscp from the NokiaConf_Configure_Qos_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LerUseDscp is set, it can
// safely use t.GetLerUseDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LerUseDscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress) GetLerUseDscp() bool {
	if t == nil || t.LerUseDscp == nil {
		return false
	}
	return *t.LerUseDscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LerUseDscp == nil {
		var v bool = false
		t.LerUseDscp = &v
	}
	t.DefaultAction.PopulateDefaults()
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress.
func (*NokiaConf_Configure_Qos_Network_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_DefaultAction represents the /nokia-conf/configure/qos/network/ingress/default-action YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_DefaultAction struct {
	Fc      E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Ingress_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_be
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Ingress_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_Profile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_be
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_Profile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_DefaultAction.
func (*NokiaConf_Configure_Qos_Network_Ingress_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Dot1P represents the /nokia-conf/configure/qos/network/ingress/dot1p YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Dot1P struct {
	ApplyGroups        []string                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Dot1PValue         *int32                    `path:"dot1p-value" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName   `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_ProfileDe `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Dot1P) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) GetDot1PValue() int32 {
	if t == nil || t.Dot1PValue == nil {
		return 0
	}
	return *t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Ingress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) GetProfile() E_NokiaTypesQos_ProfileDe {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Ingress_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dot1PValue == nil {
		return nil, fmt.Errorf("nil value for key Dot1PValue")
	}

	return map[string]interface{}{
		"dot1p-value": *t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Dot1P.
func (*NokiaConf_Configure_Qos_Network_Ingress_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Dscp represents the /nokia-conf/configure/qos/network/ingress/dscp YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Dscp struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName           E_NokiaTypesQos_DscpName `path:"dscp-name" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName  `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_Profile  `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Dscp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Ingress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Ingress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Dscp.
func (*NokiaConf_Configure_Qos_Network_Ingress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Fc represents the /nokia-conf/configure/qos/network/ingress/fc YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Fc struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                                     `path:"fc-name" module:"nokia-conf"`
	FpRedirectGroup    *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Fc) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Fc. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) GetFpRedirectGroup() *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Ingress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Ingress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_Network_Ingress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Ingress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Fc.
func (*NokiaConf_Configure_Qos_Network_Ingress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup represents the /nokia-conf/configure/qos/network/ingress/fc/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup struct {
	BroadcastPolicer *int32 `path:"broadcast-policer" module:"nokia-conf"`
	MulticastPolicer *int32 `path:"multicast-policer" module:"nokia-conf"`
	Policer          *int32 `path:"policer" module:"nokia-conf"`
	UnknownPolicer   *int32 `path:"unknown-policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) IsYANGGoStruct() {}

// GetBroadcastPolicer retrieves the value of the leaf BroadcastPolicer from the NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastPolicer is set, it can
// safely use t.GetBroadcastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) GetBroadcastPolicer() int32 {
	if t == nil || t.BroadcastPolicer == nil {
		return 0
	}
	return *t.BroadcastPolicer
}

// GetMulticastPolicer retrieves the value of the leaf MulticastPolicer from the NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastPolicer is set, it can
// safely use t.GetMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) GetMulticastPolicer() int32 {
	if t == nil || t.MulticastPolicer == nil {
		return 0
	}
	return *t.MulticastPolicer
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetUnknownPolicer retrieves the value of the leaf UnknownPolicer from the NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownPolicer is set, it can
// safely use t.GetUnknownPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) GetUnknownPolicer() int32 {
	if t == nil || t.UnknownPolicer == nil {
		return 0
	}
	return *t.UnknownPolicer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup.
func (*NokiaConf_Configure_Qos_Network_Ingress_Fc_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria represents the /nokia-conf/configure/qos/network/ingress/ip-criteria YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                          `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                          `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action struct {
	Fc      E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile            `path:"profile" module:"nokia-conf"`
	Type    E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                      `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                        `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                        `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                        `path:"lt" module:"nokia-conf"`
	PortList *string                                                                       `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                        `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                        `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                        `path:"lt" module:"nokia-conf"`
	PortList *string                                                                       `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/network/ingress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_Network_Ingress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                            `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                            `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action struct {
	Fc      E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_Profile            `path:"profile" module:"nokia-conf"`
	Type    E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                          `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Fragment   E_NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq       *int32                                                                          `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                          `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                          `path:"lt" module:"nokia-conf"`
	PortList *string                                                                         `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq       *int32                                                                          `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                          `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                          `path:"lt" module:"nokia-conf"`
	PortList *string                                                                         `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/network/ingress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_Network_Ingress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_Network_Ingress_LspExp represents the /nokia-conf/configure/qos/network/ingress/lsp-exp YANG schema element.
type NokiaConf_Configure_Qos_Network_Ingress_LspExp struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	LspExpValue        *int32                  `path:"lsp-exp-value" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_Network_Ingress_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_Network_Ingress_LspExp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) GetLspExpValue() int32 {
	if t == nil || t.LspExpValue == nil {
		return 0
	}
	return *t.LspExpValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_Network_Ingress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_Network_Ingress_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_Network_Ingress_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspExpValue == nil {
		return nil, fmt.Errorf("nil value for key LspExpValue")
	}

	return map[string]interface{}{
		"lsp-exp-value": *t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_Network_Ingress_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_Network_Ingress_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_Network_Ingress_LspExp.
func (*NokiaConf_Configure_Qos_Network_Ingress_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PacketByteOffset represents the /nokia-conf/configure/qos/packet-byte-offset YANG schema element.
type NokiaConf_Configure_Qos_PacketByteOffset struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PacketByteOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PacketByteOffset) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PacketByteOffset) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PacketByteOffset) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PacketByteOffset) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PacketByteOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PacketByteOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PacketByteOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PacketByteOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PacketByteOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PacketByteOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PacketByteOffset.
func (*NokiaConf_Configure_Qos_PacketByteOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PolicerControlPolicy represents the /nokia-conf/configure/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Qos_PolicerControlPolicy struct {
	ApplyGroups              []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description              *string                                                      `path:"description" module:"nokia-conf"`
	PolicerControlPolicyName *string                                                      `path:"policer-control-policy-name" module:"nokia-conf"`
	Root                     *NokiaConf_Configure_Qos_PolicerControlPolicy_Root           `path:"root" module:"nokia-conf"`
	Tier                     map[int32]*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier `path:"tier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// NewTier creates a new entry in the Tier list of the
// NokiaConf_Configure_Qos_PolicerControlPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) NewTier(TierId int32) (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[int32]*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier)
	}

	key := TierId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tier", key)
	}

	t.Tier[key] = &NokiaConf_Configure_Qos_PolicerControlPolicy_Tier{
		TierId: &TierId,
	}

	return t.Tier[key], nil
}

// RenameTier renames an entry in the list Tier within
// the NokiaConf_Configure_Qos_PolicerControlPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) RenameTier(oldK, newK int32) error {
	if _, ok := t.Tier[newK]; ok {
		return fmt.Errorf("key %v already exists in Tier", newK)
	}

	e, ok := t.Tier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tier", oldK)
	}
	e.TierId = &newK

	t.Tier[newK] = e
	delete(t.Tier, oldK)
	return nil
}

// GetOrCreateTier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PolicerControlPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetOrCreateTier(TierId int32) *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier {

	key := TierId

	if v, ok := t.Tier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTier(TierId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTier got unexpected error: %v", err))
	}
	return v
}

// GetTier retrieves the value with the specified key from
// the Tier map field of NokiaConf_Configure_Qos_PolicerControlPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetTier(TierId int32) *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier {

	if t == nil {
		return nil
	}

	key := TierId

	if lm, ok := t.Tier[key]; ok {
		return lm
	}
	return nil
}

// DeleteTier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PolicerControlPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) DeleteTier(TierId int32) {
	key := TierId

	delete(t.Tier, key)
}

// AppendTier appends the supplied NokiaConf_Configure_Qos_PolicerControlPolicy_Tier struct to the
// list Tier of NokiaConf_Configure_Qos_PolicerControlPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PolicerControlPolicy_Tier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) AppendTier(v *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) error {
	if v.TierId == nil {
		return fmt.Errorf("invalid nil key received for TierId")
	}

	key := *v.TierId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tier == nil {
		t.Tier = make(map[int32]*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier)
	}

	if _, ok := t.Tier[key]; ok {
		return fmt.Errorf("duplicate key for list Tier %v", key)
	}

	t.Tier[key] = v
	return nil
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetOrCreateRoot() *NokiaConf_Configure_Qos_PolicerControlPolicy_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Qos_PolicerControlPolicy_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Qos_PolicerControlPolicy. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetRoot() *NokiaConf_Configure_Qos_PolicerControlPolicy_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicerControlPolicyName retrieves the value of the leaf PolicerControlPolicyName from the NokiaConf_Configure_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicyName is set, it can
// safely use t.GetPolicerControlPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) GetPolicerControlPolicyName() string {
	if t == nil || t.PolicerControlPolicyName == nil {
		return ""
	}
	return *t.PolicerControlPolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
	for _, e := range t.Tier {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PolicerControlPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerControlPolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicerControlPolicyName")
	}

	return map[string]interface{}{
		"policer-control-policy-name": *t.PolicerControlPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PolicerControlPolicy_Root represents the /nokia-conf/configure/qos/policer-control-policy/root YANG schema element.
type NokiaConf_Configure_Qos_PolicerControlPolicy_Root struct {
	MaxPercentRate        *float64                                                                 `path:"max-percent-rate" module:"nokia-conf"`
	MaxRate               NokiaConf_Configure_Qos_PolicerControlPolicy_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
	ProfilePreferred      *bool                                                                    `path:"profile-preferred" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PolicerControlPolicy_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Root) IsYANGGoStruct() {}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Qos_PolicerControlPolicy_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxPercentRate retrieves the value of the leaf MaxPercentRate from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPercentRate is set, it can
// safely use t.GetMaxPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) GetMaxPercentRate() float64 {
	if t == nil || t.MaxPercentRate == nil {
		return 0.0
	}
	return *t.MaxPercentRate
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) GetMaxRate() NokiaConf_Configure_Qos_PolicerControlPolicy_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaTypesQos_MaxRate_Enum_max
	}
	return t.MaxRate
}

// GetProfilePreferred retrieves the value of the leaf ProfilePreferred from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfilePreferred is set, it can
// safely use t.GetProfilePreferred() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfilePreferred == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) GetProfilePreferred() bool {
	if t == nil || t.ProfilePreferred == nil {
		return false
	}
	return *t.ProfilePreferred
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PolicerControlPolicy_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRate == nil {
		t.MaxRate = NokiaTypesQos_MaxRate_Enum_max
	}
	if t.ProfilePreferred == nil {
		var v bool = false
		t.ProfilePreferred = &v
	}
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PolicerControlPolicy_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PolicerControlPolicy_Root.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds represents the /nokia-conf/configure/qos/policer-control-policy/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) IsYANGGoStruct() {}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Enum_auto
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinThreshSeparation == nil {
		t.MinThreshSeparation = NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_MinThreshSeparation_Enum_auto
	}
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/qos/policer-control-policy/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	FixedMbs           *bool                                                                                                  `path:"fixed-mbs" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                 `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFixedMbs retrieves the value of the leaf FixedMbs from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FixedMbs is set, it can
// safely use t.GetFixedMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FixedMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetFixedMbs() bool {
	if t == nil || t.FixedMbs == nil {
		return false
	}
	return *t.FixedMbs
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Enum_auto
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FixedMbs == nil {
		var v bool = false
		t.FixedMbs = &v
	}
	if t.MbsContribution == nil {
		t.MbsContribution = NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority_MbsContribution_Enum_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PolicerControlPolicy_Tier represents the /nokia-conf/configure/qos/policer-control-policy/tier YANG schema element.
type NokiaConf_Configure_Qos_PolicerControlPolicy_Tier struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Arbiter            map[string]*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter `path:"arbiter" module:"nokia-conf"`
	TierId             *int32                                                                `path:"tier-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PolicerControlPolicy_Tier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) IsYANGGoStruct() {}

// NewArbiter creates a new entry in the Arbiter list of the
// NokiaConf_Configure_Qos_PolicerControlPolicy_Tier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) NewArbiter(ArbiterName string) (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Arbiter == nil {
		t.Arbiter = make(map[string]*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter)
	}

	key := ArbiterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Arbiter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Arbiter", key)
	}

	t.Arbiter[key] = &NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter{
		ArbiterName: &ArbiterName,
	}

	return t.Arbiter[key], nil
}

// RenameArbiter renames an entry in the list Arbiter within
// the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) RenameArbiter(oldK, newK string) error {
	if _, ok := t.Arbiter[newK]; ok {
		return fmt.Errorf("key %v already exists in Arbiter", newK)
	}

	e, ok := t.Arbiter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Arbiter", oldK)
	}
	e.ArbiterName = &newK

	t.Arbiter[newK] = e
	delete(t.Arbiter, oldK)
	return nil
}

// GetOrCreateArbiter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PolicerControlPolicy_Tier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) GetOrCreateArbiter(ArbiterName string) *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter {

	key := ArbiterName

	if v, ok := t.Arbiter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArbiter(ArbiterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArbiter got unexpected error: %v", err))
	}
	return v
}

// GetArbiter retrieves the value with the specified key from
// the Arbiter map field of NokiaConf_Configure_Qos_PolicerControlPolicy_Tier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) GetArbiter(ArbiterName string) *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter {

	if t == nil {
		return nil
	}

	key := ArbiterName

	if lm, ok := t.Arbiter[key]; ok {
		return lm
	}
	return nil
}

// DeleteArbiter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PolicerControlPolicy_Tier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) DeleteArbiter(ArbiterName string) {
	key := ArbiterName

	delete(t.Arbiter, key)
}

// AppendArbiter appends the supplied NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter struct to the
// list Arbiter of NokiaConf_Configure_Qos_PolicerControlPolicy_Tier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) AppendArbiter(v *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) error {
	if v.ArbiterName == nil {
		return fmt.Errorf("invalid nil key received for ArbiterName")
	}

	key := *v.ArbiterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Arbiter == nil {
		t.Arbiter = make(map[string]*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter)
	}

	if _, ok := t.Arbiter[key]; ok {
		return fmt.Errorf("duplicate key for list Arbiter %v", key)
	}

	t.Arbiter[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTierId retrieves the value of the leaf TierId from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TierId is set, it can
// safely use t.GetTierId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TierId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) GetTierId() int32 {
	if t == nil || t.TierId == nil {
		return 0
	}
	return *t.TierId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Arbiter {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TierId == nil {
		return nil, fmt.Errorf("nil value for key TierId")
	}

	return map[string]interface{}{
		"tier-id": *t.TierId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PolicerControlPolicy_Tier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PolicerControlPolicy_Tier.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter represents the /nokia-conf/configure/qos/policer-control-policy/tier/arbiter YANG schema element.
type NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	ArbiterName        *string                                                                   `path:"arbiter-name" module:"nokia-conf"`
	ArbiterParent      *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent  `path:"arbiter-parent" module:"nokia-conf"`
	Description        *string                                                                   `path:"description" module:"nokia-conf"`
	PercentRate        *float64                                                                  `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_Rate_Union      `path:"rate" module:"nokia-conf"`
	ReferenceRate      E_NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) IsYANGGoStruct() {}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetOrCreateArbiterParent() *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent{}
	return t.ArbiterParent
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetArbiterParent() *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetRate() NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_MaxRate_Enum_max
	}
	return t.Rate
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) GetReferenceRate() E_NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_MaxRate_Enum_max
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ReferenceRate_local_limit
	}
	t.ArbiterParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ArbiterName == nil {
		return nil, fmt.Errorf("nil value for key ArbiterName")
	}

	return map[string]interface{}{
		"arbiter-name": *t.ArbiterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent represents the /nokia-conf/configure/qos/policer-control-policy/tier/arbiter/arbiter-parent YANG schema element.
type NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) IsYANGGoStruct() {}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent.
func (*NokiaConf_Configure_Qos_PolicerControlPolicy_Tier_Arbiter_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy represents the /nokia-conf/configure/qos/port-qos-policy YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                               `path:"description" module:"nokia-conf"`
	Fc                 map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_PortQosPolicy_Fc `path:"fc" module:"nokia-conf"`
	PacketByteOffset   *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset               `path:"packet-byte-offset" module:"nokia-conf"`
	PortQosPolicyName  *string                                                               `path:"port-qos-policy-name" module:"nokia-conf"`
	Queue              map[int32]*NokiaConf_Configure_Qos_PortQosPolicy_Queue                `path:"queue" module:"nokia-conf"`
	Scope              E_NokiaTypesQos_ItemScope                                             `path:"scope" module:"nokia-conf"`
	WrrWeights         map[uint32]*NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights          `path:"wrr-weights" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_PortQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_PortQosPolicy_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_PortQosPolicy_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_PortQosPolicy_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_PortQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_PortQosPolicy_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_PortQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_PortQosPolicy_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_PortQosPolicy_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_PortQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PortQosPolicy_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) AppendFc(v *NokiaConf_Configure_Qos_PortQosPolicy_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_PortQosPolicy_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_PortQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_PortQosPolicy_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_PortQosPolicy_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_PortQosPolicy_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_PortQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_PortQosPolicy_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_PortQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_PortQosPolicy_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_PortQosPolicy_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_PortQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PortQosPolicy_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) AppendQueue(v *NokiaConf_Configure_Qos_PortQosPolicy_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_PortQosPolicy_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewWrrWeights creates a new entry in the WrrWeights list of the
// NokiaConf_Configure_Qos_PortQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) NewWrrWeights(WrrWeightsId uint32) (*NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrWeights == nil {
		t.WrrWeights = make(map[uint32]*NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights)
	}

	key := WrrWeightsId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WrrWeights[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WrrWeights", key)
	}

	t.WrrWeights[key] = &NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights{
		WrrWeightsId: &WrrWeightsId,
	}

	return t.WrrWeights[key], nil
}

// RenameWrrWeights renames an entry in the list WrrWeights within
// the NokiaConf_Configure_Qos_PortQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) RenameWrrWeights(oldK, newK uint32) error {
	if _, ok := t.WrrWeights[newK]; ok {
		return fmt.Errorf("key %v already exists in WrrWeights", newK)
	}

	e, ok := t.WrrWeights[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WrrWeights", oldK)
	}
	e.WrrWeightsId = &newK

	t.WrrWeights[newK] = e
	delete(t.WrrWeights, oldK)
	return nil
}

// GetOrCreateWrrWeights retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetOrCreateWrrWeights(WrrWeightsId uint32) *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights {

	key := WrrWeightsId

	if v, ok := t.WrrWeights[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWrrWeights(WrrWeightsId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWrrWeights got unexpected error: %v", err))
	}
	return v
}

// GetWrrWeights retrieves the value with the specified key from
// the WrrWeights map field of NokiaConf_Configure_Qos_PortQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetWrrWeights(WrrWeightsId uint32) *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights {

	if t == nil {
		return nil
	}

	key := WrrWeightsId

	if lm, ok := t.WrrWeights[key]; ok {
		return lm
	}
	return nil
}

// DeleteWrrWeights deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) DeleteWrrWeights(WrrWeightsId uint32) {
	key := WrrWeightsId

	delete(t.WrrWeights, key)
}

// AppendWrrWeights appends the supplied NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights struct to the
// list WrrWeights of NokiaConf_Configure_Qos_PortQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) AppendWrrWeights(v *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) error {
	if v.WrrWeightsId == nil {
		return fmt.Errorf("invalid nil key received for WrrWeightsId")
	}

	key := *v.WrrWeightsId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WrrWeights == nil {
		t.WrrWeights = make(map[uint32]*NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights)
	}

	if _, ok := t.WrrWeights[key]; ok {
		return fmt.Errorf("duplicate key for list WrrWeights %v", key)
	}

	t.WrrWeights[key] = v
	return nil
}

// GetOrCreatePacketByteOffset retrieves the value of the PacketByteOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetOrCreatePacketByteOffset() *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset {
	if t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	t.PacketByteOffset = &NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset{}
	return t.PacketByteOffset
}

// GetPacketByteOffset returns the value of the PacketByteOffset struct pointer
// from NokiaConf_Configure_Qos_PortQosPolicy. If the receiver or the field PacketByteOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetPacketByteOffset() *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset {
	if t != nil && t.PacketByteOffset != nil {
		return t.PacketByteOffset
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortQosPolicyName retrieves the value of the leaf PortQosPolicyName from the NokiaConf_Configure_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortQosPolicyName is set, it can
// safely use t.GetPortQosPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortQosPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetPortQosPolicyName() string {
	if t == nil || t.PortQosPolicyName == nil {
		return ""
	}
	return *t.PortQosPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.PacketByteOffset.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.WrrWeights {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PortQosPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortQosPolicyName == nil {
		return nil, fmt.Errorf("nil value for key PortQosPolicyName")
	}

	return map[string]interface{}{
		"port-qos-policy-name": *t.PortQosPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy.
func (*NokiaConf_Configure_Qos_PortQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_Fc represents the /nokia-conf/configure/qos/port-qos-policy/fc YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_Fc struct {
	ApplyGroups        []string                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName `path:"fc-name" module:"nokia-conf"`
	Queue              *int32                  `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Fc) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PortQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PortQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_PortQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_PortQosPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PortQosPolicy_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_Fc.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset represents the /nokia-conf/configure/qos/port-qos-policy/packet-byte-offset YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset struct {
	Add      *int32 `path:"add" module:"nokia-conf"`
	Subtract *int32 `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) GetAdd() int32 {
	if t == nil || t.Add == nil {
		return 0
	}
	return *t.Add
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) GetSubtract() int32 {
	if t == nil || t.Subtract == nil {
		return 0
	}
	return *t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset.
func (*NokiaConf_Configure_Qos_PortQosPolicy_PacketByteOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_Queue represents the /nokia-conf/configure/qos/port-qos-policy/queue YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	QueueId            *int32                                                      `path:"queue-id" module:"nokia-conf"`
	QueueMgmt          *string                                                     `path:"queue-mgmt" module:"nokia-conf"`
	SchedulerMode      *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode  `path:"scheduler-mode" module:"nokia-conf"`
	WrrWeights         *uint32                                                     `path:"wrr-weights" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateSchedulerMode retrieves the value of the SchedulerMode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetOrCreateSchedulerMode() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode {
	if t.SchedulerMode != nil {
		return t.SchedulerMode
	}
	t.SchedulerMode = &NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode{}
	return t.SchedulerMode
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_PortQosPolicy_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetSchedulerMode returns the value of the SchedulerMode struct pointer
// from NokiaConf_Configure_Qos_PortQosPolicy_Queue. If the receiver or the field SchedulerMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetSchedulerMode() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode {
	if t != nil && t.SchedulerMode != nil {
		return t.SchedulerMode
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueMgmt retrieves the value of the leaf QueueMgmt from the NokiaConf_Configure_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMgmt is set, it can
// safely use t.GetQueueMgmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMgmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetQueueMgmt() string {
	if t == nil || t.QueueMgmt == nil {
		return ""
	}
	return *t.QueueMgmt
}

// GetWrrWeights retrieves the value of the leaf WrrWeights from the NokiaConf_Configure_Qos_PortQosPolicy_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeights is set, it can
// safely use t.GetWrrWeights() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeights == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) GetWrrWeights() uint32 {
	if t == nil || t.WrrWeights == nil {
		return 0
	}
	return *t.WrrWeights
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdaptationRule.PopulateDefaults()
	t.SchedulerMode.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PortQosPolicy_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_Queue.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule represents the /nokia-conf/configure/qos/port-qos-policy/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode represents the /nokia-conf/configure/qos/port-qos-policy/queue/scheduler-mode YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode struct {
	Wfq *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq `path:"wfq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) IsYANGGoStruct() {}

// GetOrCreateWfq retrieves the value of the Wfq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) GetOrCreateWfq() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq {
	if t.Wfq != nil {
		return t.Wfq
	}
	t.Wfq = &NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq{}
	return t.Wfq
}

// GetWfq returns the value of the Wfq struct pointer
// from NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode. If the receiver or the field Wfq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) GetWfq() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq {
	if t != nil && t.Wfq != nil {
		return t.Wfq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Wfq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq represents the /nokia-conf/configure/qos/port-qos-policy/queue/scheduler-mode/wfq YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq struct {
	PercentRate *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PirWeight   *uint32                                                                    `path:"pir-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate{}
	return t.PercentRate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) GetPercentRate() *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPirWeight retrieves the value of the leaf PirWeight from the NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirWeight is set, it can
// safely use t.GetPirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) GetPirWeight() uint32 {
	if t == nil || t.PirWeight == nil {
		return 1
	}
	return *t.PirWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PirWeight == nil {
		var v uint32 = 1
		t.PirWeight = &v
	}
	t.PercentRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate represents the /nokia-conf/configure/qos/port-qos-policy/queue/scheduler-mode/wfq/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100.00
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100.00
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate.
func (*NokiaConf_Configure_Qos_PortQosPolicy_Queue_SchedulerMode_Wfq_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights represents the /nokia-conf/configure/qos/port-qos-policy/wrr-weights YANG schema element.
type NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	McWeight           *uint32  `path:"mc-weight" module:"nokia-conf"`
	UcWeight           *uint32  `path:"uc-weight" module:"nokia-conf"`
	WrrWeightsId       *uint32  `path:"wrr-weights-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMcWeight retrieves the value of the leaf McWeight from the NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McWeight is set, it can
// safely use t.GetMcWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) GetMcWeight() uint32 {
	if t == nil || t.McWeight == nil {
		return 1
	}
	return *t.McWeight
}

// GetUcWeight retrieves the value of the leaf UcWeight from the NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UcWeight is set, it can
// safely use t.GetUcWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UcWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) GetUcWeight() uint32 {
	if t == nil || t.UcWeight == nil {
		return 1
	}
	return *t.UcWeight
}

// GetWrrWeightsId retrieves the value of the leaf WrrWeightsId from the NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeightsId is set, it can
// safely use t.GetWrrWeightsId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeightsId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) GetWrrWeightsId() uint32 {
	if t == nil || t.WrrWeightsId == nil {
		return 0
	}
	return *t.WrrWeightsId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.McWeight == nil {
		var v uint32 = 1
		t.McWeight = &v
	}
	if t.UcWeight == nil {
		var v uint32 = 1
		t.UcWeight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) ΛListKeyMap() (map[string]interface{}, error) {
	if t.WrrWeightsId == nil {
		return nil, fmt.Errorf("nil value for key WrrWeightsId")
	}

	return map[string]interface{}{
		"wrr-weights-id": *t.WrrWeightsId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights.
func (*NokiaConf_Configure_Qos_PortQosPolicy_WrrWeights) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy represents the /nokia-conf/configure/qos/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	DistLagRateShared  *bool                                                         `path:"dist-lag-rate-shared" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group `path:"group" module:"nokia-conf"`
	HqosAlgorithm      E_NokiaConf_Configure_Qos_PortSchedulerPolicy_HqosAlgorithm   `path:"hqos-algorithm" module:"nokia-conf"`
	Level              map[int32]*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level  `path:"level" module:"nokia-conf"`
	MaxPercentRate     *float64                                                      `path:"max-percent-rate" module:"nokia-conf"`
	MaxRate            NokiaConf_Configure_Qos_PortSchedulerPolicy_MaxRate_Union     `path:"max-rate" module:"nokia-conf"`
	MonitorThreshold   *uint32                                                       `path:"monitor-threshold" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	OrphanOverrides    *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides  `path:"orphan-overrides" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Qos_PortSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) NewGroup(GroupName string) (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Qos_PortSchedulerPolicy_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Qos_PortSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Qos_PortSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetGroup(GroupName string) *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Qos_PortSchedulerPolicy_Group struct to the
// list Group of NokiaConf_Configure_Qos_PortSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PortSchedulerPolicy_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) AppendGroup(v *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Qos_PortSchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) NewLevel(LevelId int32) (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Qos_PortSchedulerPolicy_Level{
		LevelId: &LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Qos_PortSchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) RenameLevel(oldK, newK int32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortSchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetOrCreateLevel(LevelId int32) *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Qos_PortSchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetLevel(LevelId int32) *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PortSchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) DeleteLevel(LevelId int32) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Qos_PortSchedulerPolicy_Level struct to the
// list Level of NokiaConf_Configure_Qos_PortSchedulerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PortSchedulerPolicy_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) AppendLevel(v *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) error {
	if v.LevelId == nil {
		return fmt.Errorf("invalid nil key received for LevelId")
	}

	key := *v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateOrphanOverrides retrieves the value of the OrphanOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetOrCreateOrphanOverrides() *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides {
	if t.OrphanOverrides != nil {
		return t.OrphanOverrides
	}
	t.OrphanOverrides = &NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides{}
	return t.OrphanOverrides
}

// GetOrphanOverrides returns the value of the OrphanOverrides struct pointer
// from NokiaConf_Configure_Qos_PortSchedulerPolicy. If the receiver or the field OrphanOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetOrphanOverrides() *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides {
	if t != nil && t.OrphanOverrides != nil {
		return t.OrphanOverrides
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistLagRateShared retrieves the value of the leaf DistLagRateShared from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistLagRateShared is set, it can
// safely use t.GetDistLagRateShared() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistLagRateShared == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetDistLagRateShared() bool {
	if t == nil || t.DistLagRateShared == nil {
		return false
	}
	return *t.DistLagRateShared
}

// GetHqosAlgorithm retrieves the value of the leaf HqosAlgorithm from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HqosAlgorithm is set, it can
// safely use t.GetHqosAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HqosAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetHqosAlgorithm() E_NokiaConf_Configure_Qos_PortSchedulerPolicy_HqosAlgorithm {
	if t == nil || t.HqosAlgorithm == 0 {
		return NokiaConf_Configure_Qos_PortSchedulerPolicy_HqosAlgorithm_default
	}
	return t.HqosAlgorithm
}

// GetMaxPercentRate retrieves the value of the leaf MaxPercentRate from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPercentRate is set, it can
// safely use t.GetMaxPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetMaxPercentRate() float64 {
	if t == nil || t.MaxPercentRate == nil {
		return 0.0
	}
	return *t.MaxPercentRate
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetMaxRate() NokiaConf_Configure_Qos_PortSchedulerPolicy_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return NokiaTypesQos_MaxRate_Enum_max
	}
	return t.MaxRate
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DistLagRateShared == nil {
		var v bool = false
		t.DistLagRateShared = &v
	}
	if t.HqosAlgorithm == 0 {
		t.HqosAlgorithm = NokiaConf_Configure_Qos_PortSchedulerPolicy_HqosAlgorithm_default
	}
	if t.MaxRate == nil {
		t.MaxRate = NokiaTypesQos_MaxRate_Enum_max
	}
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	t.OrphanOverrides.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PortSchedulerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy_Group represents the /nokia-conf/configure/qos/port-scheduler-policy/group YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy_Group struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupName          *string                                                        `path:"group-name" module:"nokia-conf"`
	MonitorThreshold   *uint32                                                        `path:"monitor-threshold" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate `path:"percent-rate" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetOrCreateRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_PortSchedulerPolicy_Group. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetPercentRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_PortSchedulerPolicy_Group. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy_Group.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate represents the /nokia-conf/configure/qos/port-scheduler-policy/group/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100.00
		t.Cir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate represents the /nokia-conf/configure/qos/port-scheduler-policy/group/rate YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate struct {
	Cir NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) GetCir() NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) GetPir() NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Group_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy_Level represents the /nokia-conf/configure/qos/port-scheduler-policy/level YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy_Level struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Group              *string                                                        `path:"group" module:"nokia-conf"`
	LevelId            *int32                                                         `path:"level-id" module:"nokia-conf"`
	MonitorThreshold   *uint32                                                        `path:"monitor-threshold" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate `path:"percent-rate" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate        `path:"rate" module:"nokia-conf"`
	Weight             *int32                                                         `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) IsYANGGoStruct() {}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetOrCreateRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_PortSchedulerPolicy_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetPercentRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_PortSchedulerPolicy_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetRate() *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetLevelId() int32 {
	if t == nil || t.LevelId == nil {
		return 0
	}
	return *t.LevelId
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetMonitorThreshold() uint32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorThreshold == nil {
		var v uint32 = 0
		t.MonitorThreshold = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelId == nil {
		return nil, fmt.Errorf("nil value for key LevelId")
	}

	return map[string]interface{}{
		"level-id": *t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy_Level.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate represents the /nokia-conf/configure/qos/port-scheduler-policy/level/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100.00
		t.Cir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate represents the /nokia-conf/configure/qos/port-scheduler-policy/level/rate YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate struct {
	Cir NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) GetCir() NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) GetPir() NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_QueueCirRateMaximum_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides represents the /nokia-conf/configure/qos/port-scheduler-policy/orphan-overrides YANG schema element.
type NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 0
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides.
func (*NokiaConf_Configure_Qos_PortSchedulerPolicy_OrphanOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PostPolicerMapping represents the /nokia-conf/configure/qos/post-policer-mapping YANG schema element.
type NokiaConf_Configure_Qos_PostPolicerMapping struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                              `path:"description" module:"nokia-conf"`
	Fc                 map[NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key]*NokiaConf_Configure_Qos_PostPolicerMapping_Fc `path:"fc" module:"nokia-conf"`
	Name               *string                                                                                              `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PostPolicerMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PostPolicerMapping) IsYANGGoStruct() {}

// NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key represents the key for list Fc of element /nokia-conf/configure/qos/post-policer-mapping.
type NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key struct {
	FcName  E_NokiaTypesSros_FcName       `path:"fc-name"`
	Profile E_NokiaTypesQos_EgressProfile `path:"profile"`
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_PostPolicerMapping struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) NewFc(FcName E_NokiaTypesSros_FcName, Profile E_NokiaTypesQos_EgressProfile) (*NokiaConf_Configure_Qos_PostPolicerMapping_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key]*NokiaConf_Configure_Qos_PostPolicerMapping_Fc)
	}

	key := NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_PostPolicerMapping_Fc{
		FcName:  FcName,
		Profile: Profile,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_PostPolicerMapping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) RenameFc(oldK, newK NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK.FcName
	e.Profile = newK.Profile

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PostPolicerMapping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) GetOrCreateFc(FcName E_NokiaTypesSros_FcName, Profile E_NokiaTypesQos_EgressProfile) *NokiaConf_Configure_Qos_PostPolicerMapping_Fc {

	key := NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName, Profile)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_PostPolicerMapping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) GetFc(FcName E_NokiaTypesSros_FcName, Profile E_NokiaTypesQos_EgressProfile) *NokiaConf_Configure_Qos_PostPolicerMapping_Fc {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_PostPolicerMapping. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) DeleteFc(FcName E_NokiaTypesSros_FcName, Profile E_NokiaTypesQos_EgressProfile) {
	key := NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key{
		FcName:  FcName,
		Profile: Profile,
	}

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_PostPolicerMapping_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_PostPolicerMapping. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_PostPolicerMapping_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) AppendFc(v *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) error {
	key := NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key{
		FcName:  v.FcName,
		Profile: v.Profile,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Qos_PostPolicerMapping_Fc_Key]*NokiaConf_Configure_Qos_PostPolicerMapping_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PostPolicerMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PostPolicerMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_PostPolicerMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_PostPolicerMapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PostPolicerMapping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PostPolicerMapping struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PostPolicerMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PostPolicerMapping.
func (*NokiaConf_Configure_Qos_PostPolicerMapping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PostPolicerMapping_Fc represents the /nokia-conf/configure/qos/post-policer-mapping/fc YANG schema element.
type NokiaConf_Configure_Qos_PostPolicerMapping_Fc struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                               `path:"fc-name" module:"nokia-conf"`
	MapsTo             *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo `path:"maps-to" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_EgressProfile                         `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PostPolicerMapping_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PostPolicerMapping_Fc) IsYANGGoStruct() {}

// GetOrCreateMapsTo retrieves the value of the MapsTo field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) GetOrCreateMapsTo() *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo {
	if t.MapsTo != nil {
		return t.MapsTo
	}
	t.MapsTo = &NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo{}
	return t.MapsTo
}

// GetMapsTo returns the value of the MapsTo struct pointer
// from NokiaConf_Configure_Qos_PostPolicerMapping_Fc. If the receiver or the field MapsTo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) GetMapsTo() *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo {
	if t != nil && t.MapsTo != nil {
		return t.MapsTo
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_PostPolicerMapping_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_PostPolicerMapping_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_PostPolicerMapping_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_PostPolicerMapping_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PostPolicerMapping_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MapsTo.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_PostPolicerMapping_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
		"profile": t.Profile,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PostPolicerMapping_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PostPolicerMapping_Fc.
func (*NokiaConf_Configure_Qos_PostPolicerMapping_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo represents the /nokia-conf/configure/qos/post-policer-mapping/fc/maps-to YANG schema element.
type NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo struct {
	Fc      E_NokiaTypesSros_FcName       `path:"fc" module:"nokia-conf"`
	Profile E_NokiaTypesQos_EgressProfile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo.
func (*NokiaConf_Configure_Qos_PostPolicerMapping_Fc_MapsTo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupRedirectList represents the /nokia-conf/configure/qos/queue-group-redirect-list YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupRedirectList struct {
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Match              map[uint32]*NokiaConf_Configure_Qos_QueueGroupRedirectList_Match `path:"match" module:"nokia-conf"`
	Name               *string                                                          `path:"name" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Qos_QueueGroupRedirectList_Type            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupRedirectList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupRedirectList) IsYANGGoStruct() {}

// NewMatch creates a new entry in the Match list of the
// NokiaConf_Configure_Qos_QueueGroupRedirectList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) NewMatch(FieldValue uint32) (*NokiaConf_Configure_Qos_QueueGroupRedirectList_Match, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[uint32]*NokiaConf_Configure_Qos_QueueGroupRedirectList_Match)
	}

	key := FieldValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Match[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Match", key)
	}

	t.Match[key] = &NokiaConf_Configure_Qos_QueueGroupRedirectList_Match{
		FieldValue: &FieldValue,
	}

	return t.Match[key], nil
}

// RenameMatch renames an entry in the list Match within
// the NokiaConf_Configure_Qos_QueueGroupRedirectList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) RenameMatch(oldK, newK uint32) error {
	if _, ok := t.Match[newK]; ok {
		return fmt.Errorf("key %v already exists in Match", newK)
	}

	e, ok := t.Match[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Match", oldK)
	}
	e.FieldValue = &newK

	t.Match[newK] = e
	delete(t.Match, oldK)
	return nil
}

// GetOrCreateMatch retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupRedirectList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) GetOrCreateMatch(FieldValue uint32) *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match {

	key := FieldValue

	if v, ok := t.Match[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMatch(FieldValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMatch got unexpected error: %v", err))
	}
	return v
}

// GetMatch retrieves the value with the specified key from
// the Match map field of NokiaConf_Configure_Qos_QueueGroupRedirectList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) GetMatch(FieldValue uint32) *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match {

	if t == nil {
		return nil
	}

	key := FieldValue

	if lm, ok := t.Match[key]; ok {
		return lm
	}
	return nil
}

// DeleteMatch deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupRedirectList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) DeleteMatch(FieldValue uint32) {
	key := FieldValue

	delete(t.Match, key)
}

// AppendMatch appends the supplied NokiaConf_Configure_Qos_QueueGroupRedirectList_Match struct to the
// list Match of NokiaConf_Configure_Qos_QueueGroupRedirectList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupRedirectList_Match already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) AppendMatch(v *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) error {
	if v.FieldValue == nil {
		return fmt.Errorf("invalid nil key received for FieldValue")
	}

	key := *v.FieldValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[uint32]*NokiaConf_Configure_Qos_QueueGroupRedirectList_Match)
	}

	if _, ok := t.Match[key]; ok {
		return fmt.Errorf("duplicate key for list Match %v", key)
	}

	t.Match[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupRedirectList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupRedirectList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Qos_QueueGroupRedirectList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_QueueGroupRedirectList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) GetType() E_NokiaConf_Configure_Qos_QueueGroupRedirectList_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Qos_QueueGroupRedirectList_Type_vxlan_vni
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupRedirectList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Qos_QueueGroupRedirectList_Type_vxlan_vni
	}
	for _, e := range t.Match {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupRedirectList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupRedirectList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupRedirectList.
func (*NokiaConf_Configure_Qos_QueueGroupRedirectList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupRedirectList_Match represents the /nokia-conf/configure/qos/queue-group-redirect-list/match YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupRedirectList_Match struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FieldValue         *uint32  `path:"field-value" module:"nokia-conf"`
	Instance           *uint32  `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupRedirectList_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupRedirectList_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupRedirectList_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFieldValue retrieves the value of the leaf FieldValue from the NokiaConf_Configure_Qos_QueueGroupRedirectList_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldValue is set, it can
// safely use t.GetFieldValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) GetFieldValue() uint32 {
	if t == nil || t.FieldValue == nil {
		return 0
	}
	return *t.FieldValue
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Qos_QueueGroupRedirectList_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupRedirectList_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupRedirectList_Match struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldValue == nil {
		return nil, fmt.Errorf("nil value for key FieldValue")
	}

	return map[string]interface{}{
		"field-value": *t.FieldValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupRedirectList_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupRedirectList_Match.
func (*NokiaConf_Configure_Qos_QueueGroupRedirectList_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates represents the /nokia-conf/configure/qos/queue-group-templates YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates struct {
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) GetOrCreateEgress() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) GetOrCreateIngress() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) GetEgress() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) GetIngress() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress represents the /nokia-conf/configure/qos/queue-group-templates/egress YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	QueueGroup         map[string]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) IsYANGGoStruct() {}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) NewQueueGroup(EgressQueueGroupName string) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup)
	}

	key := EgressQueueGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup{
		EgressQueueGroupName: &EgressQueueGroupName,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) RenameQueueGroup(oldK, newK string) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.EgressQueueGroupName = &newK

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) GetOrCreateQueueGroup(EgressQueueGroupName string) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup {

	key := EgressQueueGroupName

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(EgressQueueGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) GetQueueGroup(EgressQueueGroupName string) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup {

	if t == nil {
		return nil
	}

	key := EgressQueueGroupName

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) DeleteQueueGroup(EgressQueueGroupName string) {
	key := EgressQueueGroupName

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) AppendQueueGroup(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) error {
	if v.EgressQueueGroupName == nil {
		return fmt.Errorf("invalid nil key received for EgressQueueGroupName")
	}

	key := *v.EgressQueueGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct {
	ApplyGroups          []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                                                       `path:"description" module:"nokia-conf"`
	EgressQueueGroupName *string                                                                                       `path:"egress-queue-group-name" module:"nokia-conf"`
	Fc                   map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc `path:"fc" module:"nokia-conf"`
	HsAttachmentPolicy   *string                                                                                       `path:"hs-attachment-policy" module:"nokia-conf"`
	HsWrrGroup           map[uint32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup          `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues          *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues                    `path:"hsmda-queues" module:"nokia-conf"`
	Policer              map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer              `path:"policer" module:"nokia-conf"`
	Queue                map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue                `path:"queue" module:"nokia-conf"`
	QueuesHqosManageable *bool                                                                                         `path:"queues-hqos-manageable" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendFc(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendHsWrrGroup(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetPolicer(PolicerId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer struct to the
// list Policer of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendPolicer(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) AppendQueue(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetHsmdaQueues() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressQueueGroupName retrieves the value of the leaf EgressQueueGroupName from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressQueueGroupName is set, it can
// safely use t.GetEgressQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressQueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetEgressQueueGroupName() string {
	if t == nil || t.EgressQueueGroupName == nil {
		return ""
	}
	return *t.EgressQueueGroupName
}

// GetHsAttachmentPolicy retrieves the value of the leaf HsAttachmentPolicy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAttachmentPolicy is set, it can
// safely use t.GetHsAttachmentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAttachmentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetHsAttachmentPolicy() string {
	if t == nil || t.HsAttachmentPolicy == nil {
		return ""
	}
	return *t.HsAttachmentPolicy
}

// GetQueuesHqosManageable retrieves the value of the leaf QueuesHqosManageable from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuesHqosManageable is set, it can
// safely use t.GetQueuesHqosManageable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuesHqosManageable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) GetQueuesHqosManageable() bool {
	if t == nil || t.QueuesHqosManageable == nil {
		return true
	}
	return *t.QueuesHqosManageable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QueuesHqosManageable == nil {
		var v bool = true
		t.QueuesHqosManageable = &v
	}
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EgressQueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key EgressQueueGroupName")
	}

	return map[string]interface{}{
		"egress-queue-group-name": *t.EgressQueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/fc YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	FcName             E_NokiaTypesSros_FcName                                                 `path:"fc-name" module:"nokia-conf"`
	Queue              *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) IsYANGGoStruct() {}

// GetOrCreateQueue retrieves the value of the Queue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetOrCreateQueue() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue {
	if t.Queue != nil {
		return t.Queue
	}
	t.Queue = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue{}
	return t.Queue
}

// GetQueue returns the value of the Queue struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc. If the receiver or the field Queue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetQueue() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue {
	if t != nil && t.Queue != nil {
		return t.Queue
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Queue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/fc/queue YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue struct {
	None    YANGEmpty `path:"none" module:"nokia-conf"`
	QueueId *int32    `path:"queue-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) IsYANGGoStruct() {}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Fc_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup struct {
	AdaptationRule     *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                                  `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *uint32                                                                                  `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate        *float64                                                                                 `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Union      `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) GetRate() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_Rate_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/hs-wrr-group/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsWrrGroup_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/hsmda-queues YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues struct {
	LowBurstMaxClass *uint32                                                                                    `path:"low-burst-max-class" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                     `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	WrrPolicy        *string                                                                                    `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 8
	}
	return *t.LowBurstMaxClass
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 8
		t.LowBurstMaxClass = &v
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                                                           `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Rate_Union       `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                                                          `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *uint32                                                                                          `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetBurstLimit() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) GetWrrWeight() uint32 {
	if t == nil || t.WrrWeight == nil {
		return 1
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	if t.WrrWeight == nil {
		var v uint32 = 1
		t.WrrWeight = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/hsmda-queues/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_HsmdaQueues_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/policer YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer struct {
	AdaptationRule     *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                                                  `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	ArbiterParent      *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	ExceedPir          *bool                                                                                    `path:"exceed-pir" module:"nokia-conf"`
	HighPrioOnly       NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                   `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                   `path:"policer-id" module:"nokia-conf"`
	ProfileCapped      *bool                                                                                    `path:"profile-capped" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate              `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                                    `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetOrCreateRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetArbiterParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetPercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetCbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExceedPir retrieves the value of the leaf ExceedPir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedPir is set, it can
// safely use t.GetExceedPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetExceedPir() bool {
	if t == nil || t.ExceedPir == nil {
		return false
	}
	return *t.ExceedPir
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetHighPrioOnly() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.ExceedPir == nil {
		var v bool = false
		t.ExceedPir = &v
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate struct {
	Cir           *float64                                                                                          `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                                          `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate_ReferenceRate_local_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/policer/rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate struct {
	Cir NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) GetCir() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) GetPir() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                                              `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Union        `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail        `path:"drop-tail" module:"nokia-conf"`
	DynamicMbs         *bool                                                                                `path:"dynamic-mbs" module:"nokia-conf"`
	HsAltPortClassPool *bool                                                                                `path:"hs-alt-port-class-pool" module:"nokia-conf"`
	HsClassWeight      *uint32                                                                              `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue     `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *uint32                                                                              `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                               `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent      `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	QueueDelay         *uint32                                                                              `path:"queue-delay" module:"nokia-conf"`
	QueueId            *int32                                                                               `path:"queue-id" module:"nokia-conf"`
	QueueType          E_NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueType      `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
	WredQueue          *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue       `path:"wred-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreatePortParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetOrCreateWredQueue retrieves the value of the WredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetOrCreateWredQueue() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue {
	if t.WredQueue != nil {
		return t.WredQueue
	}
	t.WredQueue = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue{}
	return t.WredQueue
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetDropTail() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsWredQueue() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetPercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetPortParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetSchedulerParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetWredQueue returns the value of the WredQueue struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue. If the receiver or the field WredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetWredQueue() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue {
	if t != nil && t.WredQueue != nil {
		return t.WredQueue
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetBurstLimit() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetCbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetDynamicMbs retrieves the value of the leaf DynamicMbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicMbs is set, it can
// safely use t.GetDynamicMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetDynamicMbs() bool {
	if t == nil || t.DynamicMbs == nil {
		return false
	}
	return *t.DynamicMbs
}

// GetHsAltPortClassPool retrieves the value of the leaf HsAltPortClassPool from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAltPortClassPool is set, it can
// safely use t.GetHsAltPortClassPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAltPortClassPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsAltPortClassPool() bool {
	if t == nil || t.HsAltPortClassPool == nil {
		return false
	}
	return *t.HsAltPortClassPool
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetHsWrrWeight() uint32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueDelay retrieves the value of the leaf QueueDelay from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueDelay is set, it can
// safely use t.GetQueueDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetQueueDelay() uint32 {
	if t == nil || t.QueueDelay == nil {
		return 0
	}
	return *t.QueueDelay
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) GetQueueType() E_NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return 0
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Cbs_Enum_auto
	}
	if t.DynamicMbs == nil {
		var v bool = false
		t.DynamicMbs = &v
	}
	if t.HsAltPortClassPool == nil {
		var v bool = false
		t.HsAltPortClassPool = &v
	}
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.HsWrrWeight == nil {
		var v uint32 = 1
		t.HsWrrWeight = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Mbs_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
	t.WredQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail struct {
	Exceed   *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed   `path:"exceed" module:"nokia-conf"`
	High     *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High     `path:"high" module:"nokia-conf"`
	Highplus *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus `path:"highplus" module:"nokia-conf"`
	Low      *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low      `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateExceed retrieves the value of the Exceed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateExceed() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed {
	if t.Exceed != nil {
		return t.Exceed
	}
	t.Exceed = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed{}
	return t.Exceed
}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateHigh() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High{}
	return t.High
}

// GetOrCreateHighplus retrieves the value of the Highplus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateHighplus() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus {
	if t.Highplus != nil {
		return t.Highplus
	}
	t.Highplus = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus{}
	return t.Highplus
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low{}
	return t.Low
}

// GetExceed returns the value of the Exceed struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field Exceed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetExceed() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed {
	if t != nil && t.Exceed != nil {
		return t.Exceed
	}
	return nil
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetHigh() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// GetHighplus returns the value of the Highplus struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field Highplus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetHighplus() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus {
	if t != nil && t.Highplus != nil {
		return t.Highplus
	}
	return nil
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) GetLow() *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exceed.PopulateDefaults()
	t.High.PopulateDefaults()
	t.Highplus.PopulateDefaults()
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/drop-tail/exceed YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Exceed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/drop-tail/high YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/drop-tail/highplus YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Highplus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate struct {
	Cir           *float64                                                                                        `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                                                        `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/port-parent YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate struct {
	Cir NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) GetCir() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) GetPir() NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue represents the /nokia-conf/configure/qos/queue-group-templates/egress/queue-group/queue/wred-queue YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue struct {
	Mode   E_NokiaTypesQos_WredQueueMode       `path:"mode" module:"nokia-conf"`
	Policy *string                             `path:"policy" module:"nokia-conf"`
	Usage  E_NokiaTypesQos_WredQueueSlopeUsage `path:"usage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) GetMode() E_NokiaTypesQos_WredQueueMode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUsage retrieves the value of the leaf Usage from the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Usage is set, it can
// safely use t.GetUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Usage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) GetUsage() E_NokiaTypesQos_WredQueueSlopeUsage {
	if t == nil || t.Usage == 0 {
		return 0
	}
	return t.Usage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Egress_QueueGroup_Queue_WredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress represents the /nokia-conf/configure/qos/queue-group-templates/ingress YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress struct {
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	QueueGroup         map[string]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) IsYANGGoStruct() {}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) NewQueueGroup(IngressQueueGroupName string) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup)
	}

	key := IngressQueueGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup{
		IngressQueueGroupName: &IngressQueueGroupName,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) RenameQueueGroup(oldK, newK string) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.IngressQueueGroupName = &newK

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) GetOrCreateQueueGroup(IngressQueueGroupName string) *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup {

	key := IngressQueueGroupName

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(IngressQueueGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) GetQueueGroup(IngressQueueGroupName string) *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup {

	if t == nil {
		return nil
	}

	key := IngressQueueGroupName

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) DeleteQueueGroup(IngressQueueGroupName string) {
	key := IngressQueueGroupName

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) AppendQueueGroup(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) error {
	if v.IngressQueueGroupName == nil {
		return fmt.Errorf("invalid nil key received for IngressQueueGroupName")
	}

	key := *v.IngressQueueGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup struct {
	ApplyGroups           []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description           *string                                                                           `path:"description" module:"nokia-conf"`
	IngressQueueGroupName *string                                                                           `path:"ingress-queue-group-name" module:"nokia-conf"`
	Policer               map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer `path:"policer" module:"nokia-conf"`
	Queue                 map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetPolicer(PolicerId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer struct to the
// list Policer of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) AppendPolicer(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) AppendQueue(v *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIngressQueueGroupName retrieves the value of the leaf IngressQueueGroupName from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressQueueGroupName is set, it can
// safely use t.GetIngressQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressQueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) GetIngressQueueGroupName() string {
	if t == nil || t.IngressQueueGroupName == nil {
		return ""
	}
	return *t.IngressQueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IngressQueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key IngressQueueGroupName")
	}

	return map[string]interface{}{
		"ingress-queue-group-name": *t.IngressQueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/policer YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer struct {
	AdaptationRule     *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                                                   `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	ArbiterParent      *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description        *string                                                                                   `path:"description" module:"nokia-conf"`
	HighPrioOnly       NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                    `path:"policer-id" module:"nokia-conf"`
	ProfileCapped      *bool                                                                                     `path:"profile-capped" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate              `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                    `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetOrCreateRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetArbiterParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetPercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetCbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetHighPrioOnly() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_IngressPolicerStatMode_minimal
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/policer/rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate struct {
	Cir NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) GetCir() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) GetPir() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/queue YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                                               `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Union        `path:"cbs" module:"nokia-conf"`
	CirNonProfiling    *bool                                                                                 `path:"cir-non-profiling" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail        `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	Multipoint         *bool                                                                                 `path:"multipoint" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate     `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                `path:"queue-id" module:"nokia-conf"`
	QueueMode          E_NokiaTypesQos_QueueMode                                                             `path:"queue-mode" module:"nokia-conf"`
	QueueType          E_NokiaTypesQos_QueueGroupQueueType                                                   `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate            `path:"rate" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent `path:"scheduler-parent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetDropTail() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetPercentRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetRate() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetSchedulerParent() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetBurstLimit() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetCbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetCirNonProfiling retrieves the value of the leaf CirNonProfiling from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirNonProfiling is set, it can
// safely use t.GetCirNonProfiling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirNonProfiling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetCirNonProfiling() bool {
	if t == nil || t.CirNonProfiling == nil {
		return false
	}
	return *t.CirNonProfiling
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetMultipoint retrieves the value of the leaf Multipoint from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipoint is set, it can
// safely use t.GetMultipoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetMultipoint() bool {
	if t == nil || t.Multipoint == nil {
		return false
	}
	return *t.Multipoint
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueMode retrieves the value of the leaf QueueMode from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMode is set, it can
// safely use t.GetQueueMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetQueueMode() E_NokiaTypesQos_QueueMode {
	if t == nil || t.QueueMode == 0 {
		return NokiaTypesQos_QueueMode_priority
	}
	return t.QueueMode
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) GetQueueType() E_NokiaTypesQos_QueueGroupQueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaTypesQos_QueueGroupQueueType_best_effort
	}
	return t.QueueType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Cbs_Enum_auto
	}
	if t.CirNonProfiling == nil {
		var v bool = false
		t.CirNonProfiling = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Mbs_Enum_auto
	}
	if t.Multipoint == nil {
		var v bool = false
		t.Multipoint = &v
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.QueueMode == 0 {
		t.QueueMode = NokiaTypesQos_QueueMode_priority
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaTypesQos_QueueGroupQueueType_best_effort
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Fir E_NokiaTypesQos_AdaptationRule `path:"fir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) GetFir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Fir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Fir == 0 {
		t.Fir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail struct {
	Low *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) GetLow() *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate struct {
	Cir           *float64                                                                                         `path:"cir" module:"nokia-conf"`
	Fir           *float64                                                                                         `path:"fir" module:"nokia-conf"`
	Pir           *float64                                                                                         `path:"pir" module:"nokia-conf"`
	Police        YANGEmpty                                                                                        `path:"police" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetFir() float64 {
	if t == nil || t.Fir == nil {
		return 0.00
	}
	return *t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.Fir == nil {
		var v float64 = 0.00
		t.Fir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/queue/rate YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate struct {
	Cir    NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Fir    NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Fir_Union `path:"fir" module:"nokia-conf"`
	Pir    NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
	Police YANGEmpty                                                                           `path:"police" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetCir() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetFir retrieves the value of the leaf Fir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fir is set, it can
// safely use t.GetFir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetFir() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Fir_Union {
	if t == nil || t.Fir == nil {
		return UnionInt32(0)
	}
	return t.Fir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetPir() NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRate_Enum_max
	}
	return t.Pir
}

// GetPolice retrieves the value of the leaf Police from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Police is set, it can
// safely use t.GetPolice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Police == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) GetPolice() YANGEmpty {
	if t == nil || t.Police == false {
		return false
	}
	return t.Police
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Fir == nil {
		t.Fir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent represents the /nokia-conf/configure/qos/queue-group-templates/ingress/queue-group/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) IsYANGGoStruct() {
}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent.
func (*NokiaConf_Configure_Qos_QueueGroupTemplates_Ingress_QueueGroup_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueMgmtPolicy represents the /nokia-conf/configure/qos/queue-mgmt-policy YANG schema element.
type NokiaConf_Configure_Qos_QueueMgmtPolicy struct {
	ApplyGroups         []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description         *string                                                `path:"description" module:"nokia-conf"`
	ExceedSlope         *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope   `path:"exceed-slope" module:"nokia-conf"`
	HighSlope           *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope     `path:"high-slope" module:"nokia-conf"`
	HighplusSlope       *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope `path:"highplus-slope" module:"nokia-conf"`
	LowSlope            *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope      `path:"low-slope" module:"nokia-conf"`
	Mbs                 NokiaConf_Configure_Qos_QueueMgmtPolicy_Mbs_Union      `path:"mbs" module:"nokia-conf"`
	PortSpeed           *uint32                                                `path:"port-speed" module:"nokia-conf"`
	QueueMgmtPolicyName *string                                                `path:"queue-mgmt-policy-name" module:"nokia-conf"`
	Scope               E_NokiaTypesQos_ItemScope                              `path:"scope" module:"nokia-conf"`
	TimeAverageFactor   *uint32                                                `path:"time-average-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueMgmtPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy) IsYANGGoStruct() {}

// GetOrCreateExceedSlope retrieves the value of the ExceedSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetOrCreateExceedSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope {
	if t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	t.ExceedSlope = &NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope{}
	return t.ExceedSlope
}

// GetOrCreateHighSlope retrieves the value of the HighSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetOrCreateHighSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope {
	if t.HighSlope != nil {
		return t.HighSlope
	}
	t.HighSlope = &NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope{}
	return t.HighSlope
}

// GetOrCreateHighplusSlope retrieves the value of the HighplusSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetOrCreateHighplusSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope {
	if t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	t.HighplusSlope = &NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope{}
	return t.HighplusSlope
}

// GetOrCreateLowSlope retrieves the value of the LowSlope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetOrCreateLowSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope {
	if t.LowSlope != nil {
		return t.LowSlope
	}
	t.LowSlope = &NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope{}
	return t.LowSlope
}

// GetExceedSlope returns the value of the ExceedSlope struct pointer
// from NokiaConf_Configure_Qos_QueueMgmtPolicy. If the receiver or the field ExceedSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetExceedSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope {
	if t != nil && t.ExceedSlope != nil {
		return t.ExceedSlope
	}
	return nil
}

// GetHighSlope returns the value of the HighSlope struct pointer
// from NokiaConf_Configure_Qos_QueueMgmtPolicy. If the receiver or the field HighSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetHighSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope {
	if t != nil && t.HighSlope != nil {
		return t.HighSlope
	}
	return nil
}

// GetHighplusSlope returns the value of the HighplusSlope struct pointer
// from NokiaConf_Configure_Qos_QueueMgmtPolicy. If the receiver or the field HighplusSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetHighplusSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope {
	if t != nil && t.HighplusSlope != nil {
		return t.HighplusSlope
	}
	return nil
}

// GetLowSlope returns the value of the LowSlope struct pointer
// from NokiaConf_Configure_Qos_QueueMgmtPolicy. If the receiver or the field LowSlope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetLowSlope() *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope {
	if t != nil && t.LowSlope != nil {
		return t.LowSlope
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetMbs() NokiaConf_Configure_Qos_QueueMgmtPolicy_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return UnionInt32(6250)
	}
	return t.Mbs
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSpeed is set, it can
// safely use t.GetPortSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSpeed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetPortSpeed() uint32 {
	if t == nil || t.PortSpeed == nil {
		return 100
	}
	return *t.PortSpeed
}

// GetQueueMgmtPolicyName retrieves the value of the leaf QueueMgmtPolicyName from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueMgmtPolicyName is set, it can
// safely use t.GetQueueMgmtPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueMgmtPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetQueueMgmtPolicyName() string {
	if t == nil || t.QueueMgmtPolicyName == nil {
		return ""
	}
	return *t.QueueMgmtPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// GetTimeAverageFactor retrieves the value of the leaf TimeAverageFactor from the NokiaConf_Configure_Qos_QueueMgmtPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeAverageFactor is set, it can
// safely use t.GetTimeAverageFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeAverageFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) GetTimeAverageFactor() uint32 {
	if t == nil || t.TimeAverageFactor == nil {
		return 7
	}
	return *t.TimeAverageFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueMgmtPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mbs == nil {
		t.Mbs = UnionInt32(6250)
	}
	if t.PortSpeed == nil {
		var v uint32 = 100
		t.PortSpeed = &v
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	if t.TimeAverageFactor == nil {
		var v uint32 = 7
		t.TimeAverageFactor = &v
	}
	t.ExceedSlope.PopulateDefaults()
	t.HighSlope.PopulateDefaults()
	t.HighplusSlope.PopulateDefaults()
	t.LowSlope.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_QueueMgmtPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueMgmtPolicyName == nil {
		return nil, fmt.Errorf("nil value for key QueueMgmtPolicyName")
	}

	return map[string]interface{}{
		"queue-mgmt-policy-name": *t.QueueMgmtPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueMgmtPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueMgmtPolicy.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope represents the /nokia-conf/configure/qos/queue-mgmt-policy/exceed-slope YANG schema element.
type NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 55
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 30
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 55
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 30
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_ExceedSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope represents the /nokia-conf/configure/qos/queue-mgmt-policy/high-slope YANG schema element.
type NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 90
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 70
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 90
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 70
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_HighSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope represents the /nokia-conf/configure/qos/queue-mgmt-policy/highplus-slope YANG schema element.
type NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 100
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 85
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 100
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 85
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_HighplusSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope represents the /nokia-conf/configure/qos/queue-mgmt-policy/low-slope YANG schema element.
type NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxAvg     *uint32                     `path:"max-avg" module:"nokia-conf"`
	MaxProb    *uint32                     `path:"max-prob" module:"nokia-conf"`
	StartAvg   *uint32                     `path:"start-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxAvg retrieves the value of the leaf MaxAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAvg is set, it can
// safely use t.GetMaxAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) GetMaxAvg() uint32 {
	if t == nil || t.MaxAvg == nil {
		return 75
	}
	return *t.MaxAvg
}

// GetMaxProb retrieves the value of the leaf MaxProb from the NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProb is set, it can
// safely use t.GetMaxProb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) GetMaxProb() uint32 {
	if t == nil || t.MaxProb == nil {
		return 75
	}
	return *t.MaxProb
}

// GetStartAvg retrieves the value of the leaf StartAvg from the NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartAvg is set, it can
// safely use t.GetStartAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartAvg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) GetStartAvg() uint32 {
	if t == nil || t.StartAvg == nil {
		return 50
	}
	return *t.StartAvg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAvg == nil {
		var v uint32 = 75
		t.MaxAvg = &v
	}
	if t.MaxProb == nil {
		var v uint32 = 75
		t.MaxProb = &v
	}
	if t.StartAvg == nil {
		var v uint32 = 50
		t.StartAvg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope.
func (*NokiaConf_Configure_Qos_QueueMgmtPolicy_LowSlope) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress represents the /nokia-conf/configure/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Qos_SapEgress struct {
	ApplyGroups            []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                              `path:"description" module:"nokia-conf"`
	Dot1P                  map[int32]*NokiaConf_Configure_Qos_SapEgress_Dot1P                   `path:"dot1p" module:"nokia-conf"`
	Dscp                   map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_SapEgress_Dscp `path:"dscp" module:"nokia-conf"`
	EthernetCtag           *bool                                                                `path:"ethernet-ctag" module:"nokia-conf"`
	Fc                     map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_SapEgress_Fc    `path:"fc" module:"nokia-conf"`
	HsAttachmentPolicy     *string                                                              `path:"hs-attachment-policy" module:"nokia-conf"`
	HsWrrGroup             map[uint32]*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup             `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues            *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues                       `path:"hsmda-queues" module:"nokia-conf"`
	IpCriteria             *NokiaConf_Configure_Qos_SapEgress_IpCriteria                        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria           *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria                      `path:"ipv6-criteria" module:"nokia-conf"`
	ParentLocation         E_NokiaConf_Configure_Qos_SapEgress_ParentLocation                   `path:"parent-location" module:"nokia-conf"`
	Policer                map[int32]*NokiaConf_Configure_Qos_SapEgress_Policer                 `path:"policer" module:"nokia-conf"`
	PolicersHqosManageable *bool                                                                `path:"policers-hqos-manageable" module:"nokia-conf"`
	PolicyId               *uint32                                                              `path:"policy-id" module:"nokia-conf"`
	PostPolicerMapping     *string                                                              `path:"post-policer-mapping" module:"nokia-conf"`
	Prec                   map[int32]*NokiaConf_Configure_Qos_SapEgress_Prec                    `path:"prec" module:"nokia-conf"`
	Queue                  map[int32]*NokiaConf_Configure_Qos_SapEgress_Queue                   `path:"queue" module:"nokia-conf"`
	SapEgressPolicyName    *string                                                              `path:"sap-egress-policy-name" module:"nokia-conf"`
	SchedClassElevation    *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation               `path:"sched-class-elevation" module:"nokia-conf"`
	Scope                  E_NokiaTypesQos_ItemScope                                            `path:"scope" module:"nokia-conf"`
	SubscriberMgmt         *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt                    `path:"subscriber-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress) NewDot1P(Dot1PValue int32) (*NokiaConf_Configure_Qos_SapEgress_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Qos_SapEgress_Dot1P{
		Dot1PValue: &Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress) RenameDot1P(oldK, newK int32) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = &newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_SapEgress_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_SapEgress_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress) DeleteDot1P(Dot1PValue int32) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Qos_SapEgress_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress) AppendDot1P(v *NokiaConf_Configure_Qos_SapEgress_Dot1P) error {
	if v.Dot1PValue == nil {
		return fmt.Errorf("invalid nil key received for Dot1PValue")
	}

	key := *v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress) NewDscp(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Qos_SapEgress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_SapEgress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Qos_SapEgress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress) RenameDscp(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_SapEgress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_SapEgress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress) DeleteDscp(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Qos_SapEgress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress) AppendDscp(v *NokiaConf_Configure_Qos_SapEgress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_SapEgress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress) NewFc(FcName E_NokiaTypesSros_FcName) (*NokiaConf_Configure_Qos_SapEgress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_SapEgress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_SapEgress_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress) RenameFc(oldK, newK E_NokiaTypesSros_FcName) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_SapEgress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetFc(FcName E_NokiaTypesSros_FcName) *NokiaConf_Configure_Qos_SapEgress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress) DeleteFc(FcName E_NokiaTypesSros_FcName) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_SapEgress_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress) AppendFc(v *NokiaConf_Configure_Qos_SapEgress_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[E_NokiaTypesSros_FcName]*NokiaConf_Configure_Qos_SapEgress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Qos_SapEgress_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Qos_SapEgress_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress) AppendHsWrrGroup(v *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Qos_SapEgress_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Qos_SapEgress_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Qos_SapEgress_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetPolicer(PolicerId int32) *NokiaConf_Configure_Qos_SapEgress_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Qos_SapEgress_Policer struct to the
// list Policer of NokiaConf_Configure_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress) AppendPolicer(v *NokiaConf_Configure_Qos_SapEgress_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewPrec creates a new entry in the Prec list of the
// NokiaConf_Configure_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress) NewPrec(PrecValue int32) (*NokiaConf_Configure_Qos_SapEgress_Prec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Prec)
	}

	key := PrecValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prec", key)
	}

	t.Prec[key] = &NokiaConf_Configure_Qos_SapEgress_Prec{
		PrecValue: &PrecValue,
	}

	return t.Prec[key], nil
}

// RenamePrec renames an entry in the list Prec within
// the NokiaConf_Configure_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress) RenamePrec(oldK, newK int32) error {
	if _, ok := t.Prec[newK]; ok {
		return fmt.Errorf("key %v already exists in Prec", newK)
	}

	e, ok := t.Prec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prec", oldK)
	}
	e.PrecValue = &newK

	t.Prec[newK] = e
	delete(t.Prec, oldK)
	return nil
}

// GetOrCreatePrec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreatePrec(PrecValue int32) *NokiaConf_Configure_Qos_SapEgress_Prec {

	key := PrecValue

	if v, ok := t.Prec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrec(PrecValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrec got unexpected error: %v", err))
	}
	return v
}

// GetPrec retrieves the value with the specified key from
// the Prec map field of NokiaConf_Configure_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetPrec(PrecValue int32) *NokiaConf_Configure_Qos_SapEgress_Prec {

	if t == nil {
		return nil
	}

	key := PrecValue

	if lm, ok := t.Prec[key]; ok {
		return lm
	}
	return nil
}

// DeletePrec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress) DeletePrec(PrecValue int32) {
	key := PrecValue

	delete(t.Prec, key)
}

// AppendPrec appends the supplied NokiaConf_Configure_Qos_SapEgress_Prec struct to the
// list Prec of NokiaConf_Configure_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_Prec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress) AppendPrec(v *NokiaConf_Configure_Qos_SapEgress_Prec) error {
	if v.PrecValue == nil {
		return fmt.Errorf("invalid nil key received for PrecValue")
	}

	key := *v.PrecValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Prec)
	}

	if _, ok := t.Prec[key]; ok {
		return fmt.Errorf("duplicate key for list Prec %v", key)
	}

	t.Prec[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_SapEgress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_SapEgress_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_SapEgress_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_SapEgress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_SapEgress_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_SapEgress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_SapEgress_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_SapEgress_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_SapEgress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress) AppendQueue(v *NokiaConf_Configure_Qos_SapEgress_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Qos_SapEgress_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateIpCriteria() *NokiaConf_Configure_Qos_SapEgress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Qos_SapEgress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetOrCreateSchedClassElevation retrieves the value of the SchedClassElevation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateSchedClassElevation() *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation {
	if t.SchedClassElevation != nil {
		return t.SchedClassElevation
	}
	t.SchedClassElevation = &NokiaConf_Configure_Qos_SapEgress_SchedClassElevation{}
	return t.SchedClassElevation
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Qos_SapEgress. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetHsmdaQueues() *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Qos_SapEgress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetIpCriteria() *NokiaConf_Configure_Qos_SapEgress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Qos_SapEgress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetIpv6Criteria() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetSchedClassElevation returns the value of the SchedClassElevation struct pointer
// from NokiaConf_Configure_Qos_SapEgress. If the receiver or the field SchedClassElevation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetSchedClassElevation() *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation {
	if t != nil && t.SchedClassElevation != nil {
		return t.SchedClassElevation
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Qos_SapEgress. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress) GetSubscriberMgmt() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEthernetCtag retrieves the value of the leaf EthernetCtag from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetCtag is set, it can
// safely use t.GetEthernetCtag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetCtag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetEthernetCtag() bool {
	if t == nil || t.EthernetCtag == nil {
		return false
	}
	return *t.EthernetCtag
}

// GetHsAttachmentPolicy retrieves the value of the leaf HsAttachmentPolicy from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAttachmentPolicy is set, it can
// safely use t.GetHsAttachmentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAttachmentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetHsAttachmentPolicy() string {
	if t == nil || t.HsAttachmentPolicy == nil {
		return ""
	}
	return *t.HsAttachmentPolicy
}

// GetParentLocation retrieves the value of the leaf ParentLocation from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParentLocation is set, it can
// safely use t.GetParentLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParentLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetParentLocation() E_NokiaConf_Configure_Qos_SapEgress_ParentLocation {
	if t == nil || t.ParentLocation == 0 {
		return NokiaConf_Configure_Qos_SapEgress_ParentLocation_auto
	}
	return t.ParentLocation
}

// GetPolicersHqosManageable retrieves the value of the leaf PolicersHqosManageable from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicersHqosManageable is set, it can
// safely use t.GetPolicersHqosManageable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicersHqosManageable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetPolicersHqosManageable() bool {
	if t == nil || t.PolicersHqosManageable == nil {
		return false
	}
	return *t.PolicersHqosManageable
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// GetPostPolicerMapping retrieves the value of the leaf PostPolicerMapping from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicerMapping is set, it can
// safely use t.GetPostPolicerMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicerMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetPostPolicerMapping() string {
	if t == nil || t.PostPolicerMapping == nil {
		return ""
	}
	return *t.PostPolicerMapping
}

// GetSapEgressPolicyName retrieves the value of the leaf SapEgressPolicyName from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapEgressPolicyName is set, it can
// safely use t.GetSapEgressPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapEgressPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetSapEgressPolicyName() string {
	if t == nil || t.SapEgressPolicyName == nil {
		return ""
	}
	return *t.SapEgressPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EthernetCtag == nil {
		var v bool = false
		t.EthernetCtag = &v
	}
	if t.ParentLocation == 0 {
		t.ParentLocation = NokiaConf_Configure_Qos_SapEgress_ParentLocation_auto
	}
	if t.PolicersHqosManageable == nil {
		var v bool = false
		t.PolicersHqosManageable = &v
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.HsmdaQueues.PopulateDefaults()
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	t.SchedClassElevation.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Prec {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapEgressPolicyName == nil {
		return nil, fmt.Errorf("nil value for key SapEgressPolicyName")
	}

	return map[string]interface{}{
		"sap-egress-policy-name": *t.SapEgressPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress.
func (*NokiaConf_Configure_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Dot1P represents the /nokia-conf/configure/qos/sap-egress/dot1p YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Dot1P struct {
	ApplyGroups        []string                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Dot1PValue         *int32                          `path:"dot1p-value" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName         `path:"fc" module:"nokia-conf"`
	Profile            E_NokiaTypesQos_EgressProfileDe `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Dot1P) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) GetDot1PValue() int32 {
	if t == nil || t.Dot1PValue == nil {
		return 0
	}
	return *t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_SapEgress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) GetProfile() E_NokiaTypesQos_EgressProfileDe {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dot1PValue == nil {
		return nil, fmt.Errorf("nil value for key Dot1PValue")
	}

	return map[string]interface{}{
		"dot1p-value": *t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Dot1P.
func (*NokiaConf_Configure_Qos_SapEgress_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Dscp represents the /nokia-conf/configure/qos/sap-egress/dscp YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Dscp struct {
	ApplyGroups          []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName             E_NokiaTypesQos_DscpName      `path:"dscp-name" module:"nokia-conf"`
	Fc                   E_NokiaTypesSros_FcName       `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride *uint32                       `path:"hsmda-counter-override" module:"nokia-conf"`
	Profile              E_NokiaTypesQos_EgressProfile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Dscp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_SapEgress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Dscp.
func (*NokiaConf_Configure_Qos_SapEgress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc represents the /nokia-conf/configure/qos/sap-egress/fc YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc struct {
	ApplyGroups            []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	DeMark                 *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark                 `path:"de-mark" module:"nokia-conf" yangPresence:"true"`
	DeMarkInner            *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner            `path:"de-mark-inner" module:"nokia-conf" yangPresence:"true"`
	DeMarkOuter            *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter            `path:"de-mark-outer" module:"nokia-conf" yangPresence:"true"`
	Dot1P                  *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P                  `path:"dot1p" module:"nokia-conf"`
	Dot1PInner             *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner             `path:"dot1p-inner" module:"nokia-conf"`
	Dot1POuter             *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter             `path:"dot1p-outer" module:"nokia-conf"`
	Dscp                   *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp                   `path:"dscp" module:"nokia-conf"`
	FcName                 E_NokiaTypesSros_FcName                                      `path:"fc-name" module:"nokia-conf"`
	Hsmda                  *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda                  `path:"hsmda" module:"nokia-conf"`
	Policer                *int32                                                       `path:"policer" module:"nokia-conf"`
	PortRedirectGroupQueue *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue `path:"port-redirect-group-queue" module:"nokia-conf" yangPresence:"true"`
	Prec                   *NokiaConf_Configure_Qos_SapEgress_Fc_Prec                   `path:"prec" module:"nokia-conf"`
	Queue                  *int32                                                       `path:"queue" module:"nokia-conf"`
	QueueGroupQueue        *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue        `path:"queue-group-queue" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc) IsYANGGoStruct() {}

// GetOrCreateDeMark retrieves the value of the DeMark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateDeMark() *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark {
	if t.DeMark != nil {
		return t.DeMark
	}
	t.DeMark = &NokiaConf_Configure_Qos_SapEgress_Fc_DeMark{}
	return t.DeMark
}

// GetOrCreateDeMarkInner retrieves the value of the DeMarkInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateDeMarkInner() *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner {
	if t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	t.DeMarkInner = &NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner{}
	return t.DeMarkInner
}

// GetOrCreateDeMarkOuter retrieves the value of the DeMarkOuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateDeMarkOuter() *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter {
	if t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	t.DeMarkOuter = &NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter{}
	return t.DeMarkOuter
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateDot1P() *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDot1PInner retrieves the value of the Dot1PInner field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateDot1PInner() *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner {
	if t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	t.Dot1PInner = &NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner{}
	return t.Dot1PInner
}

// GetOrCreateDot1POuter retrieves the value of the Dot1POuter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateDot1POuter() *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter {
	if t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	t.Dot1POuter = &NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter{}
	return t.Dot1POuter
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateDscp() *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Qos_SapEgress_Fc_Dscp{}
	return t.Dscp
}

// GetOrCreateHsmda retrieves the value of the Hsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateHsmda() *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda {
	if t.Hsmda != nil {
		return t.Hsmda
	}
	t.Hsmda = &NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda{}
	return t.Hsmda
}

// GetOrCreatePortRedirectGroupQueue retrieves the value of the PortRedirectGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreatePortRedirectGroupQueue() *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue {
	if t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	t.PortRedirectGroupQueue = &NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue{}
	return t.PortRedirectGroupQueue
}

// GetOrCreatePrec retrieves the value of the Prec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreatePrec() *NokiaConf_Configure_Qos_SapEgress_Fc_Prec {
	if t.Prec != nil {
		return t.Prec
	}
	t.Prec = &NokiaConf_Configure_Qos_SapEgress_Fc_Prec{}
	return t.Prec
}

// GetOrCreateQueueGroupQueue retrieves the value of the QueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetOrCreateQueueGroupQueue() *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue {
	if t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	t.QueueGroupQueue = &NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue{}
	return t.QueueGroupQueue
}

// GetDeMark returns the value of the DeMark struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field DeMark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetDeMark() *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark {
	if t != nil && t.DeMark != nil {
		return t.DeMark
	}
	return nil
}

// GetDeMarkInner returns the value of the DeMarkInner struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field DeMarkInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetDeMarkInner() *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner {
	if t != nil && t.DeMarkInner != nil {
		return t.DeMarkInner
	}
	return nil
}

// GetDeMarkOuter returns the value of the DeMarkOuter struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field DeMarkOuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetDeMarkOuter() *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter {
	if t != nil && t.DeMarkOuter != nil {
		return t.DeMarkOuter
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetDot1P() *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDot1PInner returns the value of the Dot1PInner struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field Dot1PInner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetDot1PInner() *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner {
	if t != nil && t.Dot1PInner != nil {
		return t.Dot1PInner
	}
	return nil
}

// GetDot1POuter returns the value of the Dot1POuter struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field Dot1POuter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetDot1POuter() *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter {
	if t != nil && t.Dot1POuter != nil {
		return t.Dot1POuter
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetDscp() *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetHsmda returns the value of the Hsmda struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field Hsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetHsmda() *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda {
	if t != nil && t.Hsmda != nil {
		return t.Hsmda
	}
	return nil
}

// GetPortRedirectGroupQueue returns the value of the PortRedirectGroupQueue struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field PortRedirectGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetPortRedirectGroupQueue() *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue {
	if t != nil && t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	return nil
}

// GetPrec returns the value of the Prec struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field Prec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetPrec() *NokiaConf_Configure_Qos_SapEgress_Fc_Prec {
	if t != nil && t.Prec != nil {
		return t.Prec
	}
	return nil
}

// GetQueueGroupQueue returns the value of the QueueGroupQueue struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc. If the receiver or the field QueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetQueueGroupQueue() *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue {
	if t != nil && t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetFcName() E_NokiaTypesSros_FcName {
	if t == nil || t.FcName == 0 {
		return 0
	}
	return t.FcName
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapEgress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeMark.PopulateDefaults()
	t.DeMarkInner.PopulateDefaults()
	t.DeMarkOuter.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.Dot1PInner.PopulateDefaults()
	t.Dot1POuter.PopulateDefaults()
	t.Dscp.PopulateDefaults()
	t.Hsmda.PopulateDefaults()
	t.PortRedirectGroupQueue.PopulateDefaults()
	t.Prec.PopulateDefaults()
	t.QueueGroupQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc.
func (*NokiaConf_Configure_Qos_SapEgress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_DeMark represents the /nokia-conf/configure/qos/sap-egress/fc/de-mark YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_DeMark struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_DeMark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_DeMark) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_SapEgress_Fc_DeMark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_DeMark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_DeMark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_DeMark.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_DeMark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner represents the /nokia-conf/configure/qos/sap-egress/fc/de-mark-inner YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter represents the /nokia-conf/configure/qos/sap-egress/fc/de-mark-outer YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter struct {
	Force *int32 `path:"force" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter) GetForce() int32 {
	if t == nil || t.Force == nil {
		return 0
	}
	return *t.Force
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_DeMarkOuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P represents the /nokia-conf/configure/qos/sap-egress/fc/dot1p YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P struct {
	ExceedProfile *int32 `path:"exceed-profile" module:"nokia-conf"`
	InProfile     *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile    *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) GetExceedProfile() int32 {
	if t == nil || t.ExceedProfile == nil {
		return 0
	}
	return *t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner represents the /nokia-conf/configure/qos/sap-egress/fc/dot1p-inner YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner struct {
	InProfile  *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) IsYANGGoStruct() {}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dot1PInner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter represents the /nokia-conf/configure/qos/sap-egress/fc/dot1p-outer YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter struct {
	ExceedProfile *int32 `path:"exceed-profile" module:"nokia-conf"`
	InProfile     *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile    *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) GetExceedProfile() int32 {
	if t == nil || t.ExceedProfile == nil {
		return 0
	}
	return *t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dot1POuter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_Dscp represents the /nokia-conf/configure/qos/sap-egress/fc/dscp YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_Dscp struct {
	ExceedProfile E_NokiaTypesQos_DscpName `path:"exceed-profile" module:"nokia-conf"`
	InProfile     E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	OutProfile    E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) GetExceedProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.ExceedProfile == 0 {
		return 0
	}
	return t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_Dscp.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda represents the /nokia-conf/configure/qos/sap-egress/fc/hsmda YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda struct {
	PortRedirectGroupQueue *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue `path:"port-redirect-group-queue" module:"nokia-conf" yangPresence:"true"`
	Queue                  *int32                                                             `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroupQueue retrieves the value of the PortRedirectGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) GetOrCreatePortRedirectGroupQueue() *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue {
	if t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	t.PortRedirectGroupQueue = &NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue{}
	return t.PortRedirectGroupQueue
}

// GetPortRedirectGroupQueue returns the value of the PortRedirectGroupQueue struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda. If the receiver or the field PortRedirectGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) GetPortRedirectGroupQueue() *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue {
	if t != nil && t.PortRedirectGroupQueue != nil {
		return t.PortRedirectGroupQueue
	}
	return nil
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroupQueue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue represents the /nokia-conf/configure/qos/sap-egress/fc/hsmda/port-redirect-group-queue YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue struct {
	Queue *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Hsmda_PortRedirectGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue represents the /nokia-conf/configure/qos/sap-egress/fc/port-redirect-group-queue YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue struct {
	Queue *int32 `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_PortRedirectGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_Prec represents the /nokia-conf/configure/qos/sap-egress/fc/prec YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_Prec struct {
	ExceedProfile *int32 `path:"exceed-profile" module:"nokia-conf"`
	InProfile     *int32 `path:"in-profile" module:"nokia-conf"`
	OutProfile    *int32 `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Prec) IsYANGGoStruct() {}

// GetExceedProfile retrieves the value of the leaf ExceedProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedProfile is set, it can
// safely use t.GetExceedProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Prec) GetExceedProfile() int32 {
	if t == nil || t.ExceedProfile == nil {
		return 0
	}
	return *t.ExceedProfile
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Prec) GetInProfile() int32 {
	if t == nil || t.InProfile == nil {
		return 0
	}
	return *t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Qos_SapEgress_Fc_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Prec) GetOutProfile() int32 {
	if t == nil || t.OutProfile == nil {
		return 0
	}
	return *t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_Prec.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue represents the /nokia-conf/configure/qos/sap-egress/fc/queue-group-queue YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue struct {
	Instance       *uint32 `path:"instance" module:"nokia-conf"`
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) IsYANGGoStruct() {}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue.
func (*NokiaConf_Configure_Qos_SapEgress_Fc_QueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_HsWrrGroup represents the /nokia-conf/configure/qos/sap-egress/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_HsWrrGroup struct {
	AdaptationRule     *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                      `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *uint32                                                      `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate        *float64                                                     `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_Rate_Union      `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_SapEgress_HsWrrGroup. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) GetRate() NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_Rate_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_HsWrrGroup.
func (*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule represents the /nokia-conf/configure/qos/sap-egress/hs-wrr-group/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule) IsYANGGoStruct() {}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule.
func (*NokiaConf_Configure_Qos_SapEgress_HsWrrGroup_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_HsmdaQueues represents the /nokia-conf/configure/qos/sap-egress/hsmda-queues YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_HsmdaQueues struct {
	LowBurstMaxClass *uint32                                                        `path:"low-burst-max-class" module:"nokia-conf"`
	PacketByteOffset *int32                                                         `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	WrrPolicy        *string                                                        `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_SapEgress_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_SapEgress_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_SapEgress_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 8
	}
	return *t.LowBurstMaxClass
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 8
		t.LowBurstMaxClass = &v
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_HsmdaQueues.
func (*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue represents the /nokia-conf/configure/qos/sap-egress/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule  `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_Mbs_Union        `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                               `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_Rate_Union       `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                              `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *uint32                                                              `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetBurstLimit() NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) GetWrrWeight() uint32 {
	if t == nil || t.WrrWeight == nil {
		return 1
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_BurstLimit_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_HsmdaQueueBurstSize_Enum_auto
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_HsmdaQueuePirRate_Enum_max
	}
	if t.WrrWeight == nil {
		var v uint32 = 1
		t.WrrWeight = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule represents the /nokia-conf/configure/qos/sap-egress/hsmda-queues/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_SapEgress_HsmdaQueues_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria represents the /nokia-conf/configure/qos/sap-egress/ip-criteria YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_SapEgress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_SapEgress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_SapEgress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_SapEgress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                    `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                    `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action struct {
	Fc                     E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride   *uint32                            `path:"hsmda-counter-override" module:"nokia-conf"`
	Policer                *int32                             `path:"policer" module:"nokia-conf"`
	PortRedirectGroupQueue *bool                              `path:"port-redirect-group-queue" module:"nokia-conf"`
	Profile                E_NokiaTypesQos_EgressProfile      `path:"profile" module:"nokia-conf"`
	Queue                  *int32                             `path:"queue" module:"nokia-conf"`
	Type                   E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
	UseFcMappedQueue       *bool                              `path:"use-fc-mapped-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPortRedirectGroupQueue retrieves the value of the leaf PortRedirectGroupQueue from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirectGroupQueue is set, it can
// safely use t.GetPortRedirectGroupQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirectGroupQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetPortRedirectGroupQueue() bool {
	if t == nil || t.PortRedirectGroupQueue == nil {
		return false
	}
	return *t.PortRedirectGroupQueue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// GetUseFcMappedQueue retrieves the value of the leaf UseFcMappedQueue from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseFcMappedQueue is set, it can
// safely use t.GetUseFcMappedQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseFcMappedQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) GetUseFcMappedQueue() bool {
	if t == nil || t.UseFcMappedQueue == nil {
		return false
	}
	return *t.UseFcMappedQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirectGroupQueue == nil {
		var v bool = false
		t.PortRedirectGroupQueue = &v
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	if t.UseFcMappedQueue == nil {
		var v bool = false
		t.UseFcMappedQueue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                  `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                  `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                  `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                  `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                  `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                  `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/sap-egress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_SapEgress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                      `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                      `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action struct {
	Fc                     E_NokiaTypesSros_FcName            `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride   *uint32                            `path:"hsmda-counter-override" module:"nokia-conf"`
	Policer                *int32                             `path:"policer" module:"nokia-conf"`
	PortRedirectGroupQueue *bool                              `path:"port-redirect-group-queue" module:"nokia-conf"`
	Profile                E_NokiaTypesQos_EgressProfile      `path:"profile" module:"nokia-conf"`
	Queue                  *int32                             `path:"queue" module:"nokia-conf"`
	Type                   E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
	UseFcMappedQueue       *bool                              `path:"use-fc-mapped-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPortRedirectGroupQueue retrieves the value of the leaf PortRedirectGroupQueue from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirectGroupQueue is set, it can
// safely use t.GetPortRedirectGroupQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirectGroupQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetPortRedirectGroupQueue() bool {
	if t == nil || t.PortRedirectGroupQueue == nil {
		return false
	}
	return *t.PortRedirectGroupQueue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// GetUseFcMappedQueue retrieves the value of the leaf UseFcMappedQueue from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseFcMappedQueue is set, it can
// safely use t.GetUseFcMappedQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseFcMappedQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) GetUseFcMappedQueue() bool {
	if t == nil || t.UseFcMappedQueue == nil {
		return false
	}
	return *t.UseFcMappedQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirectGroupQueue == nil {
		var v bool = false
		t.PortRedirectGroupQueue = &v
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
	if t.UseFcMappedQueue == nil {
		var v bool = false
		t.UseFcMappedQueue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                    `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                    `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                    `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                    `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                    `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                    `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                    `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/sap-egress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_SapEgress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Policer represents the /nokia-conf/configure/qos/sap-egress/policer YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Policer struct {
	AdaptationRule     *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                      `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ArbiterParent      *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_SapEgress_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description        *string                                                      `path:"description" module:"nokia-conf"`
	DscpPrecRemarking  *bool                                                        `path:"dscp-prec-remarking" module:"nokia-conf"`
	ExceedPir          *bool                                                        `path:"exceed-pir" module:"nokia-conf"`
	HighPrioOnly       NokiaConf_Configure_Qos_SapEgress_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_SapEgress_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                       `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                       `path:"policer-id" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent        `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	ProfileCapped      *bool                                                        `path:"profile-capped" module:"nokia-conf"`
	ProfileOutPreserve *bool                                                        `path:"profile-out-preserve" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_SapEgress_Policer_Rate              `path:"rate" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent   `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                        `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetOrCreatePortParent() *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Qos_SapEgress_Policer_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetOrCreateRate() *NokiaConf_Configure_Qos_SapEgress_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_SapEgress_Policer_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetOrCreateSchedulerParent() *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetArbiterParent() *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetPercentRate() *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Policer. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetPortParent() *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetRate() *NokiaConf_Configure_Qos_SapEgress_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Policer. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetSchedulerParent() *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetCbs() NokiaConf_Configure_Qos_SapEgress_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDscpPrecRemarking retrieves the value of the leaf DscpPrecRemarking from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpPrecRemarking is set, it can
// safely use t.GetDscpPrecRemarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpPrecRemarking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetDscpPrecRemarking() bool {
	if t == nil || t.DscpPrecRemarking == nil {
		return false
	}
	return *t.DscpPrecRemarking
}

// GetExceedPir retrieves the value of the leaf ExceedPir from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedPir is set, it can
// safely use t.GetExceedPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetExceedPir() bool {
	if t == nil || t.ExceedPir == nil {
		return false
	}
	return *t.ExceedPir
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetHighPrioOnly() NokiaConf_Configure_Qos_SapEgress_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetMbs() NokiaConf_Configure_Qos_SapEgress_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetProfileOutPreserve retrieves the value of the leaf ProfileOutPreserve from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileOutPreserve is set, it can
// safely use t.GetProfileOutPreserve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileOutPreserve == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetProfileOutPreserve() bool {
	if t == nil || t.ProfileOutPreserve == nil {
		return false
	}
	return *t.ProfileOutPreserve
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_SapEgress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.DscpPrecRemarking == nil {
		var v bool = false
		t.DscpPrecRemarking = &v
	}
	if t.ExceedPir == nil {
		var v bool = false
		t.ExceedPir = &v
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	if t.ProfileOutPreserve == nil {
		var v bool = false
		t.ProfileOutPreserve = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaTypesQos_EgressPolicerStatMode_minimal
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Policer.
func (*NokiaConf_Configure_Qos_SapEgress_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule represents the /nokia-conf/configure/qos/sap-egress/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent represents the /nokia-conf/configure/qos/sap-egress/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) IsYANGGoStruct() {}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate represents the /nokia-conf/configure/qos/sap-egress/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate struct {
	Cir           *float64                                                              `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                              `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate_ReferenceRate_local_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Policer_PortParent represents the /nokia-conf/configure/qos/sap-egress/policer/port-parent YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Policer_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Policer_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapEgress_Policer_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Policer_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Policer_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Policer_PortParent.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Policer_Rate represents the /nokia-conf/configure/qos/sap-egress/policer/rate YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Policer_Rate struct {
	Cir NokiaConf_Configure_Qos_SapEgress_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_SapEgress_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapEgress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_Rate) GetCir() NokiaConf_Configure_Qos_SapEgress_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_Rate) GetPir() NokiaConf_Configure_Qos_SapEgress_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Policer_Rate.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent represents the /nokia-conf/configure/qos/sap-egress/policer/scheduler-parent YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent.
func (*NokiaConf_Configure_Qos_SapEgress_Policer_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Prec represents the /nokia-conf/configure/qos/sap-egress/prec YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Prec struct {
	ApplyGroups          []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                   E_NokiaTypesSros_FcName       `path:"fc" module:"nokia-conf"`
	HsmdaCounterOverride *uint32                       `path:"hsmda-counter-override" module:"nokia-conf"`
	PrecValue            *int32                        `path:"prec-value" module:"nokia-conf"`
	Profile              E_NokiaTypesQos_EgressProfile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Prec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Prec) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetHsmdaCounterOverride retrieves the value of the leaf HsmdaCounterOverride from the NokiaConf_Configure_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaCounterOverride is set, it can
// safely use t.GetHsmdaCounterOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaCounterOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) GetHsmdaCounterOverride() uint32 {
	if t == nil || t.HsmdaCounterOverride == nil {
		return 0
	}
	return *t.HsmdaCounterOverride
}

// GetPrecValue retrieves the value of the leaf PrecValue from the NokiaConf_Configure_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrecValue is set, it can
// safely use t.GetPrecValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrecValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) GetPrecValue() int32 {
	if t == nil || t.PrecValue == nil {
		return 0
	}
	return *t.PrecValue
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_SapEgress_Prec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) GetProfile() E_NokiaTypesQos_EgressProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Prec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_Prec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrecValue == nil {
		return nil, fmt.Errorf("nil value for key PrecValue")
	}

	return map[string]interface{}{
		"prec-value": *t.PrecValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Prec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Prec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Prec.
func (*NokiaConf_Configure_Qos_SapEgress_Prec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue represents the /nokia-conf/configure/qos/sap-egress/queue YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule     `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                     `path:"adv-config-policy" module:"nokia-conf"`
	AggShaperWeight    *int32                                                      `path:"agg-shaper-weight" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                    `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Qos_SapEgress_Queue_BurstLimit_Union    `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_SapEgress_Queue_Cbs_Union           `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail           `path:"drop-tail" module:"nokia-conf"`
	FirBurstLimit      NokiaConf_Configure_Qos_SapEgress_Queue_FirBurstLimit_Union `path:"fir-burst-limit" module:"nokia-conf"`
	HsAltPortClassPool *bool                                                       `path:"hs-alt-port-class-pool" module:"nokia-conf"`
	HsClassWeight      *uint32                                                     `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue        `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *uint32                                                     `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_SapEgress_Queue_Mbs_Union           `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate        `path:"percent-rate" module:"nokia-conf"`
	PortParent         *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent         `path:"port-parent" module:"nokia-conf" yangPresence:"true"`
	QueueId            *int32                                                      `path:"queue-id" module:"nokia-conf"`
	QueueType          E_NokiaConf_Configure_Qos_SapEgress_Queue_QueueType         `path:"queue-type" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_SapEgress_Queue_Rate               `path:"rate" module:"nokia-conf"`
	SchedClass         NokiaConf_Configure_Qos_SapEgress_Queue_SchedClass_Union    `path:"sched-class" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent    `path:"scheduler-parent" module:"nokia-conf" yangPresence:"true"`
	WredQueue          *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue          `path:"wred-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Qos_SapEgress_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreatePortParent retrieves the value of the PortParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreatePortParent() *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent {
	if t.PortParent != nil {
		return t.PortParent
	}
	t.PortParent = &NokiaConf_Configure_Qos_SapEgress_Queue_PortParent{}
	return t.PortParent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreateRate() *NokiaConf_Configure_Qos_SapEgress_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_SapEgress_Queue_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreateSchedulerParent() *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent{}
	return t.SchedulerParent
}

// GetOrCreateWredQueue retrieves the value of the WredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetOrCreateWredQueue() *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue {
	if t.WredQueue != nil {
		return t.WredQueue
	}
	t.WredQueue = &NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue{}
	return t.WredQueue
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetAdaptationRule() *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetDropTail() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetHsWredQueue() *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetPercentRate() *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetPortParent returns the value of the PortParent struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field PortParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetPortParent() *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent {
	if t != nil && t.PortParent != nil {
		return t.PortParent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetRate() *NokiaConf_Configure_Qos_SapEgress_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetSchedulerParent() *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetWredQueue returns the value of the WredQueue struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue. If the receiver or the field WredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetWredQueue() *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue {
	if t != nil && t.WredQueue != nil {
		return t.WredQueue
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetAggShaperWeight retrieves the value of the leaf AggShaperWeight from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggShaperWeight is set, it can
// safely use t.GetAggShaperWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggShaperWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetAggShaperWeight() int32 {
	if t == nil || t.AggShaperWeight == nil {
		return 1
	}
	return *t.AggShaperWeight
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.00
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetBurstLimit() NokiaConf_Configure_Qos_SapEgress_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Qos_SapEgress_Queue_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetCbs() NokiaConf_Configure_Qos_SapEgress_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Qos_SapEgress_Queue_Cbs_Enum_auto
	}
	return t.Cbs
}

// GetFirBurstLimit retrieves the value of the leaf FirBurstLimit from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirBurstLimit is set, it can
// safely use t.GetFirBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirBurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetFirBurstLimit() NokiaConf_Configure_Qos_SapEgress_Queue_FirBurstLimit_Union {
	if t == nil || t.FirBurstLimit == nil {
		return NokiaConf_Configure_Qos_SapEgress_Queue_FirBurstLimit_Enum_auto
	}
	return t.FirBurstLimit
}

// GetHsAltPortClassPool retrieves the value of the leaf HsAltPortClassPool from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAltPortClassPool is set, it can
// safely use t.GetHsAltPortClassPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAltPortClassPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetHsAltPortClassPool() bool {
	if t == nil || t.HsAltPortClassPool == nil {
		return false
	}
	return *t.HsAltPortClassPool
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetHsClassWeight() uint32 {
	if t == nil || t.HsClassWeight == nil {
		return 1
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetHsWrrWeight() uint32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetMbs() NokiaConf_Configure_Qos_SapEgress_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaConf_Configure_Qos_SapEgress_Queue_Mbs_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetQueueType retrieves the value of the leaf QueueType from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueType is set, it can
// safely use t.GetQueueType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetQueueType() E_NokiaConf_Configure_Qos_SapEgress_Queue_QueueType {
	if t == nil || t.QueueType == 0 {
		return NokiaConf_Configure_Qos_SapEgress_Queue_QueueType_auto_expedited
	}
	return t.QueueType
}

// GetSchedClass retrieves the value of the leaf SchedClass from the NokiaConf_Configure_Qos_SapEgress_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClass is set, it can
// safely use t.GetSchedClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) GetSchedClass() NokiaConf_Configure_Qos_SapEgress_Queue_SchedClass_Union {
	if t == nil || t.SchedClass == nil {
		return NokiaConf_Configure_Qos_SapEgress_Queue_SchedClass_Enum_auto
	}
	return t.SchedClass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AggShaperWeight == nil {
		var v int32 = 1
		t.AggShaperWeight = &v
	}
	if t.AvgFrameOverhead == nil {
		var v float64 = 0.00
		t.AvgFrameOverhead = &v
	}
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Qos_SapEgress_Queue_BurstLimit_Enum_auto
	}
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Qos_SapEgress_Queue_Cbs_Enum_auto
	}
	if t.FirBurstLimit == nil {
		t.FirBurstLimit = NokiaConf_Configure_Qos_SapEgress_Queue_FirBurstLimit_Enum_auto
	}
	if t.HsAltPortClassPool == nil {
		var v bool = false
		t.HsAltPortClassPool = &v
	}
	if t.HsClassWeight == nil {
		var v uint32 = 1
		t.HsClassWeight = &v
	}
	if t.HsWrrWeight == nil {
		var v uint32 = 1
		t.HsWrrWeight = &v
	}
	if t.Mbs == nil {
		t.Mbs = NokiaConf_Configure_Qos_SapEgress_Queue_Mbs_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.QueueType == 0 {
		t.QueueType = NokiaConf_Configure_Qos_SapEgress_Queue_QueueType_auto_expedited
	}
	if t.SchedClass == nil {
		t.SchedClass = NokiaConf_Configure_Qos_SapEgress_Queue_SchedClass_Enum_auto
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.PortParent.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
	t.WredQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue.
func (*NokiaConf_Configure_Qos_SapEgress_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule represents the /nokia-conf/configure/qos/sap-egress/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_DropTail represents the /nokia-conf/configure/qos/sap-egress/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_DropTail struct {
	Exceed   *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed   `path:"exceed" module:"nokia-conf"`
	High     *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High     `path:"high" module:"nokia-conf"`
	Highplus *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus `path:"highplus" module:"nokia-conf"`
	Low      *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low      `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) IsYANGGoStruct() {}

// GetOrCreateExceed retrieves the value of the Exceed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetOrCreateExceed() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed {
	if t.Exceed != nil {
		return t.Exceed
	}
	t.Exceed = &NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed{}
	return t.Exceed
}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetOrCreateHigh() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High{}
	return t.High
}

// GetOrCreateHighplus retrieves the value of the Highplus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetOrCreateHighplus() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus {
	if t.Highplus != nil {
		return t.Highplus
	}
	t.Highplus = &NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus{}
	return t.Highplus
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low{}
	return t.Low
}

// GetExceed returns the value of the Exceed struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue_DropTail. If the receiver or the field Exceed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetExceed() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed {
	if t != nil && t.Exceed != nil {
		return t.Exceed
	}
	return nil
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue_DropTail. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetHigh() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// GetHighplus returns the value of the Highplus struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue_DropTail. If the receiver or the field Highplus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetHighplus() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus {
	if t != nil && t.Highplus != nil {
		return t.Highplus
	}
	return nil
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Qos_SapEgress_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) GetLow() *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exceed.PopulateDefaults()
	t.High.PopulateDefaults()
	t.Highplus.PopulateDefaults()
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_DropTail.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed represents the /nokia-conf/configure/qos/sap-egress/queue/drop-tail/exceed YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Exceed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High represents the /nokia-conf/configure/qos/sap-egress/queue/drop-tail/high YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus represents the /nokia-conf/configure/qos/sap-egress/queue/drop-tail/highplus YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Highplus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low represents the /nokia-conf/configure/qos/sap-egress/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low) IsYANGGoStruct() {}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		t.PercentReductionFromMbs = NokiaTypesQos_BurstPercent_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue represents the /nokia-conf/configure/qos/sap-egress/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate represents the /nokia-conf/configure/qos/sap-egress/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate struct {
	Cir           *float64                                                            `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                            `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate_ReferenceRate_port_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate_ReferenceRate_port_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_PortParent represents the /nokia-conf/configure/qos/sap-egress/queue/port-parent YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_PortParent struct {
	CirLevel  *int32 `path:"cir-level" module:"nokia-conf"`
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Level     *int32 `path:"level" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_PortParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapEgress_Queue_PortParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_PortParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 0
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_PortParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_PortParent.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_PortParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_Rate represents the /nokia-conf/configure/qos/sap-egress/queue/rate YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_Rate struct {
	Cir NokiaConf_Configure_Qos_SapEgress_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_SapEgress_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapEgress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_Rate) GetCir() NokiaConf_Configure_Qos_SapEgress_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapEgress_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_Rate) GetPir() NokiaConf_Configure_Qos_SapEgress_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_QueuePirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_Rate.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent represents the /nokia-conf/configure/qos/sap-egress/queue/scheduler-parent YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue represents the /nokia-conf/configure/qos/sap-egress/queue/wred-queue YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue struct {
	Mode   E_NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue_Mode `path:"mode" module:"nokia-conf"`
	Policy *string                                                  `path:"policy" module:"nokia-conf"`
	Usage  E_NokiaTypesQos_WredQueueSlopeUsage                      `path:"usage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) GetMode() E_NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUsage retrieves the value of the leaf Usage from the NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Usage is set, it can
// safely use t.GetUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Usage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) GetUsage() E_NokiaTypesQos_WredQueueSlopeUsage {
	if t == nil || t.Usage == 0 {
		return 0
	}
	return t.Usage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue.
func (*NokiaConf_Configure_Qos_SapEgress_Queue_WredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SchedClassElevation represents the /nokia-conf/configure/qos/sap-egress/sched-class-elevation YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SchedClassElevation struct {
	SchedClass map[uint32]*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass `path:"sched-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SchedClassElevation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) IsYANGGoStruct() {}

// NewSchedClass creates a new entry in the SchedClass list of the
// NokiaConf_Configure_Qos_SapEgress_SchedClassElevation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) NewSchedClass(ClassId uint32) (*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass)
	}

	key := ClassId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedClass", key)
	}

	t.SchedClass[key] = &NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass{
		ClassId: &ClassId,
	}

	return t.SchedClass[key], nil
}

// RenameSchedClass renames an entry in the list SchedClass within
// the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) RenameSchedClass(oldK, newK uint32) error {
	if _, ok := t.SchedClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedClass", newK)
	}

	e, ok := t.SchedClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedClass", oldK)
	}
	e.ClassId = &newK

	t.SchedClass[newK] = e
	delete(t.SchedClass, oldK)
	return nil
}

// GetOrCreateSchedClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_SchedClassElevation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) GetOrCreateSchedClass(ClassId uint32) *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass {

	key := ClassId

	if v, ok := t.SchedClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedClass(ClassId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedClass retrieves the value with the specified key from
// the SchedClass map field of NokiaConf_Configure_Qos_SapEgress_SchedClassElevation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) GetSchedClass(ClassId uint32) *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass {

	if t == nil {
		return nil
	}

	key := ClassId

	if lm, ok := t.SchedClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapEgress_SchedClassElevation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) DeleteSchedClass(ClassId uint32) {
	key := ClassId

	delete(t.SchedClass, key)
}

// AppendSchedClass appends the supplied NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass struct to the
// list SchedClass of NokiaConf_Configure_Qos_SapEgress_SchedClassElevation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) AppendSchedClass(v *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) error {
	if v.ClassId == nil {
		return fmt.Errorf("invalid nil key received for ClassId")
	}

	key := *v.ClassId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedClass == nil {
		t.SchedClass = make(map[uint32]*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass)
	}

	if _, ok := t.SchedClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedClass %v", key)
	}

	t.SchedClass[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SchedClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SchedClassElevation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SchedClassElevation.
func (*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass represents the /nokia-conf/configure/qos/sap-egress/sched-class-elevation/sched-class YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassId            *uint32  `path:"class-id" module:"nokia-conf"`
	Weight             *uint32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassId retrieves the value of the leaf ClassId from the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassId is set, it can
// safely use t.GetClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) GetClassId() uint32 {
	if t == nil || t.ClassId == nil {
		return 0
	}
	return *t.ClassId
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Weight == nil {
		var v uint32 = 1
		t.Weight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassId == nil {
		return nil, fmt.Errorf("nil value for key ClassId")
	}

	return map[string]interface{}{
		"class-id": *t.ClassId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass.
func (*NokiaConf_Configure_Qos_SapEgress_SchedClassElevation_SchedClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt represents the /nokia-conf/configure/qos/sap-egress/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt struct {
	DynamicPolicer *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer `path:"dynamic-policer" module:"nokia-conf"`
	PccRuleEntry   *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry   `path:"pcc-rule-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateDynamicPolicer retrieves the value of the DynamicPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) GetOrCreateDynamicPolicer() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer {
	if t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	t.DynamicPolicer = &NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer{}
	return t.DynamicPolicer
}

// GetOrCreatePccRuleEntry retrieves the value of the PccRuleEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) GetOrCreatePccRuleEntry() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry {
	if t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	t.PccRuleEntry = &NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry{}
	return t.PccRuleEntry
}

// GetDynamicPolicer returns the value of the DynamicPolicer struct pointer
// from NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt. If the receiver or the field DynamicPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) GetDynamicPolicer() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer {
	if t != nil && t.DynamicPolicer != nil {
		return t.DynamicPolicer
	}
	return nil
}

// GetPccRuleEntry returns the value of the PccRuleEntry struct pointer
// from NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt. If the receiver or the field PccRuleEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) GetPccRuleEntry() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry {
	if t != nil && t.PccRuleEntry != nil {
		return t.PccRuleEntry
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicPolicer.PopulateDefaults()
	t.PccRuleEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer represents the /nokia-conf/configure/qos/sap-egress/subscriber-mgmt/dynamic-policer YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer struct {
	ArbiterParent    *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent  `path:"arbiter-parent" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                          `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerIdRange   *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange `path:"policer-id-range" module:"nokia-conf" yangPresence:"true"`
	StatMode         E_NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) IsYANGGoStruct() {}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetOrCreateArbiterParent() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePolicerIdRange retrieves the value of the PolicerIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetOrCreatePolicerIdRange() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	t.PolicerIdRange = &NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange{}
	return t.PolicerIdRange
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetArbiterParent() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPolicerIdRange returns the value of the PolicerIdRange struct pointer
// from NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer. If the receiver or the field PolicerIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetPolicerIdRange() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange {
	if t != nil && t.PolicerIdRange != nil {
		return t.PolicerIdRange
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetCbs() NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetMbs() NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) GetStatMode() E_NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode {
	if t == nil || t.StatMode == 0 {
		return NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode_minimal
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.StatMode == 0 {
		t.StatMode = NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_StatMode_minimal
	}
	t.ArbiterParent.PopulateDefaults()
	t.PolicerIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent represents the /nokia-conf/configure/qos/sap-egress/subscriber-mgmt/dynamic-policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) IsYANGGoStruct() {
}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange represents the /nokia-conf/configure/qos/sap-egress/subscriber-mgmt/dynamic-policer/policer-id-range YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_DynamicPolicer_PolicerIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry represents the /nokia-conf/configure/qos/sap-egress/subscriber-mgmt/pcc-rule-entry YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry struct {
	Range *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) GetOrCreateRange() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) GetRange() *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range represents the /nokia-conf/configure/qos/sap-egress/subscriber-mgmt/pcc-rule-entry/range YANG schema element.
type NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range.
func (*NokiaConf_Configure_Qos_SapEgress_SubscriberMgmt_PccRuleEntry_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress represents the /nokia-conf/configure/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Qos_SapIngress struct {
	ApplyGroups                 []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultFc                   *string                                                               `path:"default-fc" module:"nokia-conf"`
	DefaultPriority             E_NokiaTypesQos_DefaultPriority                                       `path:"default-priority" module:"nokia-conf"`
	Description                 *string                                                               `path:"description" module:"nokia-conf"`
	Dot1P                       map[int32]*NokiaConf_Configure_Qos_SapIngress_Dot1P                   `path:"dot1p" module:"nokia-conf"`
	Dscp                        map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_SapIngress_Dscp `path:"dscp" module:"nokia-conf"`
	Fc                          map[string]*NokiaConf_Configure_Qos_SapIngress_Fc                     `path:"fc" module:"nokia-conf"`
	IngressClassificationPolicy *string                                                               `path:"ingress-classification-policy" module:"nokia-conf"`
	IpCriteria                  *NokiaConf_Configure_Qos_SapIngress_IpCriteria                        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria                *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria                      `path:"ipv6-criteria" module:"nokia-conf"`
	LspExp                      map[int32]*NokiaConf_Configure_Qos_SapIngress_LspExp                  `path:"lsp-exp" module:"nokia-conf"`
	MacCriteria                 *NokiaConf_Configure_Qos_SapIngress_MacCriteria                       `path:"mac-criteria" module:"nokia-conf"`
	Policer                     map[int32]*NokiaConf_Configure_Qos_SapIngress_Policer                 `path:"policer" module:"nokia-conf"`
	PolicerAllocation           E_NokiaTypesQos_SapIngressPolicerAlloc                                `path:"policer-allocation" module:"nokia-conf"`
	PolicersHqosManageable      *bool                                                                 `path:"policers-hqos-manageable" module:"nokia-conf"`
	PolicyId                    *uint32                                                               `path:"policy-id" module:"nokia-conf"`
	Prec                        map[int32]*NokiaConf_Configure_Qos_SapIngress_Prec                    `path:"prec" module:"nokia-conf"`
	Queue                       map[int32]*NokiaConf_Configure_Qos_SapIngress_Queue                   `path:"queue" module:"nokia-conf"`
	SapIngressPolicyName        *string                                                               `path:"sap-ingress-policy-name" module:"nokia-conf"`
	Scope                       E_NokiaTypesQos_ItemScope                                             `path:"scope" module:"nokia-conf"`
	SubscriberMgmt              *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt                    `path:"subscriber-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// NokiaConf_Configure_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress) NewDot1P(Dot1PValue int32) (*NokiaConf_Configure_Qos_SapIngress_Dot1P, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Dot1P)
	}

	key := Dot1PValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &NokiaConf_Configure_Qos_SapIngress_Dot1P{
		Dot1PValue: &Dot1PValue,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the NokiaConf_Configure_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress) RenameDot1P(oldK, newK int32) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Dot1PValue = &newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_SapIngress_Dot1P {

	key := Dot1PValue

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Dot1PValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of NokiaConf_Configure_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetDot1P(Dot1PValue int32) *NokiaConf_Configure_Qos_SapIngress_Dot1P {

	if t == nil {
		return nil
	}

	key := Dot1PValue

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress) DeleteDot1P(Dot1PValue int32) {
	key := Dot1PValue

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied NokiaConf_Configure_Qos_SapIngress_Dot1P struct to the
// list Dot1P of NokiaConf_Configure_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_Dot1P already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress) AppendDot1P(v *NokiaConf_Configure_Qos_SapIngress_Dot1P) error {
	if v.Dot1PValue == nil {
		return fmt.Errorf("invalid nil key received for Dot1PValue")
	}

	key := *v.Dot1PValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// NewDscp creates a new entry in the Dscp list of the
// NokiaConf_Configure_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress) NewDscp(DscpName E_NokiaTypesQos_DscpName) (*NokiaConf_Configure_Qos_SapIngress_Dscp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_SapIngress_Dscp)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &NokiaConf_Configure_Qos_SapIngress_Dscp{
		DscpName: DscpName,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the NokiaConf_Configure_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress) RenameDscp(oldK, newK E_NokiaTypesQos_DscpName) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.DscpName = newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_SapIngress_Dscp {

	key := DscpName

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of NokiaConf_Configure_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetDscp(DscpName E_NokiaTypesQos_DscpName) *NokiaConf_Configure_Qos_SapIngress_Dscp {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress) DeleteDscp(DscpName E_NokiaTypesQos_DscpName) {
	key := DscpName

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied NokiaConf_Configure_Qos_SapIngress_Dscp struct to the
// list Dscp of NokiaConf_Configure_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_Dscp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress) AppendDscp(v *NokiaConf_Configure_Qos_SapIngress_Dscp) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[E_NokiaTypesQos_DscpName]*NokiaConf_Configure_Qos_SapIngress_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress) NewFc(FcName string) (*NokiaConf_Configure_Qos_SapIngress_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Qos_SapIngress_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Qos_SapIngress_Fc{
		FcName: &FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress) RenameFc(oldK, newK string) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = &newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateFc(FcName string) *NokiaConf_Configure_Qos_SapIngress_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetFc(FcName string) *NokiaConf_Configure_Qos_SapIngress_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress) DeleteFc(FcName string) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Qos_SapIngress_Fc struct to the
// list Fc of NokiaConf_Configure_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress) AppendFc(v *NokiaConf_Configure_Qos_SapIngress_Fc) error {
	if v.FcName == nil {
		return fmt.Errorf("invalid nil key received for FcName")
	}

	key := *v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[string]*NokiaConf_Configure_Qos_SapIngress_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewLspExp creates a new entry in the LspExp list of the
// NokiaConf_Configure_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress) NewLspExp(LspExpValue int32) (*NokiaConf_Configure_Qos_SapIngress_LspExp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_LspExp)
	}

	key := LspExpValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspExp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspExp", key)
	}

	t.LspExp[key] = &NokiaConf_Configure_Qos_SapIngress_LspExp{
		LspExpValue: &LspExpValue,
	}

	return t.LspExp[key], nil
}

// RenameLspExp renames an entry in the list LspExp within
// the NokiaConf_Configure_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress) RenameLspExp(oldK, newK int32) error {
	if _, ok := t.LspExp[newK]; ok {
		return fmt.Errorf("key %v already exists in LspExp", newK)
	}

	e, ok := t.LspExp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspExp", oldK)
	}
	e.LspExpValue = &newK

	t.LspExp[newK] = e
	delete(t.LspExp, oldK)
	return nil
}

// GetOrCreateLspExp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_SapIngress_LspExp {

	key := LspExpValue

	if v, ok := t.LspExp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspExp(LspExpValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspExp got unexpected error: %v", err))
	}
	return v
}

// GetLspExp retrieves the value with the specified key from
// the LspExp map field of NokiaConf_Configure_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetLspExp(LspExpValue int32) *NokiaConf_Configure_Qos_SapIngress_LspExp {

	if t == nil {
		return nil
	}

	key := LspExpValue

	if lm, ok := t.LspExp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspExp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress) DeleteLspExp(LspExpValue int32) {
	key := LspExpValue

	delete(t.LspExp, key)
}

// AppendLspExp appends the supplied NokiaConf_Configure_Qos_SapIngress_LspExp struct to the
// list LspExp of NokiaConf_Configure_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_LspExp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress) AppendLspExp(v *NokiaConf_Configure_Qos_SapIngress_LspExp) error {
	if v.LspExpValue == nil {
		return fmt.Errorf("invalid nil key received for LspExpValue")
	}

	key := *v.LspExpValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspExp == nil {
		t.LspExp = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_LspExp)
	}

	if _, ok := t.LspExp[key]; ok {
		return fmt.Errorf("duplicate key for list LspExp %v", key)
	}

	t.LspExp[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Qos_SapIngress_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Qos_SapIngress_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Qos_SapIngress_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetPolicer(PolicerId int32) *NokiaConf_Configure_Qos_SapIngress_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Qos_SapIngress_Policer struct to the
// list Policer of NokiaConf_Configure_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress) AppendPolicer(v *NokiaConf_Configure_Qos_SapIngress_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewPrec creates a new entry in the Prec list of the
// NokiaConf_Configure_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress) NewPrec(PrecValue int32) (*NokiaConf_Configure_Qos_SapIngress_Prec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Prec)
	}

	key := PrecValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prec", key)
	}

	t.Prec[key] = &NokiaConf_Configure_Qos_SapIngress_Prec{
		PrecValue: &PrecValue,
	}

	return t.Prec[key], nil
}

// RenamePrec renames an entry in the list Prec within
// the NokiaConf_Configure_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress) RenamePrec(oldK, newK int32) error {
	if _, ok := t.Prec[newK]; ok {
		return fmt.Errorf("key %v already exists in Prec", newK)
	}

	e, ok := t.Prec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prec", oldK)
	}
	e.PrecValue = &newK

	t.Prec[newK] = e
	delete(t.Prec, oldK)
	return nil
}

// GetOrCreatePrec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreatePrec(PrecValue int32) *NokiaConf_Configure_Qos_SapIngress_Prec {

	key := PrecValue

	if v, ok := t.Prec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrec(PrecValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrec got unexpected error: %v", err))
	}
	return v
}

// GetPrec retrieves the value with the specified key from
// the Prec map field of NokiaConf_Configure_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetPrec(PrecValue int32) *NokiaConf_Configure_Qos_SapIngress_Prec {

	if t == nil {
		return nil
	}

	key := PrecValue

	if lm, ok := t.Prec[key]; ok {
		return lm
	}
	return nil
}

// DeletePrec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress) DeletePrec(PrecValue int32) {
	key := PrecValue

	delete(t.Prec, key)
}

// AppendPrec appends the supplied NokiaConf_Configure_Qos_SapIngress_Prec struct to the
// list Prec of NokiaConf_Configure_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_Prec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress) AppendPrec(v *NokiaConf_Configure_Qos_SapIngress_Prec) error {
	if v.PrecValue == nil {
		return fmt.Errorf("invalid nil key received for PrecValue")
	}

	key := *v.PrecValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prec == nil {
		t.Prec = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Prec)
	}

	if _, ok := t.Prec[key]; ok {
		return fmt.Errorf("duplicate key for list Prec %v", key)
	}

	t.Prec[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Qos_SapIngress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress) NewQueue(QueueId int32) (*NokiaConf_Configure_Qos_SapIngress_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Qos_SapIngress_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Qos_SapIngress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Qos_SapIngress_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Qos_SapIngress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetQueue(QueueId int32) *NokiaConf_Configure_Qos_SapIngress_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Qos_SapIngress_Queue struct to the
// list Queue of NokiaConf_Configure_Qos_SapIngress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress) AppendQueue(v *NokiaConf_Configure_Qos_SapIngress_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Qos_SapIngress_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateIpCriteria() *NokiaConf_Configure_Qos_SapIngress_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Qos_SapIngress_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetOrCreateMacCriteria retrieves the value of the MacCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateMacCriteria() *NokiaConf_Configure_Qos_SapIngress_MacCriteria {
	if t.MacCriteria != nil {
		return t.MacCriteria
	}
	t.MacCriteria = &NokiaConf_Configure_Qos_SapIngress_MacCriteria{}
	return t.MacCriteria
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Qos_SapIngress. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetIpCriteria() *NokiaConf_Configure_Qos_SapIngress_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Qos_SapIngress. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetIpv6Criteria() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// GetMacCriteria returns the value of the MacCriteria struct pointer
// from NokiaConf_Configure_Qos_SapIngress. If the receiver or the field MacCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetMacCriteria() *NokiaConf_Configure_Qos_SapIngress_MacCriteria {
	if t != nil && t.MacCriteria != nil {
		return t.MacCriteria
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Qos_SapIngress. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress) GetSubscriberMgmt() *NokiaConf_Configure_Qos_SapIngress_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultFc retrieves the value of the leaf DefaultFc from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultFc is set, it can
// safely use t.GetDefaultFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultFc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetDefaultFc() string {
	if t == nil || t.DefaultFc == nil {
		return ""
	}
	return *t.DefaultFc
}

// GetDefaultPriority retrieves the value of the leaf DefaultPriority from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPriority is set, it can
// safely use t.GetDefaultPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetDefaultPriority() E_NokiaTypesQos_DefaultPriority {
	if t == nil || t.DefaultPriority == 0 {
		return NokiaTypesQos_DefaultPriority_low
	}
	return t.DefaultPriority
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIngressClassificationPolicy retrieves the value of the leaf IngressClassificationPolicy from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressClassificationPolicy is set, it can
// safely use t.GetIngressClassificationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressClassificationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetIngressClassificationPolicy() string {
	if t == nil || t.IngressClassificationPolicy == nil {
		return ""
	}
	return *t.IngressClassificationPolicy
}

// GetPolicerAllocation retrieves the value of the leaf PolicerAllocation from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerAllocation is set, it can
// safely use t.GetPolicerAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetPolicerAllocation() E_NokiaTypesQos_SapIngressPolicerAlloc {
	if t == nil || t.PolicerAllocation == 0 {
		return NokiaTypesQos_SapIngressPolicerAlloc_none
	}
	return t.PolicerAllocation
}

// GetPolicersHqosManageable retrieves the value of the leaf PolicersHqosManageable from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicersHqosManageable is set, it can
// safely use t.GetPolicersHqosManageable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicersHqosManageable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetPolicersHqosManageable() bool {
	if t == nil || t.PolicersHqosManageable == nil {
		return false
	}
	return *t.PolicersHqosManageable
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// GetSapIngressPolicyName retrieves the value of the leaf SapIngressPolicyName from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapIngressPolicyName is set, it can
// safely use t.GetSapIngressPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapIngressPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetSapIngressPolicyName() string {
	if t == nil || t.SapIngressPolicyName == nil {
		return ""
	}
	return *t.SapIngressPolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress) GetScope() E_NokiaTypesQos_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesQos_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultPriority == 0 {
		t.DefaultPriority = NokiaTypesQos_DefaultPriority_low
	}
	if t.PolicerAllocation == 0 {
		t.PolicerAllocation = NokiaTypesQos_SapIngressPolicerAlloc_none
	}
	if t.PolicersHqosManageable == nil {
		var v bool = false
		t.PolicersHqosManageable = &v
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesQos_ItemScope_template
	}
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	t.MacCriteria.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.LspExp {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Prec {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapIngressPolicyName == nil {
		return nil, fmt.Errorf("nil value for key SapIngressPolicyName")
	}

	return map[string]interface{}{
		"sap-ingress-policy-name": *t.SapIngressPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress.
func (*NokiaConf_Configure_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Dot1P represents the /nokia-conf/configure/qos/sap-ingress/dot1p YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Dot1P struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Dot1PValue         *int32                   `path:"dot1p-value" module:"nokia-conf"`
	Fc                 *string                  `path:"fc" module:"nokia-conf"`
	Priority           E_NokiaTypesQos_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Dot1P) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDot1PValue retrieves the value of the leaf Dot1PValue from the NokiaConf_Configure_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PValue is set, it can
// safely use t.GetDot1PValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) GetDot1PValue() int32 {
	if t == nil || t.Dot1PValue == nil {
		return 0
	}
	return *t.Dot1PValue
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_Dot1P struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Dot1PValue == nil {
		return nil, fmt.Errorf("nil value for key Dot1PValue")
	}

	return map[string]interface{}{
		"dot1p-value": *t.Dot1PValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Dot1P.
func (*NokiaConf_Configure_Qos_SapIngress_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Dscp represents the /nokia-conf/configure/qos/sap-ingress/dscp YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Dscp struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DscpName           E_NokiaTypesQos_DscpName `path:"dscp-name" module:"nokia-conf"`
	Fc                 *string                  `path:"fc" module:"nokia-conf"`
	Priority           E_NokiaTypesQos_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Dscp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) GetDscpName() E_NokiaTypesQos_DscpName {
	if t == nil || t.DscpName == 0 {
		return 0
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_Dscp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Dscp.
func (*NokiaConf_Configure_Qos_SapIngress_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Fc represents the /nokia-conf/configure/qos/sap-ingress/fc YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Fc struct {
	ApplyGroups                     []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude              []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	BroadcastPolicer                *int32                                                          `path:"broadcast-policer" module:"nokia-conf"`
	BroadcastQueue                  *int32                                                          `path:"broadcast-queue" module:"nokia-conf"`
	BroadcastQueueGroupQueue        *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue `path:"broadcast-queue-group-queue" module:"nokia-conf" yangPresence:"true"`
	De_1OutProfile                  *bool                                                           `path:"de-1-out-profile" module:"nokia-conf"`
	EgressFc                        E_NokiaTypesSros_FcName                                         `path:"egress-fc" module:"nokia-conf"`
	FcName                          *string                                                         `path:"fc-name" module:"nokia-conf"`
	FpRedirectGroupBroadcastPolicer YANGEmpty                                                       `path:"fp-redirect-group-broadcast-policer" module:"nokia-conf"`
	FpRedirectGroupMulticastPolicer YANGEmpty                                                       `path:"fp-redirect-group-multicast-policer" module:"nokia-conf"`
	FpRedirectGroupPolicer          YANGEmpty                                                       `path:"fp-redirect-group-policer" module:"nokia-conf"`
	FpRedirectGroupUnknownPolicer   YANGEmpty                                                       `path:"fp-redirect-group-unknown-policer" module:"nokia-conf"`
	InRemark                        *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark                 `path:"in-remark" module:"nokia-conf"`
	MulticastPolicer                *int32                                                          `path:"multicast-policer" module:"nokia-conf"`
	MulticastQueue                  *int32                                                          `path:"multicast-queue" module:"nokia-conf"`
	MulticastQueueGroupQueue        *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue `path:"multicast-queue-group-queue" module:"nokia-conf" yangPresence:"true"`
	OutRemark                       *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark                `path:"out-remark" module:"nokia-conf"`
	Policer                         *int32                                                          `path:"policer" module:"nokia-conf"`
	Profile                         E_NokiaTypesQos_Profile                                         `path:"profile" module:"nokia-conf"`
	Queue                           *int32                                                          `path:"queue" module:"nokia-conf"`
	QueueGroupQueue                 *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue          `path:"queue-group-queue" module:"nokia-conf" yangPresence:"true"`
	UnknownPolicer                  *int32                                                          `path:"unknown-policer" module:"nokia-conf"`
	UnknownQueue                    *int32                                                          `path:"unknown-queue" module:"nokia-conf"`
	UnknownQueueGroupQueue          *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue   `path:"unknown-queue-group-queue" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Fc) IsYANGGoStruct() {}

// GetOrCreateBroadcastQueueGroupQueue retrieves the value of the BroadcastQueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetOrCreateBroadcastQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue {
	if t.BroadcastQueueGroupQueue != nil {
		return t.BroadcastQueueGroupQueue
	}
	t.BroadcastQueueGroupQueue = &NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue{}
	return t.BroadcastQueueGroupQueue
}

// GetOrCreateInRemark retrieves the value of the InRemark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetOrCreateInRemark() *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark {
	if t.InRemark != nil {
		return t.InRemark
	}
	t.InRemark = &NokiaConf_Configure_Qos_SapIngress_Fc_InRemark{}
	return t.InRemark
}

// GetOrCreateMulticastQueueGroupQueue retrieves the value of the MulticastQueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetOrCreateMulticastQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue {
	if t.MulticastQueueGroupQueue != nil {
		return t.MulticastQueueGroupQueue
	}
	t.MulticastQueueGroupQueue = &NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue{}
	return t.MulticastQueueGroupQueue
}

// GetOrCreateOutRemark retrieves the value of the OutRemark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetOrCreateOutRemark() *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark {
	if t.OutRemark != nil {
		return t.OutRemark
	}
	t.OutRemark = &NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark{}
	return t.OutRemark
}

// GetOrCreateQueueGroupQueue retrieves the value of the QueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetOrCreateQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue {
	if t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	t.QueueGroupQueue = &NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue{}
	return t.QueueGroupQueue
}

// GetOrCreateUnknownQueueGroupQueue retrieves the value of the UnknownQueueGroupQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetOrCreateUnknownQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue {
	if t.UnknownQueueGroupQueue != nil {
		return t.UnknownQueueGroupQueue
	}
	t.UnknownQueueGroupQueue = &NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue{}
	return t.UnknownQueueGroupQueue
}

// GetBroadcastQueueGroupQueue returns the value of the BroadcastQueueGroupQueue struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Fc. If the receiver or the field BroadcastQueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetBroadcastQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue {
	if t != nil && t.BroadcastQueueGroupQueue != nil {
		return t.BroadcastQueueGroupQueue
	}
	return nil
}

// GetInRemark returns the value of the InRemark struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Fc. If the receiver or the field InRemark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetInRemark() *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark {
	if t != nil && t.InRemark != nil {
		return t.InRemark
	}
	return nil
}

// GetMulticastQueueGroupQueue returns the value of the MulticastQueueGroupQueue struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Fc. If the receiver or the field MulticastQueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetMulticastQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue {
	if t != nil && t.MulticastQueueGroupQueue != nil {
		return t.MulticastQueueGroupQueue
	}
	return nil
}

// GetOutRemark returns the value of the OutRemark struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Fc. If the receiver or the field OutRemark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetOutRemark() *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark {
	if t != nil && t.OutRemark != nil {
		return t.OutRemark
	}
	return nil
}

// GetQueueGroupQueue returns the value of the QueueGroupQueue struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Fc. If the receiver or the field QueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue {
	if t != nil && t.QueueGroupQueue != nil {
		return t.QueueGroupQueue
	}
	return nil
}

// GetUnknownQueueGroupQueue returns the value of the UnknownQueueGroupQueue struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Fc. If the receiver or the field UnknownQueueGroupQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetUnknownQueueGroupQueue() *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue {
	if t != nil && t.UnknownQueueGroupQueue != nil {
		return t.UnknownQueueGroupQueue
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcastPolicer retrieves the value of the leaf BroadcastPolicer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastPolicer is set, it can
// safely use t.GetBroadcastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetBroadcastPolicer() int32 {
	if t == nil || t.BroadcastPolicer == nil {
		return 0
	}
	return *t.BroadcastPolicer
}

// GetBroadcastQueue retrieves the value of the leaf BroadcastQueue from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastQueue is set, it can
// safely use t.GetBroadcastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetBroadcastQueue() int32 {
	if t == nil || t.BroadcastQueue == nil {
		return 0
	}
	return *t.BroadcastQueue
}

// GetDe_1OutProfile retrieves the value of the leaf De_1OutProfile from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if De_1OutProfile is set, it can
// safely use t.GetDe_1OutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.De_1OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetDe_1OutProfile() bool {
	if t == nil || t.De_1OutProfile == nil {
		return false
	}
	return *t.De_1OutProfile
}

// GetEgressFc retrieves the value of the leaf EgressFc from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressFc is set, it can
// safely use t.GetEgressFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressFc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetEgressFc() E_NokiaTypesSros_FcName {
	if t == nil || t.EgressFc == 0 {
		return 0
	}
	return t.EgressFc
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetFcName() string {
	if t == nil || t.FcName == nil {
		return ""
	}
	return *t.FcName
}

// GetFpRedirectGroupBroadcastPolicer retrieves the value of the leaf FpRedirectGroupBroadcastPolicer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupBroadcastPolicer is set, it can
// safely use t.GetFpRedirectGroupBroadcastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupBroadcastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetFpRedirectGroupBroadcastPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupBroadcastPolicer == false {
		return false
	}
	return t.FpRedirectGroupBroadcastPolicer
}

// GetFpRedirectGroupMulticastPolicer retrieves the value of the leaf FpRedirectGroupMulticastPolicer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupMulticastPolicer is set, it can
// safely use t.GetFpRedirectGroupMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupMulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetFpRedirectGroupMulticastPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupMulticastPolicer == false {
		return false
	}
	return t.FpRedirectGroupMulticastPolicer
}

// GetFpRedirectGroupPolicer retrieves the value of the leaf FpRedirectGroupPolicer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupPolicer is set, it can
// safely use t.GetFpRedirectGroupPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetFpRedirectGroupPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupPolicer == false {
		return false
	}
	return t.FpRedirectGroupPolicer
}

// GetFpRedirectGroupUnknownPolicer retrieves the value of the leaf FpRedirectGroupUnknownPolicer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpRedirectGroupUnknownPolicer is set, it can
// safely use t.GetFpRedirectGroupUnknownPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpRedirectGroupUnknownPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetFpRedirectGroupUnknownPolicer() YANGEmpty {
	if t == nil || t.FpRedirectGroupUnknownPolicer == false {
		return false
	}
	return t.FpRedirectGroupUnknownPolicer
}

// GetMulticastPolicer retrieves the value of the leaf MulticastPolicer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastPolicer is set, it can
// safely use t.GetMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetMulticastPolicer() int32 {
	if t == nil || t.MulticastPolicer == nil {
		return 0
	}
	return *t.MulticastPolicer
}

// GetMulticastQueue retrieves the value of the leaf MulticastQueue from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastQueue is set, it can
// safely use t.GetMulticastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetMulticastQueue() int32 {
	if t == nil || t.MulticastQueue == nil {
		return 0
	}
	return *t.MulticastQueue
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetProfile() E_NokiaTypesQos_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetUnknownPolicer retrieves the value of the leaf UnknownPolicer from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownPolicer is set, it can
// safely use t.GetUnknownPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownPolicer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetUnknownPolicer() int32 {
	if t == nil || t.UnknownPolicer == nil {
		return 0
	}
	return *t.UnknownPolicer
}

// GetUnknownQueue retrieves the value of the leaf UnknownQueue from the NokiaConf_Configure_Qos_SapIngress_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownQueue is set, it can
// safely use t.GetUnknownQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) GetUnknownQueue() int32 {
	if t == nil || t.UnknownQueue == nil {
		return 0
	}
	return *t.UnknownQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.De_1OutProfile == nil {
		var v bool = false
		t.De_1OutProfile = &v
	}
	t.BroadcastQueueGroupQueue.PopulateDefaults()
	t.InRemark.PopulateDefaults()
	t.MulticastQueueGroupQueue.PopulateDefaults()
	t.OutRemark.PopulateDefaults()
	t.QueueGroupQueue.PopulateDefaults()
	t.UnknownQueueGroupQueue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FcName == nil {
		return nil, fmt.Errorf("nil value for key FcName")
	}

	return map[string]interface{}{
		"fc-name": *t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Fc.
func (*NokiaConf_Configure_Qos_SapIngress_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue represents the /nokia-conf/configure/qos/sap-ingress/fc/broadcast-queue-group-queue YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_BroadcastQueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Fc_InRemark represents the /nokia-conf/configure/qos/sap-ingress/fc/in-remark YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Fc_InRemark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Fc_InRemark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_SapIngress_Fc_InRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Qos_SapIngress_Fc_InRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Fc_InRemark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Fc_InRemark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Fc_InRemark.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_InRemark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue represents the /nokia-conf/configure/qos/sap-ingress/fc/multicast-queue-group-queue YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_MulticastQueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark represents the /nokia-conf/configure/qos/sap-ingress/fc/out-remark YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_OutRemark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue represents the /nokia-conf/configure/qos/sap-ingress/fc/queue-group-queue YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_QueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue represents the /nokia-conf/configure/qos/sap-ingress/fc/unknown-queue-group-queue YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue struct {
	Queue          *int32  `path:"queue" module:"nokia-conf"`
	QueueGroupName *string `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) IsYANGGoStruct() {}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue.
func (*NokiaConf_Configure_Qos_SapIngress_Fc_UnknownQueueGroupQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry `path:"entry" module:"nokia-conf"`
	Type  E_NokiaTypesQos_IpFilterType                                    `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_SapIngress_IpCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_SapIngress_IpCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress_IpCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_SapIngress_IpCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress_IpCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_SapIngress_IpCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) AppendEntry(v *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapIngress_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) GetType() E_NokiaTypesQos_IpFilterType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_IpFilterType_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_IpFilterType_normal
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                     `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                     `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match  `path:"match" module:"nokia-conf"`
	Tag                *uint32                                                     `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetAction() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetMatch() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Tag == nil {
		var v uint32 = 0
		t.Tag = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action struct {
	Fc       *string                            `path:"fc" module:"nokia-conf"`
	Policer  *int32                             `path:"policer" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority           `path:"priority" module:"nokia-conf"`
	Type     E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match struct {
	Dscp     E_NokiaTypesQos_DscpName                                                 `path:"dscp" module:"nokia-conf"`
	DstIp    *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment E_NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	VxlanVni *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni      `path:"vxlan-vni" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateVxlanVni retrieves the value of the VxlanVni field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetOrCreateVxlanVni() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni {
	if t.VxlanVni != nil {
		return t.VxlanVni
	}
	t.VxlanVni = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni{}
	return t.VxlanVni
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetVxlanVni returns the value of the VxlanVni struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match. If the receiver or the field VxlanVni is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetVxlanVni() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni {
	if t != nil && t.VxlanVni != nil {
		return t.VxlanVni
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) GetProtocol() NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.VxlanVni.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                   `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                   `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                   `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                   `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                   `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                   `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/vxlan-vni YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni struct {
	Eq    *uint32                                                                   `path:"eq" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) GetOrCreateRange() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) GetRange() *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range represents the /nokia-conf/configure/qos/sap-ingress/ip-criteria/entry/match/vxlan-vni/range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range.
func (*NokiaConf_Configure_Qos_SapIngress_IpCriteria_Entry_Match_VxlanVni_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry `path:"entry" module:"nokia-conf"`
	Type  E_NokiaTypesQos_IpFilterType                                      `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) AppendEntry(v *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) GetType() E_NokiaTypesQos_IpFilterType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_IpFilterType_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_IpFilterType_normal
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                       `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match  `path:"match" module:"nokia-conf"`
	Tag                *uint32                                                       `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetAction() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetMatch() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Tag == nil {
		var v uint32 = 0
		t.Tag = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action struct {
	Fc       *string                            `path:"fc" module:"nokia-conf"`
	Policer  *int32                             `path:"policer" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority           `path:"priority" module:"nokia-conf"`
	Type     E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match struct {
	Dscp       E_NokiaTypesQos_DscpName                                                     `path:"dscp" module:"nokia-conf"`
	DstIp      *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Fragment   E_NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
	VxlanVni   *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni        `path:"vxlan-vni" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateVxlanVni retrieves the value of the VxlanVni field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetOrCreateVxlanVni() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni {
	if t.VxlanVni != nil {
		return t.VxlanVni
	}
	t.VxlanVni = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni{}
	return t.VxlanVni
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetDstIp() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetDstPort() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetSrcIp() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetSrcPort() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetVxlanVni returns the value of the VxlanVni struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match. If the receiver or the field VxlanVni is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetVxlanVni() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni {
	if t != nil && t.VxlanVni != nil {
		return t.VxlanVni
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetFragment() E_NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) GetNextHeader() NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.VxlanVni.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort struct {
	Eq    *int32                                                                     `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                     `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                     `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort struct {
	Eq    *int32                                                                     `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                     `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                     `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/vxlan-vni YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni struct {
	Eq    *uint32                                                                     `path:"eq" module:"nokia-conf"`
	Range *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) GetOrCreateRange() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) GetRange() *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range represents the /nokia-conf/configure/qos/sap-ingress/ipv6-criteria/entry/match/vxlan-vni/range YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range.
func (*NokiaConf_Configure_Qos_SapIngress_Ipv6Criteria_Entry_Match_VxlanVni_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_LspExp represents the /nokia-conf/configure/qos/sap-ingress/lsp-exp YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_LspExp struct {
	ApplyGroups        []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Fc                 *string                  `path:"fc" module:"nokia-conf"`
	LspExpValue        *int32                   `path:"lsp-exp-value" module:"nokia-conf"`
	Priority           E_NokiaTypesQos_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_LspExp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_LspExp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetLspExpValue retrieves the value of the leaf LspExpValue from the NokiaConf_Configure_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspExpValue is set, it can
// safely use t.GetLspExpValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspExpValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) GetLspExpValue() int32 {
	if t == nil || t.LspExpValue == nil {
		return 0
	}
	return *t.LspExpValue
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_LspExp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_LspExp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_LspExp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspExpValue == nil {
		return nil, fmt.Errorf("nil value for key LspExpValue")
	}

	return map[string]interface{}{
		"lsp-exp-value": *t.LspExpValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_LspExp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_LspExp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_LspExp.
func (*NokiaConf_Configure_Qos_SapIngress_LspExp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria struct {
	Entry map[uint32]*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry `path:"entry" module:"nokia-conf"`
	Type  E_NokiaTypesQos_MacCriteriaType                                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Qos_SapIngress_MacCriteria struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) NewEntry(EntryId uint32) (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Qos_SapIngress_MacCriteria struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress_MacCriteria. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Qos_SapIngress_MacCriteria. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) GetEntry(EntryId uint32) *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Qos_SapIngress_MacCriteria. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry struct to the
// list Entry of NokiaConf_Configure_Qos_SapIngress_MacCriteria. If the key value(s) specified in
// the supplied NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) AppendEntry(v *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapIngress_MacCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) GetType() E_NokiaTypesQos_MacCriteriaType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_MacCriteriaType_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesQos_MacCriteriaType_normal
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry struct {
	Action             *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                      `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                      `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetOrCreateAction() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetOrCreateMatch() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetAction() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetMatch() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/action YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action struct {
	Fc       *string                            `path:"fc" module:"nokia-conf"`
	Policer  *int32                             `path:"policer" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority           `path:"priority" module:"nokia-conf"`
	Type     E_NokiaTypesQos_CriteriaActionType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) GetFc() string {
	if t == nil || t.Fc == nil {
		return ""
	}
	return *t.Fc
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) GetType() E_NokiaTypesQos_CriteriaActionType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_CriteriaActionType_ignore_match
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_CriteriaActionType_ignore_match
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match struct {
	AtmVci    *int32                                                               `path:"atm-vci" module:"nokia-conf"`
	Dot1P     *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P    `path:"dot1p" module:"nokia-conf" yangPresence:"true"`
	DstMac    *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac   `path:"dst-mac" module:"nokia-conf" yangPresence:"true"`
	Etype     *string                                                              `path:"etype" module:"nokia-conf"`
	FrameType E_NokiaTypesQos_MacFrameType                                         `path:"frame-type" module:"nokia-conf"`
	InnerTag  *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag `path:"inner-tag" module:"nokia-conf" yangPresence:"true"`
	LlcDsap   *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap  `path:"llc-dsap" module:"nokia-conf" yangPresence:"true"`
	LlcSsap   *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap  `path:"llc-ssap" module:"nokia-conf" yangPresence:"true"`
	OuterTag  *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag `path:"outer-tag" module:"nokia-conf" yangPresence:"true"`
	SnapOui   E_NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SnapOui `path:"snap-oui" module:"nokia-conf"`
	SnapPid   *int32                                                               `path:"snap-pid" module:"nokia-conf"`
	SrcMac    *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac   `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateDot1P() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDstMac retrieves the value of the DstMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateDstMac() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac {
	if t.DstMac != nil {
		return t.DstMac
	}
	t.DstMac = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac{}
	return t.DstMac
}

// GetOrCreateInnerTag retrieves the value of the InnerTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateInnerTag() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag {
	if t.InnerTag != nil {
		return t.InnerTag
	}
	t.InnerTag = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag{}
	return t.InnerTag
}

// GetOrCreateLlcDsap retrieves the value of the LlcDsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateLlcDsap() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap {
	if t.LlcDsap != nil {
		return t.LlcDsap
	}
	t.LlcDsap = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap{}
	return t.LlcDsap
}

// GetOrCreateLlcSsap retrieves the value of the LlcSsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateLlcSsap() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap {
	if t.LlcSsap != nil {
		return t.LlcSsap
	}
	t.LlcSsap = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap{}
	return t.LlcSsap
}

// GetOrCreateOuterTag retrieves the value of the OuterTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateOuterTag() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag {
	if t.OuterTag != nil {
		return t.OuterTag
	}
	t.OuterTag = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag{}
	return t.OuterTag
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetDot1P() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDstMac returns the value of the DstMac struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field DstMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetDstMac() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac {
	if t != nil && t.DstMac != nil {
		return t.DstMac
	}
	return nil
}

// GetInnerTag returns the value of the InnerTag struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field InnerTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetInnerTag() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag {
	if t != nil && t.InnerTag != nil {
		return t.InnerTag
	}
	return nil
}

// GetLlcDsap returns the value of the LlcDsap struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field LlcDsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetLlcDsap() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap {
	if t != nil && t.LlcDsap != nil {
		return t.LlcDsap
	}
	return nil
}

// GetLlcSsap returns the value of the LlcSsap struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field LlcSsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetLlcSsap() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap {
	if t != nil && t.LlcSsap != nil {
		return t.LlcSsap
	}
	return nil
}

// GetOuterTag returns the value of the OuterTag struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field OuterTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetOuterTag() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag {
	if t != nil && t.OuterTag != nil {
		return t.OuterTag
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetSrcMac() *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetAtmVci retrieves the value of the leaf AtmVci from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtmVci is set, it can
// safely use t.GetAtmVci() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtmVci == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetAtmVci() int32 {
	if t == nil || t.AtmVci == nil {
		return 0
	}
	return *t.AtmVci
}

// GetEtype retrieves the value of the leaf Etype from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etype is set, it can
// safely use t.GetEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetEtype() string {
	if t == nil || t.Etype == nil {
		return ""
	}
	return *t.Etype
}

// GetFrameType retrieves the value of the leaf FrameType from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameType is set, it can
// safely use t.GetFrameType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetFrameType() E_NokiaTypesQos_MacFrameType {
	if t == nil || t.FrameType == 0 {
		return 0
	}
	return t.FrameType
}

// GetSnapOui retrieves the value of the leaf SnapOui from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapOui is set, it can
// safely use t.GetSnapOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapOui == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetSnapOui() E_NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SnapOui {
	if t == nil || t.SnapOui == 0 {
		return 0
	}
	return t.SnapOui
}

// GetSnapPid retrieves the value of the leaf SnapPid from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapPid is set, it can
// safely use t.GetSnapPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapPid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) GetSnapPid() int32 {
	if t == nil || t.SnapPid == nil {
		return 0
	}
	return *t.SnapPid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1P.PopulateDefaults()
	t.DstMac.PopulateDefaults()
	t.InnerTag.PopulateDefaults()
	t.LlcDsap.PopulateDefaults()
	t.LlcSsap.PopulateDefaults()
	t.OuterTag.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match/dot1p YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P struct {
	Mask     *int32 `path:"mask" module:"nokia-conf"`
	Priority *int32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 7
	}
	return *t.Mask
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 7
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match/dst-mac YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_DstMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match/inner-tag YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag struct {
	Mask *uint32 `path:"mask" module:"nokia-conf"`
	Vlan *int32  `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) GetMask() uint32 {
	if t == nil || t.Mask == nil {
		return 4095
	}
	return *t.Mask
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) GetVlan() int32 {
	if t == nil || t.Vlan == nil {
		return 0
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint32 = 4095
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_InnerTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match/llc-dsap YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap struct {
	Dsap *int32 `path:"dsap" module:"nokia-conf"`
	Mask *int32 `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) IsYANGGoStruct() {}

// GetDsap retrieves the value of the leaf Dsap from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsap is set, it can
// safely use t.GetDsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) GetDsap() int32 {
	if t == nil || t.Dsap == nil {
		return 0
	}
	return *t.Dsap
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcDsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match/llc-ssap YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Ssap *int32 `path:"ssap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetSsap retrieves the value of the leaf Ssap from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ssap is set, it can
// safely use t.GetSsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ssap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) GetSsap() int32 {
	if t == nil || t.Ssap == nil {
		return 0
	}
	return *t.Ssap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_LlcSsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match/outer-tag YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag struct {
	Mask *uint32 `path:"mask" module:"nokia-conf"`
	Vlan *int32  `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) GetMask() uint32 {
	if t == nil || t.Mask == nil {
		return 4095
	}
	return *t.Mask
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) GetVlan() int32 {
	if t == nil || t.Vlan == nil {
		return 0
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint32 = 4095
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_OuterTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac represents the /nokia-conf/configure/qos/sap-ingress/mac-criteria/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Qos_SapIngress_MacCriteria_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Policer represents the /nokia-conf/configure/qos/sap-ingress/policer YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Policer struct {
	AdaptationRule     *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AdvConfigPolicy    *string                                                       `path:"adv-config-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	ArbiterParent      *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent     `path:"arbiter-parent" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Qos_SapIngress_Policer_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	HighPrioOnly       NokiaConf_Configure_Qos_SapIngress_Policer_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Qos_SapIngress_Policer_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                        `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                        `path:"policer-id" module:"nokia-conf"`
	ProfileCapped      *bool                                                         `path:"profile-capped" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Qos_SapIngress_Policer_Rate              `path:"rate" module:"nokia-conf"`
	SchedulerParent    *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent   `path:"scheduler-parent" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_SapIngressPolicerStatMode                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateArbiterParent retrieves the value of the ArbiterParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetOrCreateArbiterParent() *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent {
	if t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	t.ArbiterParent = &NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent{}
	return t.ArbiterParent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetOrCreateRate() *NokiaConf_Configure_Qos_SapIngress_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Qos_SapIngress_Policer_Rate{}
	return t.Rate
}

// GetOrCreateSchedulerParent retrieves the value of the SchedulerParent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetOrCreateSchedulerParent() *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent {
	if t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	t.SchedulerParent = &NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent{}
	return t.SchedulerParent
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Policer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetAdaptationRule() *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetArbiterParent returns the value of the ArbiterParent struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Policer. If the receiver or the field ArbiterParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetArbiterParent() *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent {
	if t != nil && t.ArbiterParent != nil {
		return t.ArbiterParent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetPercentRate() *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetRate() *NokiaConf_Configure_Qos_SapIngress_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerParent returns the value of the SchedulerParent struct pointer
// from NokiaConf_Configure_Qos_SapIngress_Policer. If the receiver or the field SchedulerParent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetSchedulerParent() *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent {
	if t != nil && t.SchedulerParent != nil {
		return t.SchedulerParent
	}
	return nil
}

// GetAdvConfigPolicy retrieves the value of the leaf AdvConfigPolicy from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvConfigPolicy is set, it can
// safely use t.GetAdvConfigPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvConfigPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetAdvConfigPolicy() string {
	if t == nil || t.AdvConfigPolicy == nil {
		return ""
	}
	return *t.AdvConfigPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetCbs() NokiaConf_Configure_Qos_SapIngress_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Cbs
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetHighPrioOnly() NokiaConf_Configure_Qos_SapIngress_Policer_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return NokiaTypesQos_BurstPercent_Enum_auto
	}
	return t.HighPrioOnly
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetMbs() NokiaConf_Configure_Qos_SapIngress_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetProfileCapped retrieves the value of the leaf ProfileCapped from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileCapped is set, it can
// safely use t.GetProfileCapped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileCapped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetProfileCapped() bool {
	if t == nil || t.ProfileCapped == nil {
		return false
	}
	return *t.ProfileCapped
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Qos_SapIngress_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) GetStatMode() E_NokiaTypesQos_SapIngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.HighPrioOnly == nil {
		t.HighPrioOnly = NokiaTypesQos_BurstPercent_Enum_auto
	}
	if t.Mbs == nil {
		t.Mbs = NokiaTypesQos_PlcrBurstSize_Enum_auto
	}
	if t.PacketByteOffset == nil {
		var v int32 = 0
		t.PacketByteOffset = &v
	}
	if t.ProfileCapped == nil {
		var v bool = false
		t.ProfileCapped = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.ArbiterParent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
	t.SchedulerParent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Qos_SapIngress_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Policer.
func (*NokiaConf_Configure_Qos_SapIngress_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule represents the /nokia-conf/configure/qos/sap-ingress/policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent represents the /nokia-conf/configure/qos/sap-ingress/policer/arbiter-parent YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent struct {
	ArbiterName *string `path:"arbiter-name" module:"nokia-conf"`
	Level       *int32  `path:"level" module:"nokia-conf"`
	Weight      *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) IsYANGGoStruct() {}

// GetArbiterName retrieves the value of the leaf ArbiterName from the NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArbiterName is set, it can
// safely use t.GetArbiterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArbiterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) GetArbiterName() string {
	if t == nil || t.ArbiterName == nil {
		return ""
	}
	return *t.ArbiterName
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_ArbiterParent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate represents the /nokia-conf/configure/qos/sap-ingress/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate struct {
	Cir           *float64                                                               `path:"cir" module:"nokia-conf"`
	Pir           *float64                                                               `path:"pir" module:"nokia-conf"`
	ReferenceRate E_NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate_ReferenceRate `path:"reference-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.00
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// GetReferenceRate retrieves the value of the leaf ReferenceRate from the NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceRate is set, it can
// safely use t.GetReferenceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) GetReferenceRate() E_NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate_ReferenceRate {
	if t == nil || t.ReferenceRate == 0 {
		return NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate_ReferenceRate_local_limit
	}
	return t.ReferenceRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 0.00
		t.Cir = &v
	}
	if t.ReferenceRate == 0 {
		t.ReferenceRate = NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate_ReferenceRate_local_limit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Policer_Rate represents the /nokia-conf/configure/qos/sap-ingress/policer/rate YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Policer_Rate struct {
	Cir NokiaConf_Configure_Qos_SapIngress_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Qos_SapIngress_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Qos_SapIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_Rate) GetCir() NokiaConf_Configure_Qos_SapIngress_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt64(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Qos_SapIngress_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_Rate) GetPir() NokiaConf_Configure_Qos_SapIngress_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt64(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_PolicerPirRateMaximum_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Policer_Rate.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent represents the /nokia-conf/configure/qos/sap-ingress/policer/scheduler-parent YANG schema element.
type NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent struct {
	CirLevel      *int32  `path:"cir-level" module:"nokia-conf"`
	CirWeight     *int32  `path:"cir-weight" module:"nokia-conf"`
	Level         *int32  `path:"level" module:"nokia-conf"`
	SchedulerName *string `path:"scheduler-name" module:"nokia-conf"`
	Weight        *int32  `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) IsYANGGoStruct() {}

// GetCirLevel retrieves the value of the leaf CirLevel from the NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirLevel is set, it can
// safely use t.GetCirLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) GetCirLevel() int32 {
	if t == nil || t.CirLevel == nil {
		return 0
	}
	return *t.CirLevel
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 1
	}
	return *t.CirWeight
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 1
	}
	return *t.Level
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CirLevel == nil {
		var v int32 = 0
		t.CirLevel = &v
	}
	if t.CirWeight == nil {
		var v int32 = 1
		t.CirWeight = &v
	}
	if t.Level == nil {
		var v int32 = 1
		t.Level = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent.
func (*NokiaConf_Configure_Qos_SapIngress_Policer_SchedulerParent) ΛBelongingModule() string {
	return "nokia-conf"
}
