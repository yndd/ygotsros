/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct {
	IesGroupInterface    map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface       `path:"ies-group-interface" module:"nokia-conf"`
	IesInterface         map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface                 `path:"ies-interface" module:"nokia-conf"`
	VprnGroupInterface   map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface     `path:"vprn-group-interface" module:"nokia-conf"`
	VprnInterface        map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface               `path:"vprn-interface" module:"nokia-conf"`
	VprnNetworkInterface map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface `path:"vprn-network-interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) IsYANGGoStruct() {}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key represents the key for list IesGroupInterface of element /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key struct {
	ServiceName             string `path:"service-name"`
	SubscriberInterfaceName string `path:"subscriber-interface-name"`
	GroupInterfaceName      string `path:"group-interface-name"`
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key represents the key for list IesInterface of element /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key struct {
	ServiceName   string `path:"service-name"`
	InterfaceName string `path:"interface-name"`
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key represents the key for list VprnGroupInterface of element /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key struct {
	ServiceName             string `path:"service-name"`
	SubscriberInterfaceName string `path:"subscriber-interface-name"`
	GroupInterfaceName      string `path:"group-interface-name"`
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key represents the key for list VprnInterface of element /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key struct {
	ServiceName   string `path:"service-name"`
	InterfaceName string `path:"interface-name"`
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key represents the key for list VprnNetworkInterface of element /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key struct {
	ServiceName          string `path:"service-name"`
	NetworkInterfaceName string `path:"network-interface-name"`
}

// NewIesGroupInterface creates a new entry in the IesGroupInterface list of the
// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesGroupInterface == nil {
		t.IesGroupInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface)
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IesGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IesGroupInterface", key)
	}

	t.IesGroupInterface[key] = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface{
		ServiceName:             &ServiceName,
		SubscriberInterfaceName: &SubscriberInterfaceName,
		GroupInterfaceName:      &GroupInterfaceName,
	}

	return t.IesGroupInterface[key], nil
}

// RenameIesGroupInterface renames an entry in the list IesGroupInterface within
// the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameIesGroupInterface(oldK, newK NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key) error {
	if _, ok := t.IesGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in IesGroupInterface", newK)
	}

	e, ok := t.IesGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IesGroupInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.SubscriberInterfaceName = &newK.SubscriberInterfaceName
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.IesGroupInterface[newK] = e
	delete(t.IesGroupInterface, oldK)
	return nil
}

// GetOrCreateIesGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface {

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if v, ok := t.IesGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIesGroupInterface(ServiceName, SubscriberInterfaceName, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIesGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetIesGroupInterface retrieves the value with the specified key from
// the IesGroupInterface map field of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if lm, ok := t.IesGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteIesGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	delete(t.IesGroupInterface, key)
}

// AppendIesGroupInterface appends the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface struct to the
// list IesGroupInterface of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendIesGroupInterface(v *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.SubscriberInterfaceName == nil {
		return fmt.Errorf("invalid nil key for SubscriberInterfaceName")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             *v.ServiceName,
		SubscriberInterfaceName: *v.SubscriberInterfaceName,
		GroupInterfaceName:      *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesGroupInterface == nil {
		t.IesGroupInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface)
	}

	if _, ok := t.IesGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list IesGroupInterface %v", key)
	}

	t.IesGroupInterface[key] = v
	return nil
}

// NewIesInterface creates a new entry in the IesInterface list of the
// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewIesInterface(ServiceName string, InterfaceName string) (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesInterface == nil {
		t.IesInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface)
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IesInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IesInterface", key)
	}

	t.IesInterface[key] = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface{
		ServiceName:   &ServiceName,
		InterfaceName: &InterfaceName,
	}

	return t.IesInterface[key], nil
}

// RenameIesInterface renames an entry in the list IesInterface within
// the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameIesInterface(oldK, newK NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key) error {
	if _, ok := t.IesInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in IesInterface", newK)
	}

	e, ok := t.IesInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IesInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.InterfaceName = &newK.InterfaceName

	t.IesInterface[newK] = e
	delete(t.IesInterface, oldK)
	return nil
}

// GetOrCreateIesInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateIesInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface {

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if v, ok := t.IesInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIesInterface(ServiceName, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIesInterface got unexpected error: %v", err))
	}
	return v
}

// GetIesInterface retrieves the value with the specified key from
// the IesInterface map field of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetIesInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if lm, ok := t.IesInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteIesInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteIesInterface(ServiceName string, InterfaceName string) {
	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	delete(t.IesInterface, key)
}

// AppendIesInterface appends the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface struct to the
// list IesInterface of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendIesInterface(v *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   *v.ServiceName,
		InterfaceName: *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesInterface == nil {
		t.IesInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface)
	}

	if _, ok := t.IesInterface[key]; ok {
		return fmt.Errorf("duplicate key for list IesInterface %v", key)
	}

	t.IesInterface[key] = v
	return nil
}

// NewVprnGroupInterface creates a new entry in the VprnGroupInterface list of the
// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnGroupInterface == nil {
		t.VprnGroupInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface)
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VprnGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VprnGroupInterface", key)
	}

	t.VprnGroupInterface[key] = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface{
		ServiceName:             &ServiceName,
		SubscriberInterfaceName: &SubscriberInterfaceName,
		GroupInterfaceName:      &GroupInterfaceName,
	}

	return t.VprnGroupInterface[key], nil
}

// RenameVprnGroupInterface renames an entry in the list VprnGroupInterface within
// the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameVprnGroupInterface(oldK, newK NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key) error {
	if _, ok := t.VprnGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VprnGroupInterface", newK)
	}

	e, ok := t.VprnGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VprnGroupInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.SubscriberInterfaceName = &newK.SubscriberInterfaceName
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.VprnGroupInterface[newK] = e
	delete(t.VprnGroupInterface, oldK)
	return nil
}

// GetOrCreateVprnGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface {

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if v, ok := t.VprnGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprnGroupInterface(ServiceName, SubscriberInterfaceName, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprnGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetVprnGroupInterface retrieves the value with the specified key from
// the VprnGroupInterface map field of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if lm, ok := t.VprnGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprnGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	delete(t.VprnGroupInterface, key)
}

// AppendVprnGroupInterface appends the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface struct to the
// list VprnGroupInterface of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendVprnGroupInterface(v *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.SubscriberInterfaceName == nil {
		return fmt.Errorf("invalid nil key for SubscriberInterfaceName")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             *v.ServiceName,
		SubscriberInterfaceName: *v.SubscriberInterfaceName,
		GroupInterfaceName:      *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnGroupInterface == nil {
		t.VprnGroupInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface)
	}

	if _, ok := t.VprnGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VprnGroupInterface %v", key)
	}

	t.VprnGroupInterface[key] = v
	return nil
}

// NewVprnInterface creates a new entry in the VprnInterface list of the
// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewVprnInterface(ServiceName string, InterfaceName string) (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnInterface == nil {
		t.VprnInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface)
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VprnInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VprnInterface", key)
	}

	t.VprnInterface[key] = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface{
		ServiceName:   &ServiceName,
		InterfaceName: &InterfaceName,
	}

	return t.VprnInterface[key], nil
}

// RenameVprnInterface renames an entry in the list VprnInterface within
// the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameVprnInterface(oldK, newK NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key) error {
	if _, ok := t.VprnInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VprnInterface", newK)
	}

	e, ok := t.VprnInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VprnInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.InterfaceName = &newK.InterfaceName

	t.VprnInterface[newK] = e
	delete(t.VprnInterface, oldK)
	return nil
}

// GetOrCreateVprnInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateVprnInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface {

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if v, ok := t.VprnInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprnInterface(ServiceName, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprnInterface got unexpected error: %v", err))
	}
	return v
}

// GetVprnInterface retrieves the value with the specified key from
// the VprnInterface map field of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetVprnInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if lm, ok := t.VprnInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprnInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteVprnInterface(ServiceName string, InterfaceName string) {
	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	delete(t.VprnInterface, key)
}

// AppendVprnInterface appends the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface struct to the
// list VprnInterface of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendVprnInterface(v *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   *v.ServiceName,
		InterfaceName: *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnInterface == nil {
		t.VprnInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface)
	}

	if _, ok := t.VprnInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VprnInterface %v", key)
	}

	t.VprnInterface[key] = v
	return nil
}

// NewVprnNetworkInterface creates a new entry in the VprnNetworkInterface list of the
// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnNetworkInterface == nil {
		t.VprnNetworkInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface)
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VprnNetworkInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VprnNetworkInterface", key)
	}

	t.VprnNetworkInterface[key] = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface{
		ServiceName:          &ServiceName,
		NetworkInterfaceName: &NetworkInterfaceName,
	}

	return t.VprnNetworkInterface[key], nil
}

// RenameVprnNetworkInterface renames an entry in the list VprnNetworkInterface within
// the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameVprnNetworkInterface(oldK, newK NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key) error {
	if _, ok := t.VprnNetworkInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VprnNetworkInterface", newK)
	}

	e, ok := t.VprnNetworkInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VprnNetworkInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.NetworkInterfaceName = &newK.NetworkInterfaceName

	t.VprnNetworkInterface[newK] = e
	delete(t.VprnNetworkInterface, oldK)
	return nil
}

// GetOrCreateVprnNetworkInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface {

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	if v, ok := t.VprnNetworkInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprnNetworkInterface(ServiceName, NetworkInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprnNetworkInterface got unexpected error: %v", err))
	}
	return v
}

// GetVprnNetworkInterface retrieves the value with the specified key from
// the VprnNetworkInterface map field of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	if lm, ok := t.VprnNetworkInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprnNetworkInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) {
	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	delete(t.VprnNetworkInterface, key)
}

// AppendVprnNetworkInterface appends the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface struct to the
// list VprnNetworkInterface of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendVprnNetworkInterface(v *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.NetworkInterfaceName == nil {
		return fmt.Errorf("invalid nil key for NetworkInterfaceName")
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          *v.ServiceName,
		NetworkInterfaceName: *v.NetworkInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnNetworkInterface == nil {
		t.VprnNetworkInterface = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface)
	}

	if _, ok := t.VprnNetworkInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VprnNetworkInterface %v", key)
	}

	t.VprnNetworkInterface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IesGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.IesInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VprnGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VprnInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VprnNetworkInterface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service/ies-group-interface YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface struct {
	GroupInterfaceName      *string `path:"group-interface-name" module:"nokia-conf"`
	ServiceName             *string `path:"service-name" module:"nokia-conf"`
	SubscriberInterfaceName *string `path:"subscriber-interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) IsYANGGoStruct() {
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetSubscriberInterfaceName retrieves the value of the leaf SubscriberInterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberInterfaceName is set, it can
// safely use t.GetSubscriberInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) GetSubscriberInterfaceName() string {
	if t == nil || t.SubscriberInterfaceName == nil {
		return ""
	}
	return *t.SubscriberInterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	if t.SubscriberInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key SubscriberInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name":      *t.GroupInterfaceName,
		"service-name":              *t.ServiceName,
		"subscriber-interface-name": *t.SubscriberInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service/ies-interface YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
		"service-name":   *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service/vprn-group-interface YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface struct {
	GroupInterfaceName      *string `path:"group-interface-name" module:"nokia-conf"`
	ServiceName             *string `path:"service-name" module:"nokia-conf"`
	SubscriberInterfaceName *string `path:"subscriber-interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) IsYANGGoStruct() {
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetSubscriberInterfaceName retrieves the value of the leaf SubscriberInterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberInterfaceName is set, it can
// safely use t.GetSubscriberInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) GetSubscriberInterfaceName() string {
	if t == nil || t.SubscriberInterfaceName == nil {
		return ""
	}
	return *t.SubscriberInterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	if t.SubscriberInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key SubscriberInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name":      *t.GroupInterfaceName,
		"service-name":              *t.ServiceName,
		"subscriber-interface-name": *t.SubscriberInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service/vprn-interface YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
		"service-name":   *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list/service/vprn-network-interface YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface struct {
	NetworkInterfaceName *string `path:"network-interface-name" module:"nokia-conf"`
	ServiceName          *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) IsYANGGoStruct() {
}

// GetNetworkInterfaceName retrieves the value of the leaf NetworkInterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInterfaceName is set, it can
// safely use t.GetNetworkInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) GetNetworkInterfaceName() string {
	if t == nil || t.NetworkInterfaceName == nil {
		return ""
	}
	return *t.NetworkInterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key NetworkInterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"network-interface-name": *t.NetworkInterfaceName,
		"service-name":           *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router represents the /nokia-conf/configure/cflowd/collector/export-filter/router YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router struct {
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) IsYANGGoStruct() {}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_SampleProfile represents the /nokia-conf/configure/cflowd/sample-profile YANG schema element.
type NokiaConf_Configure_Cflowd_SampleProfile struct {
	ApplyGroups        []string                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                           `path:"apply-groups-exclude" module:"nokia-conf"`
	MeteringProcess    E_NokiaTypesCflowd_MeteringProcess `path:"metering-process" module:"nokia-conf"`
	ProfileId          *uint32                            `path:"profile-id" module:"nokia-conf"`
	SampleRate         *uint32                            `path:"sample-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_SampleProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_SampleProfile) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMeteringProcess retrieves the value of the leaf MeteringProcess from the NokiaConf_Configure_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeteringProcess is set, it can
// safely use t.GetMeteringProcess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeteringProcess == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) GetMeteringProcess() E_NokiaTypesCflowd_MeteringProcess {
	if t == nil || t.MeteringProcess == 0 {
		return NokiaTypesCflowd_MeteringProcess_standard
	}
	return t.MeteringProcess
}

// GetProfileId retrieves the value of the leaf ProfileId from the NokiaConf_Configure_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileId is set, it can
// safely use t.GetProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) GetProfileId() uint32 {
	if t == nil || t.ProfileId == nil {
		return 0
	}
	return *t.ProfileId
}

// GetSampleRate retrieves the value of the leaf SampleRate from the NokiaConf_Configure_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleRate is set, it can
// safely use t.GetSampleRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) GetSampleRate() uint32 {
	if t == nil || t.SampleRate == nil {
		return 1000
	}
	return *t.SampleRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_SampleProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MeteringProcess == 0 {
		t.MeteringProcess = NokiaTypesCflowd_MeteringProcess_standard
	}
	if t.SampleRate == nil {
		var v uint32 = 1000
		t.SampleRate = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_SampleProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProfileId == nil {
		return nil, fmt.Errorf("nil value for key ProfileId")
	}

	return map[string]interface{}{
		"profile-id": *t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_SampleProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_SampleProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_SampleProfile.
func (*NokiaConf_Configure_Cflowd_SampleProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Chassis represents the /nokia-conf/configure/chassis YANG schema element.
type NokiaConf_Configure_Chassis struct {
	ApplyGroups           []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	ChassisClass          E_NokiaTypesChassis_ChassisClass                              `path:"chassis-class" module:"nokia-conf"`
	ChassisNumber         *uint32                                                       `path:"chassis-number" module:"nokia-conf"`
	MonitorFilterDoor     *bool                                                         `path:"monitor-filter-door" module:"nokia-conf"`
	Peq                   map[uint32]*NokiaConf_Configure_Chassis_Peq                   `path:"peq" module:"nokia-conf"`
	PowerConnectionModule map[uint32]*NokiaConf_Configure_Chassis_PowerConnectionModule `path:"power-connection-module" module:"nokia-conf"`
	PowerModule           map[uint32]*NokiaConf_Configure_Chassis_PowerModule           `path:"power-module" module:"nokia-conf"`
	PowerShelf            map[uint32]*NokiaConf_Configure_Chassis_PowerShelf            `path:"power-shelf" module:"nokia-conf"`
	PowerSupply           map[uint32]*NokiaConf_Configure_Chassis_PowerSupply           `path:"power-supply" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Chassis) IsYANGGoStruct() {}

// NewPeq creates a new entry in the Peq list of the
// NokiaConf_Configure_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Chassis) NewPeq(PeqSlot uint32) (*NokiaConf_Configure_Chassis_Peq, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peq == nil {
		t.Peq = make(map[uint32]*NokiaConf_Configure_Chassis_Peq)
	}

	key := PeqSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peq[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peq", key)
	}

	t.Peq[key] = &NokiaConf_Configure_Chassis_Peq{
		PeqSlot: &PeqSlot,
	}

	return t.Peq[key], nil
}

// RenamePeq renames an entry in the list Peq within
// the NokiaConf_Configure_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Chassis) RenamePeq(oldK, newK uint32) error {
	if _, ok := t.Peq[newK]; ok {
		return fmt.Errorf("key %v already exists in Peq", newK)
	}

	e, ok := t.Peq[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peq", oldK)
	}
	e.PeqSlot = &newK

	t.Peq[newK] = e
	delete(t.Peq, oldK)
	return nil
}

// GetOrCreatePeq retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Chassis) GetOrCreatePeq(PeqSlot uint32) *NokiaConf_Configure_Chassis_Peq {

	key := PeqSlot

	if v, ok := t.Peq[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeq(PeqSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeq got unexpected error: %v", err))
	}
	return v
}

// GetPeq retrieves the value with the specified key from
// the Peq map field of NokiaConf_Configure_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Chassis) GetPeq(PeqSlot uint32) *NokiaConf_Configure_Chassis_Peq {

	if t == nil {
		return nil
	}

	key := PeqSlot

	if lm, ok := t.Peq[key]; ok {
		return lm
	}
	return nil
}

// DeletePeq deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Chassis) DeletePeq(PeqSlot uint32) {
	key := PeqSlot

	delete(t.Peq, key)
}

// AppendPeq appends the supplied NokiaConf_Configure_Chassis_Peq struct to the
// list Peq of NokiaConf_Configure_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Chassis_Peq already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Chassis) AppendPeq(v *NokiaConf_Configure_Chassis_Peq) error {
	if v.PeqSlot == nil {
		return fmt.Errorf("invalid nil key received for PeqSlot")
	}

	key := *v.PeqSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peq == nil {
		t.Peq = make(map[uint32]*NokiaConf_Configure_Chassis_Peq)
	}

	if _, ok := t.Peq[key]; ok {
		return fmt.Errorf("duplicate key for list Peq %v", key)
	}

	t.Peq[key] = v
	return nil
}

// NewPowerConnectionModule creates a new entry in the PowerConnectionModule list of the
// NokiaConf_Configure_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Chassis) NewPowerConnectionModule(PcmSlot uint32) (*NokiaConf_Configure_Chassis_PowerConnectionModule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerConnectionModule == nil {
		t.PowerConnectionModule = make(map[uint32]*NokiaConf_Configure_Chassis_PowerConnectionModule)
	}

	key := PcmSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerConnectionModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerConnectionModule", key)
	}

	t.PowerConnectionModule[key] = &NokiaConf_Configure_Chassis_PowerConnectionModule{
		PcmSlot: &PcmSlot,
	}

	return t.PowerConnectionModule[key], nil
}

// RenamePowerConnectionModule renames an entry in the list PowerConnectionModule within
// the NokiaConf_Configure_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Chassis) RenamePowerConnectionModule(oldK, newK uint32) error {
	if _, ok := t.PowerConnectionModule[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerConnectionModule", newK)
	}

	e, ok := t.PowerConnectionModule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerConnectionModule", oldK)
	}
	e.PcmSlot = &newK

	t.PowerConnectionModule[newK] = e
	delete(t.PowerConnectionModule, oldK)
	return nil
}

// GetOrCreatePowerConnectionModule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Chassis) GetOrCreatePowerConnectionModule(PcmSlot uint32) *NokiaConf_Configure_Chassis_PowerConnectionModule {

	key := PcmSlot

	if v, ok := t.PowerConnectionModule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerConnectionModule(PcmSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerConnectionModule got unexpected error: %v", err))
	}
	return v
}

// GetPowerConnectionModule retrieves the value with the specified key from
// the PowerConnectionModule map field of NokiaConf_Configure_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Chassis) GetPowerConnectionModule(PcmSlot uint32) *NokiaConf_Configure_Chassis_PowerConnectionModule {

	if t == nil {
		return nil
	}

	key := PcmSlot

	if lm, ok := t.PowerConnectionModule[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerConnectionModule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Chassis) DeletePowerConnectionModule(PcmSlot uint32) {
	key := PcmSlot

	delete(t.PowerConnectionModule, key)
}

// AppendPowerConnectionModule appends the supplied NokiaConf_Configure_Chassis_PowerConnectionModule struct to the
// list PowerConnectionModule of NokiaConf_Configure_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Chassis_PowerConnectionModule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Chassis) AppendPowerConnectionModule(v *NokiaConf_Configure_Chassis_PowerConnectionModule) error {
	if v.PcmSlot == nil {
		return fmt.Errorf("invalid nil key received for PcmSlot")
	}

	key := *v.PcmSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerConnectionModule == nil {
		t.PowerConnectionModule = make(map[uint32]*NokiaConf_Configure_Chassis_PowerConnectionModule)
	}

	if _, ok := t.PowerConnectionModule[key]; ok {
		return fmt.Errorf("duplicate key for list PowerConnectionModule %v", key)
	}

	t.PowerConnectionModule[key] = v
	return nil
}

// NewPowerModule creates a new entry in the PowerModule list of the
// NokiaConf_Configure_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Chassis) NewPowerModule(PowerModuleId uint32) (*NokiaConf_Configure_Chassis_PowerModule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[uint32]*NokiaConf_Configure_Chassis_PowerModule)
	}

	key := PowerModuleId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerModule", key)
	}

	t.PowerModule[key] = &NokiaConf_Configure_Chassis_PowerModule{
		PowerModuleId: &PowerModuleId,
	}

	return t.PowerModule[key], nil
}

// RenamePowerModule renames an entry in the list PowerModule within
// the NokiaConf_Configure_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Chassis) RenamePowerModule(oldK, newK uint32) error {
	if _, ok := t.PowerModule[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerModule", newK)
	}

	e, ok := t.PowerModule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerModule", oldK)
	}
	e.PowerModuleId = &newK

	t.PowerModule[newK] = e
	delete(t.PowerModule, oldK)
	return nil
}

// GetOrCreatePowerModule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Chassis) GetOrCreatePowerModule(PowerModuleId uint32) *NokiaConf_Configure_Chassis_PowerModule {

	key := PowerModuleId

	if v, ok := t.PowerModule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerModule(PowerModuleId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerModule got unexpected error: %v", err))
	}
	return v
}

// GetPowerModule retrieves the value with the specified key from
// the PowerModule map field of NokiaConf_Configure_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Chassis) GetPowerModule(PowerModuleId uint32) *NokiaConf_Configure_Chassis_PowerModule {

	if t == nil {
		return nil
	}

	key := PowerModuleId

	if lm, ok := t.PowerModule[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerModule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Chassis) DeletePowerModule(PowerModuleId uint32) {
	key := PowerModuleId

	delete(t.PowerModule, key)
}

// AppendPowerModule appends the supplied NokiaConf_Configure_Chassis_PowerModule struct to the
// list PowerModule of NokiaConf_Configure_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Chassis_PowerModule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Chassis) AppendPowerModule(v *NokiaConf_Configure_Chassis_PowerModule) error {
	if v.PowerModuleId == nil {
		return fmt.Errorf("invalid nil key received for PowerModuleId")
	}

	key := *v.PowerModuleId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[uint32]*NokiaConf_Configure_Chassis_PowerModule)
	}

	if _, ok := t.PowerModule[key]; ok {
		return fmt.Errorf("duplicate key for list PowerModule %v", key)
	}

	t.PowerModule[key] = v
	return nil
}

// NewPowerShelf creates a new entry in the PowerShelf list of the
// NokiaConf_Configure_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Chassis) NewPowerShelf(PowerShelfId uint32) (*NokiaConf_Configure_Chassis_PowerShelf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerShelf == nil {
		t.PowerShelf = make(map[uint32]*NokiaConf_Configure_Chassis_PowerShelf)
	}

	key := PowerShelfId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerShelf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerShelf", key)
	}

	t.PowerShelf[key] = &NokiaConf_Configure_Chassis_PowerShelf{
		PowerShelfId: &PowerShelfId,
	}

	return t.PowerShelf[key], nil
}

// RenamePowerShelf renames an entry in the list PowerShelf within
// the NokiaConf_Configure_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Chassis) RenamePowerShelf(oldK, newK uint32) error {
	if _, ok := t.PowerShelf[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerShelf", newK)
	}

	e, ok := t.PowerShelf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerShelf", oldK)
	}
	e.PowerShelfId = &newK

	t.PowerShelf[newK] = e
	delete(t.PowerShelf, oldK)
	return nil
}

// GetOrCreatePowerShelf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Chassis) GetOrCreatePowerShelf(PowerShelfId uint32) *NokiaConf_Configure_Chassis_PowerShelf {

	key := PowerShelfId

	if v, ok := t.PowerShelf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerShelf(PowerShelfId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerShelf got unexpected error: %v", err))
	}
	return v
}

// GetPowerShelf retrieves the value with the specified key from
// the PowerShelf map field of NokiaConf_Configure_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Chassis) GetPowerShelf(PowerShelfId uint32) *NokiaConf_Configure_Chassis_PowerShelf {

	if t == nil {
		return nil
	}

	key := PowerShelfId

	if lm, ok := t.PowerShelf[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerShelf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Chassis) DeletePowerShelf(PowerShelfId uint32) {
	key := PowerShelfId

	delete(t.PowerShelf, key)
}

// AppendPowerShelf appends the supplied NokiaConf_Configure_Chassis_PowerShelf struct to the
// list PowerShelf of NokiaConf_Configure_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Chassis_PowerShelf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Chassis) AppendPowerShelf(v *NokiaConf_Configure_Chassis_PowerShelf) error {
	if v.PowerShelfId == nil {
		return fmt.Errorf("invalid nil key received for PowerShelfId")
	}

	key := *v.PowerShelfId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerShelf == nil {
		t.PowerShelf = make(map[uint32]*NokiaConf_Configure_Chassis_PowerShelf)
	}

	if _, ok := t.PowerShelf[key]; ok {
		return fmt.Errorf("duplicate key for list PowerShelf %v", key)
	}

	t.PowerShelf[key] = v
	return nil
}

// NewPowerSupply creates a new entry in the PowerSupply list of the
// NokiaConf_Configure_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Chassis) NewPowerSupply(PowerSupplyId uint32) (*NokiaConf_Configure_Chassis_PowerSupply, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerSupply == nil {
		t.PowerSupply = make(map[uint32]*NokiaConf_Configure_Chassis_PowerSupply)
	}

	key := PowerSupplyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerSupply[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerSupply", key)
	}

	t.PowerSupply[key] = &NokiaConf_Configure_Chassis_PowerSupply{
		PowerSupplyId: &PowerSupplyId,
	}

	return t.PowerSupply[key], nil
}

// RenamePowerSupply renames an entry in the list PowerSupply within
// the NokiaConf_Configure_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Chassis) RenamePowerSupply(oldK, newK uint32) error {
	if _, ok := t.PowerSupply[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerSupply", newK)
	}

	e, ok := t.PowerSupply[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerSupply", oldK)
	}
	e.PowerSupplyId = &newK

	t.PowerSupply[newK] = e
	delete(t.PowerSupply, oldK)
	return nil
}

// GetOrCreatePowerSupply retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Chassis) GetOrCreatePowerSupply(PowerSupplyId uint32) *NokiaConf_Configure_Chassis_PowerSupply {

	key := PowerSupplyId

	if v, ok := t.PowerSupply[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerSupply(PowerSupplyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerSupply got unexpected error: %v", err))
	}
	return v
}

// GetPowerSupply retrieves the value with the specified key from
// the PowerSupply map field of NokiaConf_Configure_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Chassis) GetPowerSupply(PowerSupplyId uint32) *NokiaConf_Configure_Chassis_PowerSupply {

	if t == nil {
		return nil
	}

	key := PowerSupplyId

	if lm, ok := t.PowerSupply[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerSupply deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Chassis) DeletePowerSupply(PowerSupplyId uint32) {
	key := PowerSupplyId

	delete(t.PowerSupply, key)
}

// AppendPowerSupply appends the supplied NokiaConf_Configure_Chassis_PowerSupply struct to the
// list PowerSupply of NokiaConf_Configure_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Chassis_PowerSupply already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Chassis) AppendPowerSupply(v *NokiaConf_Configure_Chassis_PowerSupply) error {
	if v.PowerSupplyId == nil {
		return fmt.Errorf("invalid nil key received for PowerSupplyId")
	}

	key := *v.PowerSupplyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerSupply == nil {
		t.PowerSupply = make(map[uint32]*NokiaConf_Configure_Chassis_PowerSupply)
	}

	if _, ok := t.PowerSupply[key]; ok {
		return fmt.Errorf("duplicate key for list PowerSupply %v", key)
	}

	t.PowerSupply[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChassisClass retrieves the value of the leaf ChassisClass from the NokiaConf_Configure_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisClass is set, it can
// safely use t.GetChassisClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis) GetChassisClass() E_NokiaTypesChassis_ChassisClass {
	if t == nil || t.ChassisClass == 0 {
		return 0
	}
	return t.ChassisClass
}

// GetChassisNumber retrieves the value of the leaf ChassisNumber from the NokiaConf_Configure_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisNumber is set, it can
// safely use t.GetChassisNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis) GetChassisNumber() uint32 {
	if t == nil || t.ChassisNumber == nil {
		return 0
	}
	return *t.ChassisNumber
}

// GetMonitorFilterDoor retrieves the value of the leaf MonitorFilterDoor from the NokiaConf_Configure_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorFilterDoor is set, it can
// safely use t.GetMonitorFilterDoor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorFilterDoor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis) GetMonitorFilterDoor() bool {
	if t == nil || t.MonitorFilterDoor == nil {
		return false
	}
	return *t.MonitorFilterDoor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Chassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Chassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorFilterDoor == nil {
		var v bool = false
		t.MonitorFilterDoor = &v
	}
	for _, e := range t.Peq {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerConnectionModule {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerModule {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerShelf {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerSupply {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Chassis struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Chassis) ΛListKeyMap() (map[string]interface{}, error) {

	if t.ChassisNumber == nil {
		return nil, fmt.Errorf("nil value for key ChassisNumber")
	}

	return map[string]interface{}{
		"chassis-class":  t.ChassisClass,
		"chassis-number": *t.ChassisNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Chassis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Chassis.
func (*NokiaConf_Configure_Chassis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Chassis_Peq represents the /nokia-conf/configure/chassis/peq YANG schema element.
type NokiaConf_Configure_Chassis_Peq struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	InputPowerMode     *uint32                     `path:"input-power-mode" module:"nokia-conf"`
	PeqSlot            *uint32                     `path:"peq-slot" module:"nokia-conf"`
	PeqType            E_NokiaTypesSystem_PeqType  `path:"peq-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Chassis_Peq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Chassis_Peq) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_Peq) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_Peq) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_Peq) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInputPowerMode retrieves the value of the leaf InputPowerMode from the NokiaConf_Configure_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputPowerMode is set, it can
// safely use t.GetInputPowerMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputPowerMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_Peq) GetInputPowerMode() uint32 {
	if t == nil || t.InputPowerMode == nil {
		return 0
	}
	return *t.InputPowerMode
}

// GetPeqSlot retrieves the value of the leaf PeqSlot from the NokiaConf_Configure_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeqSlot is set, it can
// safely use t.GetPeqSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeqSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_Peq) GetPeqSlot() uint32 {
	if t == nil || t.PeqSlot == nil {
		return 0
	}
	return *t.PeqSlot
}

// GetPeqType retrieves the value of the leaf PeqType from the NokiaConf_Configure_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeqType is set, it can
// safely use t.GetPeqType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeqType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_Peq) GetPeqType() E_NokiaTypesSystem_PeqType {
	if t == nil || t.PeqType == 0 {
		return 0
	}
	return t.PeqType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Chassis_Peq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Chassis_Peq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Chassis_Peq struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Chassis_Peq) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeqSlot == nil {
		return nil, fmt.Errorf("nil value for key PeqSlot")
	}

	return map[string]interface{}{
		"peq-slot": *t.PeqSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_Peq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Chassis_Peq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_Peq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Chassis_Peq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Chassis_Peq.
func (*NokiaConf_Configure_Chassis_Peq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Chassis_PowerConnectionModule represents the /nokia-conf/configure/chassis/power-connection-module YANG schema element.
type NokiaConf_Configure_Chassis_PowerConnectionModule struct {
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	PcmSlot            *uint32                     `path:"pcm-slot" module:"nokia-conf"`
	PcmType            E_NokiaTypesChassis_PcmType `path:"pcm-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Chassis_PowerConnectionModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Chassis_PowerConnectionModule) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Chassis_PowerConnectionModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Chassis_PowerConnectionModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPcmSlot retrieves the value of the leaf PcmSlot from the NokiaConf_Configure_Chassis_PowerConnectionModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PcmSlot is set, it can
// safely use t.GetPcmSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PcmSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) GetPcmSlot() uint32 {
	if t == nil || t.PcmSlot == nil {
		return 0
	}
	return *t.PcmSlot
}

// GetPcmType retrieves the value of the leaf PcmType from the NokiaConf_Configure_Chassis_PowerConnectionModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PcmType is set, it can
// safely use t.GetPcmType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PcmType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) GetPcmType() E_NokiaTypesChassis_PcmType {
	if t == nil || t.PcmType == 0 {
		return 0
	}
	return t.PcmType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Chassis_PowerConnectionModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Chassis_PowerConnectionModule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PcmSlot == nil {
		return nil, fmt.Errorf("nil value for key PcmSlot")
	}

	return map[string]interface{}{
		"pcm-slot": *t.PcmSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Chassis_PowerConnectionModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Chassis_PowerConnectionModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Chassis_PowerConnectionModule.
func (*NokiaConf_Configure_Chassis_PowerConnectionModule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Chassis_PowerModule represents the /nokia-conf/configure/chassis/power-module YANG schema element.
type NokiaConf_Configure_Chassis_PowerModule struct {
	AdminState         E_NokiaTypesSros_AdminState         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                            `path:"apply-groups-exclude" module:"nokia-conf"`
	PowerModuleId      *uint32                             `path:"power-module-id" module:"nokia-conf"`
	PowerModuleType    E_NokiaTypesChassis_PowerModuleType `path:"power-module-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Chassis_PowerModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Chassis_PowerModule) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerModule) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerModule) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerModule) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPowerModuleId retrieves the value of the leaf PowerModuleId from the NokiaConf_Configure_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleId is set, it can
// safely use t.GetPowerModuleId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerModule) GetPowerModuleId() uint32 {
	if t == nil || t.PowerModuleId == nil {
		return 0
	}
	return *t.PowerModuleId
}

// GetPowerModuleType retrieves the value of the leaf PowerModuleType from the NokiaConf_Configure_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleType is set, it can
// safely use t.GetPowerModuleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerModule) GetPowerModuleType() E_NokiaTypesChassis_PowerModuleType {
	if t == nil || t.PowerModuleType == 0 {
		return 0
	}
	return t.PowerModuleType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Chassis_PowerModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Chassis_PowerModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Chassis_PowerModule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Chassis_PowerModule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PowerModuleId == nil {
		return nil, fmt.Errorf("nil value for key PowerModuleId")
	}

	return map[string]interface{}{
		"power-module-id": *t.PowerModuleId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Chassis_PowerModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerModule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Chassis_PowerModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Chassis_PowerModule.
func (*NokiaConf_Configure_Chassis_PowerModule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Chassis_PowerShelf represents the /nokia-conf/configure/chassis/power-shelf YANG schema element.
type NokiaConf_Configure_Chassis_PowerShelf struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                        `path:"description" module:"nokia-conf"`
	PowerModule        map[uint32]*NokiaConf_Configure_Chassis_PowerShelf_PowerModule `path:"power-module" module:"nokia-conf"`
	PowerShelfId       *uint32                                                        `path:"power-shelf-id" module:"nokia-conf"`
	PowerShelfType     E_NokiaTypesChassis_PowerShelfType                             `path:"power-shelf-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Chassis_PowerShelf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Chassis_PowerShelf) IsYANGGoStruct() {}

// NewPowerModule creates a new entry in the PowerModule list of the
// NokiaConf_Configure_Chassis_PowerShelf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Chassis_PowerShelf) NewPowerModule(PowerModuleId uint32) (*NokiaConf_Configure_Chassis_PowerShelf_PowerModule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[uint32]*NokiaConf_Configure_Chassis_PowerShelf_PowerModule)
	}

	key := PowerModuleId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerModule", key)
	}

	t.PowerModule[key] = &NokiaConf_Configure_Chassis_PowerShelf_PowerModule{
		PowerModuleId: &PowerModuleId,
	}

	return t.PowerModule[key], nil
}

// RenamePowerModule renames an entry in the list PowerModule within
// the NokiaConf_Configure_Chassis_PowerShelf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Chassis_PowerShelf) RenamePowerModule(oldK, newK uint32) error {
	if _, ok := t.PowerModule[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerModule", newK)
	}

	e, ok := t.PowerModule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerModule", oldK)
	}
	e.PowerModuleId = &newK

	t.PowerModule[newK] = e
	delete(t.PowerModule, oldK)
	return nil
}

// GetOrCreatePowerModule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis_PowerShelf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetOrCreatePowerModule(PowerModuleId uint32) *NokiaConf_Configure_Chassis_PowerShelf_PowerModule {

	key := PowerModuleId

	if v, ok := t.PowerModule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerModule(PowerModuleId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerModule got unexpected error: %v", err))
	}
	return v
}

// GetPowerModule retrieves the value with the specified key from
// the PowerModule map field of NokiaConf_Configure_Chassis_PowerShelf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetPowerModule(PowerModuleId uint32) *NokiaConf_Configure_Chassis_PowerShelf_PowerModule {

	if t == nil {
		return nil
	}

	key := PowerModuleId

	if lm, ok := t.PowerModule[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerModule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Chassis_PowerShelf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Chassis_PowerShelf) DeletePowerModule(PowerModuleId uint32) {
	key := PowerModuleId

	delete(t.PowerModule, key)
}

// AppendPowerModule appends the supplied NokiaConf_Configure_Chassis_PowerShelf_PowerModule struct to the
// list PowerModule of NokiaConf_Configure_Chassis_PowerShelf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Chassis_PowerShelf_PowerModule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Chassis_PowerShelf) AppendPowerModule(v *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) error {
	if v.PowerModuleId == nil {
		return fmt.Errorf("invalid nil key received for PowerModuleId")
	}

	key := *v.PowerModuleId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[uint32]*NokiaConf_Configure_Chassis_PowerShelf_PowerModule)
	}

	if _, ok := t.PowerModule[key]; ok {
		return fmt.Errorf("duplicate key for list PowerModule %v", key)
	}

	t.PowerModule[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPowerShelfId retrieves the value of the leaf PowerShelfId from the NokiaConf_Configure_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerShelfId is set, it can
// safely use t.GetPowerShelfId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerShelfId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetPowerShelfId() uint32 {
	if t == nil || t.PowerShelfId == nil {
		return 0
	}
	return *t.PowerShelfId
}

// GetPowerShelfType retrieves the value of the leaf PowerShelfType from the NokiaConf_Configure_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerShelfType is set, it can
// safely use t.GetPowerShelfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerShelfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf) GetPowerShelfType() E_NokiaTypesChassis_PowerShelfType {
	if t == nil || t.PowerShelfType == 0 {
		return 0
	}
	return t.PowerShelfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Chassis_PowerShelf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Chassis_PowerShelf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.PowerModule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Chassis_PowerShelf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Chassis_PowerShelf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PowerShelfId == nil {
		return nil, fmt.Errorf("nil value for key PowerShelfId")
	}

	return map[string]interface{}{
		"power-shelf-id": *t.PowerShelfId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerShelf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Chassis_PowerShelf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerShelf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Chassis_PowerShelf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Chassis_PowerShelf.
func (*NokiaConf_Configure_Chassis_PowerShelf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Chassis_PowerShelf_PowerModule represents the /nokia-conf/configure/chassis/power-shelf/power-module YANG schema element.
type NokiaConf_Configure_Chassis_PowerShelf_PowerModule struct {
	AdminState         E_NokiaTypesSros_AdminState         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                            `path:"apply-groups-exclude" module:"nokia-conf"`
	PowerModuleId      *uint32                             `path:"power-module-id" module:"nokia-conf"`
	PowerModuleType    E_NokiaTypesChassis_PowerModuleType `path:"power-module-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Chassis_PowerShelf_PowerModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Chassis_PowerShelf_PowerModule) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPowerModuleId retrieves the value of the leaf PowerModuleId from the NokiaConf_Configure_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleId is set, it can
// safely use t.GetPowerModuleId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) GetPowerModuleId() uint32 {
	if t == nil || t.PowerModuleId == nil {
		return 0
	}
	return *t.PowerModuleId
}

// GetPowerModuleType retrieves the value of the leaf PowerModuleType from the NokiaConf_Configure_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleType is set, it can
// safely use t.GetPowerModuleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) GetPowerModuleType() E_NokiaTypesChassis_PowerModuleType {
	if t == nil || t.PowerModuleType == 0 {
		return 0
	}
	return t.PowerModuleType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Chassis_PowerShelf_PowerModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Chassis_PowerShelf_PowerModule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PowerModuleId == nil {
		return nil, fmt.Errorf("nil value for key PowerModuleId")
	}

	return map[string]interface{}{
		"power-module-id": *t.PowerModuleId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Chassis_PowerShelf_PowerModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Chassis_PowerShelf_PowerModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Chassis_PowerShelf_PowerModule.
func (*NokiaConf_Configure_Chassis_PowerShelf_PowerModule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Chassis_PowerSupply represents the /nokia-conf/configure/chassis/power-supply YANG schema element.
type NokiaConf_Configure_Chassis_PowerSupply struct {
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	PowerSupplyId      *uint32                                                   `path:"power-supply-id" module:"nokia-conf"`
	PowerSupplyType    E_NokiaConf_Configure_Chassis_PowerSupply_PowerSupplyType `path:"power-supply-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Chassis_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Chassis_PowerSupply) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Chassis_PowerSupply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerSupply) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Chassis_PowerSupply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerSupply) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPowerSupplyId retrieves the value of the leaf PowerSupplyId from the NokiaConf_Configure_Chassis_PowerSupply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSupplyId is set, it can
// safely use t.GetPowerSupplyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSupplyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerSupply) GetPowerSupplyId() uint32 {
	if t == nil || t.PowerSupplyId == nil {
		return 0
	}
	return *t.PowerSupplyId
}

// GetPowerSupplyType retrieves the value of the leaf PowerSupplyType from the NokiaConf_Configure_Chassis_PowerSupply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSupplyType is set, it can
// safely use t.GetPowerSupplyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSupplyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Chassis_PowerSupply) GetPowerSupplyType() E_NokiaConf_Configure_Chassis_PowerSupply_PowerSupplyType {
	if t == nil || t.PowerSupplyType == 0 {
		return NokiaConf_Configure_Chassis_PowerSupply_PowerSupplyType_auto
	}
	return t.PowerSupplyType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Chassis_PowerSupply
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Chassis_PowerSupply) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PowerSupplyType == 0 {
		t.PowerSupplyType = NokiaConf_Configure_Chassis_PowerSupply_PowerSupplyType_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Chassis_PowerSupply struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Chassis_PowerSupply) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PowerSupplyId == nil {
		return nil, fmt.Errorf("nil value for key PowerSupplyId")
	}

	return map[string]interface{}{
		"power-supply-id": *t.PowerSupplyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerSupply) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Chassis_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Chassis_PowerSupply) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Chassis_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Chassis_PowerSupply.
func (*NokiaConf_Configure_Chassis_PowerSupply) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ConnectionProfile represents the /nokia-conf/configure/connection-profile YANG schema element.
type NokiaConf_Configure_ConnectionProfile struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Vlan               map[uint32]*NokiaConf_Configure_ConnectionProfile_Vlan `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ConnectionProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ConnectionProfile) IsYANGGoStruct() {}

// NewVlan creates a new entry in the Vlan list of the
// NokiaConf_Configure_ConnectionProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ConnectionProfile) NewVlan(ConnectionProfileId uint32) (*NokiaConf_Configure_ConnectionProfile_Vlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint32]*NokiaConf_Configure_ConnectionProfile_Vlan)
	}

	key := ConnectionProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &NokiaConf_Configure_ConnectionProfile_Vlan{
		ConnectionProfileId: &ConnectionProfileId,
	}

	return t.Vlan[key], nil
}

// RenameVlan renames an entry in the list Vlan within
// the NokiaConf_Configure_ConnectionProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ConnectionProfile) RenameVlan(oldK, newK uint32) error {
	if _, ok := t.Vlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vlan", newK)
	}

	e, ok := t.Vlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vlan", oldK)
	}
	e.ConnectionProfileId = &newK

	t.Vlan[newK] = e
	delete(t.Vlan, oldK)
	return nil
}

// GetOrCreateVlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ConnectionProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ConnectionProfile) GetOrCreateVlan(ConnectionProfileId uint32) *NokiaConf_Configure_ConnectionProfile_Vlan {

	key := ConnectionProfileId

	if v, ok := t.Vlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlan(ConnectionProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlan got unexpected error: %v", err))
	}
	return v
}

// GetVlan retrieves the value with the specified key from
// the Vlan map field of NokiaConf_Configure_ConnectionProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ConnectionProfile) GetVlan(ConnectionProfileId uint32) *NokiaConf_Configure_ConnectionProfile_Vlan {

	if t == nil {
		return nil
	}

	key := ConnectionProfileId

	if lm, ok := t.Vlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ConnectionProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ConnectionProfile) DeleteVlan(ConnectionProfileId uint32) {
	key := ConnectionProfileId

	delete(t.Vlan, key)
}

// AppendVlan appends the supplied NokiaConf_Configure_ConnectionProfile_Vlan struct to the
// list Vlan of NokiaConf_Configure_ConnectionProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_ConnectionProfile_Vlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ConnectionProfile) AppendVlan(v *NokiaConf_Configure_ConnectionProfile_Vlan) error {
	if v.ConnectionProfileId == nil {
		return fmt.Errorf("invalid nil key received for ConnectionProfileId")
	}

	key := *v.ConnectionProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint32]*NokiaConf_Configure_ConnectionProfile_Vlan)
	}

	if _, ok := t.Vlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vlan %v", key)
	}

	t.Vlan[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ConnectionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ConnectionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ConnectionProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ConnectionProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Vlan {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ConnectionProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ConnectionProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ConnectionProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ConnectionProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ConnectionProfile.
func (*NokiaConf_Configure_ConnectionProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ConnectionProfile_Vlan represents the /nokia-conf/configure/connection-profile/vlan YANG schema element.
type NokiaConf_Configure_ConnectionProfile_Vlan struct {
	ApplyGroups         []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	ConnectionProfileId *uint32                                                         `path:"connection-profile-id" module:"nokia-conf"`
	Description         *string                                                         `path:"description" module:"nokia-conf"`
	QtagRange           map[int32]*NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange `path:"qtag-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ConnectionProfile_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ConnectionProfile_Vlan) IsYANGGoStruct() {}

// NewQtagRange creates a new entry in the QtagRange list of the
// NokiaConf_Configure_ConnectionProfile_Vlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) NewQtagRange(Start int32) (*NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QtagRange == nil {
		t.QtagRange = make(map[int32]*NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QtagRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QtagRange", key)
	}

	t.QtagRange[key] = &NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange{
		Start: &Start,
	}

	return t.QtagRange[key], nil
}

// RenameQtagRange renames an entry in the list QtagRange within
// the NokiaConf_Configure_ConnectionProfile_Vlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) RenameQtagRange(oldK, newK int32) error {
	if _, ok := t.QtagRange[newK]; ok {
		return fmt.Errorf("key %v already exists in QtagRange", newK)
	}

	e, ok := t.QtagRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QtagRange", oldK)
	}
	e.Start = &newK

	t.QtagRange[newK] = e
	delete(t.QtagRange, oldK)
	return nil
}

// GetOrCreateQtagRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ConnectionProfile_Vlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) GetOrCreateQtagRange(Start int32) *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange {

	key := Start

	if v, ok := t.QtagRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQtagRange(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQtagRange got unexpected error: %v", err))
	}
	return v
}

// GetQtagRange retrieves the value with the specified key from
// the QtagRange map field of NokiaConf_Configure_ConnectionProfile_Vlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) GetQtagRange(Start int32) *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QtagRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteQtagRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ConnectionProfile_Vlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) DeleteQtagRange(Start int32) {
	key := Start

	delete(t.QtagRange, key)
}

// AppendQtagRange appends the supplied NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange struct to the
// list QtagRange of NokiaConf_Configure_ConnectionProfile_Vlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) AppendQtagRange(v *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key received for Start")
	}

	key := *v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QtagRange == nil {
		t.QtagRange = make(map[int32]*NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange)
	}

	if _, ok := t.QtagRange[key]; ok {
		return fmt.Errorf("duplicate key for list QtagRange %v", key)
	}

	t.QtagRange[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ConnectionProfile_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ConnectionProfile_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetConnectionProfileId retrieves the value of the leaf ConnectionProfileId from the NokiaConf_Configure_ConnectionProfile_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionProfileId is set, it can
// safely use t.GetConnectionProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) GetConnectionProfileId() uint32 {
	if t == nil || t.ConnectionProfileId == nil {
		return 0
	}
	return *t.ConnectionProfileId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ConnectionProfile_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ConnectionProfile_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QtagRange {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ConnectionProfile_Vlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectionProfileId == nil {
		return nil, fmt.Errorf("nil value for key ConnectionProfileId")
	}

	return map[string]interface{}{
		"connection-profile-id": *t.ConnectionProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ConnectionProfile_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ConnectionProfile_Vlan.
func (*NokiaConf_Configure_ConnectionProfile_Vlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange represents the /nokia-conf/configure/connection-profile/vlan/qtag-range YANG schema element.
type NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *int32   `path:"end" module:"nokia-conf"`
	Start              *int32   `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange.
func (*NokiaConf_Configure_ConnectionProfile_Vlan_QtagRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Esa represents the /nokia-conf/configure/esa YANG schema element.
type NokiaConf_Configure_Esa struct {
	AdminState         E_NokiaTypesSros_AdminState                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                      `path:"description" module:"nokia-conf"`
	EsaId              *int32                                       `path:"esa-id" module:"nokia-conf"`
	HostPort           map[string]*NokiaConf_Configure_Esa_HostPort `path:"host-port" module:"nokia-conf"`
	Vm                 map[int32]*NokiaConf_Configure_Esa_Vm        `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Esa) IsYANGGoStruct() {}

// NewHostPort creates a new entry in the HostPort list of the
// NokiaConf_Configure_Esa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Esa) NewHostPort(HostPort string) (*NokiaConf_Configure_Esa_HostPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostPort == nil {
		t.HostPort = make(map[string]*NokiaConf_Configure_Esa_HostPort)
	}

	key := HostPort

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostPort", key)
	}

	t.HostPort[key] = &NokiaConf_Configure_Esa_HostPort{
		HostPort: &HostPort,
	}

	return t.HostPort[key], nil
}

// RenameHostPort renames an entry in the list HostPort within
// the NokiaConf_Configure_Esa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Esa) RenameHostPort(oldK, newK string) error {
	if _, ok := t.HostPort[newK]; ok {
		return fmt.Errorf("key %v already exists in HostPort", newK)
	}

	e, ok := t.HostPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostPort", oldK)
	}
	e.HostPort = &newK

	t.HostPort[newK] = e
	delete(t.HostPort, oldK)
	return nil
}

// GetOrCreateHostPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Esa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Esa) GetOrCreateHostPort(HostPort string) *NokiaConf_Configure_Esa_HostPort {

	key := HostPort

	if v, ok := t.HostPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostPort(HostPort)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostPort got unexpected error: %v", err))
	}
	return v
}

// GetHostPort retrieves the value with the specified key from
// the HostPort map field of NokiaConf_Configure_Esa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Esa) GetHostPort(HostPort string) *NokiaConf_Configure_Esa_HostPort {

	if t == nil {
		return nil
	}

	key := HostPort

	if lm, ok := t.HostPort[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Esa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Esa) DeleteHostPort(HostPort string) {
	key := HostPort

	delete(t.HostPort, key)
}

// AppendHostPort appends the supplied NokiaConf_Configure_Esa_HostPort struct to the
// list HostPort of NokiaConf_Configure_Esa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Esa_HostPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Esa) AppendHostPort(v *NokiaConf_Configure_Esa_HostPort) error {
	if v.HostPort == nil {
		return fmt.Errorf("invalid nil key received for HostPort")
	}

	key := *v.HostPort

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostPort == nil {
		t.HostPort = make(map[string]*NokiaConf_Configure_Esa_HostPort)
	}

	if _, ok := t.HostPort[key]; ok {
		return fmt.Errorf("duplicate key for list HostPort %v", key)
	}

	t.HostPort[key] = v
	return nil
}

// NewVm creates a new entry in the Vm list of the
// NokiaConf_Configure_Esa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Esa) NewVm(VmId int32) (*NokiaConf_Configure_Esa_Vm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vm == nil {
		t.Vm = make(map[int32]*NokiaConf_Configure_Esa_Vm)
	}

	key := VmId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vm", key)
	}

	t.Vm[key] = &NokiaConf_Configure_Esa_Vm{
		VmId: &VmId,
	}

	return t.Vm[key], nil
}

// RenameVm renames an entry in the list Vm within
// the NokiaConf_Configure_Esa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Esa) RenameVm(oldK, newK int32) error {
	if _, ok := t.Vm[newK]; ok {
		return fmt.Errorf("key %v already exists in Vm", newK)
	}

	e, ok := t.Vm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vm", oldK)
	}
	e.VmId = &newK

	t.Vm[newK] = e
	delete(t.Vm, oldK)
	return nil
}

// GetOrCreateVm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Esa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Esa) GetOrCreateVm(VmId int32) *NokiaConf_Configure_Esa_Vm {

	key := VmId

	if v, ok := t.Vm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVm(VmId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVm got unexpected error: %v", err))
	}
	return v
}

// GetVm retrieves the value with the specified key from
// the Vm map field of NokiaConf_Configure_Esa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Esa) GetVm(VmId int32) *NokiaConf_Configure_Esa_Vm {

	if t == nil {
		return nil
	}

	key := VmId

	if lm, ok := t.Vm[key]; ok {
		return lm
	}
	return nil
}

// DeleteVm deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Esa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Esa) DeleteVm(VmId int32) {
	key := VmId

	delete(t.Vm, key)
}

// AppendVm appends the supplied NokiaConf_Configure_Esa_Vm struct to the
// list Vm of NokiaConf_Configure_Esa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Esa_Vm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Esa) AppendVm(v *NokiaConf_Configure_Esa_Vm) error {
	if v.VmId == nil {
		return fmt.Errorf("invalid nil key received for VmId")
	}

	key := *v.VmId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vm == nil {
		t.Vm = make(map[int32]*NokiaConf_Configure_Esa_Vm)
	}

	if _, ok := t.Vm[key]; ok {
		return fmt.Errorf("duplicate key for list Vm %v", key)
	}

	t.Vm[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.HostPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Vm {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Esa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	return map[string]interface{}{
		"esa-id": *t.EsaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Esa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Esa.
func (*NokiaConf_Configure_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Esa_HostPort represents the /nokia-conf/configure/esa/host-port YANG schema element.
type NokiaConf_Configure_Esa_HostPort struct {
	HostPort *string `path:"host-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Esa_HostPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Esa_HostPort) IsYANGGoStruct() {}

// GetHostPort retrieves the value of the leaf HostPort from the NokiaConf_Configure_Esa_HostPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostPort is set, it can
// safely use t.GetHostPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_HostPort) GetHostPort() string {
	if t == nil || t.HostPort == nil {
		return ""
	}
	return *t.HostPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Esa_HostPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Esa_HostPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Esa_HostPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Esa_HostPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostPort == nil {
		return nil, fmt.Errorf("nil value for key HostPort")
	}

	return map[string]interface{}{
		"host-port": *t.HostPort,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Esa_HostPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Esa_HostPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Esa_HostPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Esa_HostPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Esa_HostPort.
func (*NokiaConf_Configure_Esa_HostPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Esa_Vm represents the /nokia-conf/configure/esa/vm YANG schema element.
type NokiaConf_Configure_Esa_Vm struct {
	AdminState         E_NokiaTypesSros_AdminState         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Cores              *uint32                             `path:"cores" module:"nokia-conf"`
	Description        *string                             `path:"description" module:"nokia-conf"`
	HostPort           *string                             `path:"host-port" module:"nokia-conf"`
	Memory             *uint32                             `path:"memory" module:"nokia-conf"`
	VmId               *int32                              `path:"vm-id" module:"nokia-conf"`
	VmType             E_NokiaConf_Configure_Esa_Vm_VmType `path:"vm-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Esa_Vm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Esa_Vm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCores retrieves the value of the leaf Cores from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cores is set, it can
// safely use t.GetCores() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cores == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetCores() uint32 {
	if t == nil || t.Cores == nil {
		return 0
	}
	return *t.Cores
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHostPort retrieves the value of the leaf HostPort from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostPort is set, it can
// safely use t.GetHostPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetHostPort() string {
	if t == nil || t.HostPort == nil {
		return ""
	}
	return *t.HostPort
}

// GetMemory retrieves the value of the leaf Memory from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Memory is set, it can
// safely use t.GetMemory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Memory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetMemory() uint32 {
	if t == nil || t.Memory == nil {
		return 0
	}
	return *t.Memory
}

// GetVmId retrieves the value of the leaf VmId from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmId is set, it can
// safely use t.GetVmId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetVmId() int32 {
	if t == nil || t.VmId == nil {
		return 0
	}
	return *t.VmId
}

// GetVmType retrieves the value of the leaf VmType from the NokiaConf_Configure_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmType is set, it can
// safely use t.GetVmType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Esa_Vm) GetVmType() E_NokiaConf_Configure_Esa_Vm_VmType {
	if t == nil || t.VmType == 0 {
		return 0
	}
	return t.VmType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Esa_Vm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Esa_Vm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Cores == nil {
		var v uint32 = 0
		t.Cores = &v
	}
	if t.Memory == nil {
		var v uint32 = 0
		t.Memory = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Esa_Vm struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Esa_Vm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VmId == nil {
		return nil, fmt.Errorf("nil value for key VmId")
	}

	return map[string]interface{}{
		"vm-id": *t.VmId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Esa_Vm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Esa_Vm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Esa_Vm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Esa_Vm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Esa_Vm.
func (*NokiaConf_Configure_Esa_Vm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm represents the /nokia-conf/configure/eth-cfm YANG schema element.
type NokiaConf_Configure_EthCfm struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultDomain      *NokiaConf_Configure_EthCfm_DefaultDomain     `path:"default-domain" module:"nokia-conf"`
	Domain             map[string]*NokiaConf_Configure_EthCfm_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_EthCfm) NewDomain(MdAdminName string) (*NokiaConf_Configure_EthCfm_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_EthCfm_Domain)
	}

	key := MdAdminName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_EthCfm_Domain{
		MdAdminName: &MdAdminName,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_EthCfm) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.MdAdminName = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_EthCfm) GetOrCreateDomain(MdAdminName string) *NokiaConf_Configure_EthCfm_Domain {

	key := MdAdminName

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(MdAdminName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_EthCfm) GetDomain(MdAdminName string) *NokiaConf_Configure_EthCfm_Domain {

	if t == nil {
		return nil
	}

	key := MdAdminName

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_EthCfm) DeleteDomain(MdAdminName string) {
	key := MdAdminName

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_EthCfm_Domain struct to the
// list Domain of NokiaConf_Configure_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthCfm_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_EthCfm) AppendDomain(v *NokiaConf_Configure_EthCfm_Domain) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key received for MdAdminName")
	}

	key := *v.MdAdminName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_EthCfm_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// GetOrCreateDefaultDomain retrieves the value of the DefaultDomain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthCfm) GetOrCreateDefaultDomain() *NokiaConf_Configure_EthCfm_DefaultDomain {
	if t.DefaultDomain != nil {
		return t.DefaultDomain
	}
	t.DefaultDomain = &NokiaConf_Configure_EthCfm_DefaultDomain{}
	return t.DefaultDomain
}

// GetDefaultDomain returns the value of the DefaultDomain struct pointer
// from NokiaConf_Configure_EthCfm. If the receiver or the field DefaultDomain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthCfm) GetDefaultDomain() *NokiaConf_Configure_EthCfm_DefaultDomain {
	if t != nil && t.DefaultDomain != nil {
		return t.DefaultDomain
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultDomain.PopulateDefaults()
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm.
func (*NokiaConf_Configure_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_DefaultDomain represents the /nokia-conf/configure/eth-cfm/default-domain YANG schema element.
type NokiaConf_Configure_EthCfm_DefaultDomain struct {
	ApplyGroups        []string                                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	BridgeIdentifier   map[NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key]*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier `path:"bridge-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_DefaultDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_DefaultDomain) IsYANGGoStruct() {}

// NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key represents the key for list BridgeIdentifier of element /nokia-conf/configure/eth-cfm/default-domain.
type NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key struct {
	BridgeName string                                                               `path:"bridge-name"`
	Vlan       NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union `path:"vlan"`
}

// NewBridgeIdentifier creates a new entry in the BridgeIdentifier list of the
// NokiaConf_Configure_EthCfm_DefaultDomain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) NewBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) (*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key]*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier)
	}

	key := NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BridgeIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BridgeIdentifier", key)
	}

	t.BridgeIdentifier[key] = &NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier{
		BridgeName: &BridgeName,
		Vlan:       Vlan,
	}

	return t.BridgeIdentifier[key], nil
}

// RenameBridgeIdentifier renames an entry in the list BridgeIdentifier within
// the NokiaConf_Configure_EthCfm_DefaultDomain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) RenameBridgeIdentifier(oldK, newK NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key) error {
	if _, ok := t.BridgeIdentifier[newK]; ok {
		return fmt.Errorf("key %v already exists in BridgeIdentifier", newK)
	}

	e, ok := t.BridgeIdentifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BridgeIdentifier", oldK)
	}
	e.BridgeName = &newK.BridgeName
	e.Vlan = newK.Vlan

	t.BridgeIdentifier[newK] = e
	delete(t.BridgeIdentifier, oldK)
	return nil
}

// GetOrCreateBridgeIdentifier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_DefaultDomain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) GetOrCreateBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier {

	key := NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	if v, ok := t.BridgeIdentifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBridgeIdentifier(BridgeName, Vlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBridgeIdentifier got unexpected error: %v", err))
	}
	return v
}

// GetBridgeIdentifier retrieves the value with the specified key from
// the BridgeIdentifier map field of NokiaConf_Configure_EthCfm_DefaultDomain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) GetBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	if lm, ok := t.BridgeIdentifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteBridgeIdentifier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_DefaultDomain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) DeleteBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) {
	key := NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	delete(t.BridgeIdentifier, key)
}

// AppendBridgeIdentifier appends the supplied NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier struct to the
// list BridgeIdentifier of NokiaConf_Configure_EthCfm_DefaultDomain. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) AppendBridgeIdentifier(v *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) error {
	if v.BridgeName == nil {
		return fmt.Errorf("invalid nil key for BridgeName")
	}

	key := NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: *v.BridgeName,
		Vlan:       v.Vlan,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Key]*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier)
	}

	if _, ok := t.BridgeIdentifier[key]; ok {
		return fmt.Errorf("duplicate key for list BridgeIdentifier %v", key)
	}

	t.BridgeIdentifier[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthCfm_DefaultDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthCfm_DefaultDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_DefaultDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BridgeIdentifier {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_DefaultDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_DefaultDomain.
func (*NokiaConf_Configure_EthCfm_DefaultDomain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier represents the /nokia-conf/configure/eth-cfm/default-domain/bridge-identifier YANG schema element.
type NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	BridgeName         *string                                                                        `path:"bridge-name" module:"nokia-conf"`
	IdPermission       E_NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission       `path:"id-permission" module:"nokia-conf"`
	MhfCreation        *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation         `path:"mhf-creation" module:"nokia-conf"`
	MipLtrPriority     NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Union `path:"mip-ltr-priority" module:"nokia-conf"`
	Vlan               NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union           `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) IsYANGGoStruct() {}

// GetOrCreateMhfCreation retrieves the value of the MhfCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetOrCreateMhfCreation() *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation {
	if t.MhfCreation != nil {
		return t.MhfCreation
	}
	t.MhfCreation = &NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation{}
	return t.MhfCreation
}

// GetMhfCreation returns the value of the MhfCreation struct pointer
// from NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier. If the receiver or the field MhfCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetMhfCreation() *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation {
	if t != nil && t.MhfCreation != nil {
		return t.MhfCreation
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBridgeName retrieves the value of the leaf BridgeName from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeName is set, it can
// safely use t.GetBridgeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetBridgeName() string {
	if t == nil || t.BridgeName == nil {
		return ""
	}
	return *t.BridgeName
}

// GetIdPermission retrieves the value of the leaf IdPermission from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdPermission is set, it can
// safely use t.GetIdPermission() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdPermission == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetIdPermission() E_NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission {
	if t == nil || t.IdPermission == 0 {
		return NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission_defer
	}
	return t.IdPermission
}

// GetMipLtrPriority retrieves the value of the leaf MipLtrPriority from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MipLtrPriority is set, it can
// safely use t.GetMipLtrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MipLtrPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetMipLtrPriority() NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Union {
	if t == nil || t.MipLtrPriority == nil {
		return NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Enum_defer
	}
	return t.MipLtrPriority
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) GetVlan() NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdPermission == 0 {
		t.IdPermission = NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission_defer
	}
	if t.MipLtrPriority == nil {
		t.MipLtrPriority = NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Enum_defer
	}
	t.MhfCreation.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BridgeName == nil {
		return nil, fmt.Errorf("nil value for key BridgeName")
	}

	return map[string]interface{}{
		"bridge-name": *t.BridgeName,
		"vlan":        t.Vlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier.
func (*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation represents the /nokia-conf/configure/eth-cfm/default-domain/bridge-identifier/mhf-creation YANG schema element.
type NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation struct {
	Level   NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation_Level_Union `path:"level" module:"nokia-conf"`
	MhfType E_NokiaTypesEthCfm_MhfCreationType                                                `path:"mhf-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) IsYANGGoStruct() {}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) GetLevel() NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation_Level_Union {
	if t == nil || t.Level == nil {
		return NokiaTypesEthCfm_MhfCreationLevelType_Enum_defer
	}
	return t.Level
}

// GetMhfType retrieves the value of the leaf MhfType from the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhfType is set, it can
// safely use t.GetMhfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) GetMhfType() E_NokiaTypesEthCfm_MhfCreationType {
	if t == nil || t.MhfType == 0 {
		return NokiaTypesEthCfm_MhfCreationType_defer
	}
	return t.MhfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		t.Level = NokiaTypesEthCfm_MhfCreationLevelType_Enum_defer
	}
	if t.MhfType == 0 {
		t.MhfType = NokiaTypesEthCfm_MhfCreationType_defer
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation.
func (*NokiaConf_Configure_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_Domain represents the /nokia-conf/configure/eth-cfm/domain YANG schema element.
type NokiaConf_Configure_EthCfm_Domain struct {
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Association        map[string]*NokiaConf_Configure_EthCfm_Domain_Association `path:"association" module:"nokia-conf"`
	Dns                *string                                                   `path:"dns" module:"nokia-conf"`
	Format             E_NokiaConf_Configure_EthCfm_Domain_Format                `path:"format" module:"nokia-conf"`
	Level              *int32                                                    `path:"level" module:"nokia-conf"`
	Mac                *string                                                   `path:"mac" module:"nokia-conf"`
	MdAdminName        *string                                                   `path:"md-admin-name" module:"nokia-conf"`
	MdIndex            *uint32                                                   `path:"md-index" module:"nokia-conf"`
	Name               *string                                                   `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_Domain) IsYANGGoStruct() {}

// NewAssociation creates a new entry in the Association list of the
// NokiaConf_Configure_EthCfm_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_EthCfm_Domain) NewAssociation(MaAdminName string) (*NokiaConf_Configure_EthCfm_Domain_Association, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*NokiaConf_Configure_EthCfm_Domain_Association)
	}

	key := MaAdminName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Association[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Association", key)
	}

	t.Association[key] = &NokiaConf_Configure_EthCfm_Domain_Association{
		MaAdminName: &MaAdminName,
	}

	return t.Association[key], nil
}

// RenameAssociation renames an entry in the list Association within
// the NokiaConf_Configure_EthCfm_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_EthCfm_Domain) RenameAssociation(oldK, newK string) error {
	if _, ok := t.Association[newK]; ok {
		return fmt.Errorf("key %v already exists in Association", newK)
	}

	e, ok := t.Association[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Association", oldK)
	}
	e.MaAdminName = &newK

	t.Association[newK] = e
	delete(t.Association, oldK)
	return nil
}

// GetOrCreateAssociation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_EthCfm_Domain) GetOrCreateAssociation(MaAdminName string) *NokiaConf_Configure_EthCfm_Domain_Association {

	key := MaAdminName

	if v, ok := t.Association[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssociation(MaAdminName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssociation got unexpected error: %v", err))
	}
	return v
}

// GetAssociation retrieves the value with the specified key from
// the Association map field of NokiaConf_Configure_EthCfm_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_EthCfm_Domain) GetAssociation(MaAdminName string) *NokiaConf_Configure_EthCfm_Domain_Association {

	if t == nil {
		return nil
	}

	key := MaAdminName

	if lm, ok := t.Association[key]; ok {
		return lm
	}
	return nil
}

// DeleteAssociation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_EthCfm_Domain) DeleteAssociation(MaAdminName string) {
	key := MaAdminName

	delete(t.Association, key)
}

// AppendAssociation appends the supplied NokiaConf_Configure_EthCfm_Domain_Association struct to the
// list Association of NokiaConf_Configure_EthCfm_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthCfm_Domain_Association already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_EthCfm_Domain) AppendAssociation(v *NokiaConf_Configure_EthCfm_Domain_Association) error {
	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key received for MaAdminName")
	}

	key := *v.MaAdminName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*NokiaConf_Configure_EthCfm_Domain_Association)
	}

	if _, ok := t.Association[key]; ok {
		return fmt.Errorf("duplicate key for list Association %v", key)
	}

	t.Association[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetDns() string {
	if t == nil || t.Dns == nil {
		return ""
	}
	return *t.Dns
}

// GetFormat retrieves the value of the leaf Format from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format is set, it can
// safely use t.GetFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetFormat() E_NokiaConf_Configure_EthCfm_Domain_Format {
	if t == nil || t.Format == 0 {
		return 0
	}
	return t.Format
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMdIndex retrieves the value of the leaf MdIndex from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdIndex is set, it can
// safely use t.GetMdIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetMdIndex() uint32 {
	if t == nil || t.MdIndex == nil {
		return 0
	}
	return *t.MdIndex
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Association {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthCfm_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthCfm_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"md-admin-name": *t.MdAdminName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_Domain.
func (*NokiaConf_Configure_EthCfm_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_Domain_Association represents the /nokia-conf/configure/eth-cfm/domain/association YANG schema element.
type NokiaConf_Configure_EthCfm_Domain_Association struct {
	ApplyGroups          []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoMepDiscovery     *bool                                                                      `path:"auto-mep-discovery" module:"nokia-conf"`
	BridgeIdentifier     map[string]*NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier `path:"bridge-identifier" module:"nokia-conf"`
	CcmHoldTime          *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime                 `path:"ccm-hold-time" module:"nokia-conf"`
	CcmInterval          E_NokiaTypesEthCfm_CcmIntervalType                                         `path:"ccm-interval" module:"nokia-conf"`
	FacilityIdPermission E_NokiaTypesEthCfm_FacilityIdPermissionType                                `path:"facility-id-permission" module:"nokia-conf"`
	IccBased             *string                                                                    `path:"icc-based" module:"nokia-conf"`
	Integer              *uint32                                                                    `path:"integer" module:"nokia-conf"`
	MaAdminName          *string                                                                    `path:"ma-admin-name" module:"nokia-conf"`
	MaIndex              *uint32                                                                    `path:"ma-index" module:"nokia-conf"`
	RemoteMep            map[uint16]*NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep        `path:"remote-mep" module:"nokia-conf"`
	String               *string                                                                    `path:"string" module:"nokia-conf"`
	Vid                  *uint32                                                                    `path:"vid" module:"nokia-conf"`
	VpnId                *string                                                                    `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_Domain_Association implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_Domain_Association) IsYANGGoStruct() {}

// NewBridgeIdentifier creates a new entry in the BridgeIdentifier list of the
// NokiaConf_Configure_EthCfm_Domain_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) NewBridgeIdentifier(BridgeName string) (*NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[string]*NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier)
	}

	key := BridgeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BridgeIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BridgeIdentifier", key)
	}

	t.BridgeIdentifier[key] = &NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier{
		BridgeName: &BridgeName,
	}

	return t.BridgeIdentifier[key], nil
}

// RenameBridgeIdentifier renames an entry in the list BridgeIdentifier within
// the NokiaConf_Configure_EthCfm_Domain_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) RenameBridgeIdentifier(oldK, newK string) error {
	if _, ok := t.BridgeIdentifier[newK]; ok {
		return fmt.Errorf("key %v already exists in BridgeIdentifier", newK)
	}

	e, ok := t.BridgeIdentifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BridgeIdentifier", oldK)
	}
	e.BridgeName = &newK

	t.BridgeIdentifier[newK] = e
	delete(t.BridgeIdentifier, oldK)
	return nil
}

// GetOrCreateBridgeIdentifier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_Domain_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetOrCreateBridgeIdentifier(BridgeName string) *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier {

	key := BridgeName

	if v, ok := t.BridgeIdentifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBridgeIdentifier(BridgeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBridgeIdentifier got unexpected error: %v", err))
	}
	return v
}

// GetBridgeIdentifier retrieves the value with the specified key from
// the BridgeIdentifier map field of NokiaConf_Configure_EthCfm_Domain_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetBridgeIdentifier(BridgeName string) *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier {

	if t == nil {
		return nil
	}

	key := BridgeName

	if lm, ok := t.BridgeIdentifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteBridgeIdentifier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_Domain_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) DeleteBridgeIdentifier(BridgeName string) {
	key := BridgeName

	delete(t.BridgeIdentifier, key)
}

// AppendBridgeIdentifier appends the supplied NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier struct to the
// list BridgeIdentifier of NokiaConf_Configure_EthCfm_Domain_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) AppendBridgeIdentifier(v *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) error {
	if v.BridgeName == nil {
		return fmt.Errorf("invalid nil key received for BridgeName")
	}

	key := *v.BridgeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[string]*NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier)
	}

	if _, ok := t.BridgeIdentifier[key]; ok {
		return fmt.Errorf("duplicate key for list BridgeIdentifier %v", key)
	}

	t.BridgeIdentifier[key] = v
	return nil
}

// NewRemoteMep creates a new entry in the RemoteMep list of the
// NokiaConf_Configure_EthCfm_Domain_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) NewRemoteMep(MepId uint16) (*NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteMep == nil {
		t.RemoteMep = make(map[uint16]*NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep)
	}

	key := MepId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteMep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteMep", key)
	}

	t.RemoteMep[key] = &NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep{
		MepId: &MepId,
	}

	return t.RemoteMep[key], nil
}

// RenameRemoteMep renames an entry in the list RemoteMep within
// the NokiaConf_Configure_EthCfm_Domain_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) RenameRemoteMep(oldK, newK uint16) error {
	if _, ok := t.RemoteMep[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteMep", newK)
	}

	e, ok := t.RemoteMep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteMep", oldK)
	}
	e.MepId = &newK

	t.RemoteMep[newK] = e
	delete(t.RemoteMep, oldK)
	return nil
}

// GetOrCreateRemoteMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_Domain_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetOrCreateRemoteMep(MepId uint16) *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep {

	key := MepId

	if v, ok := t.RemoteMep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteMep(MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteMep got unexpected error: %v", err))
	}
	return v
}

// GetRemoteMep retrieves the value with the specified key from
// the RemoteMep map field of NokiaConf_Configure_EthCfm_Domain_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetRemoteMep(MepId uint16) *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep {

	if t == nil {
		return nil
	}

	key := MepId

	if lm, ok := t.RemoteMep[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_EthCfm_Domain_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) DeleteRemoteMep(MepId uint16) {
	key := MepId

	delete(t.RemoteMep, key)
}

// AppendRemoteMep appends the supplied NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep struct to the
// list RemoteMep of NokiaConf_Configure_EthCfm_Domain_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) AppendRemoteMep(v *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) error {
	if v.MepId == nil {
		return fmt.Errorf("invalid nil key received for MepId")
	}

	key := *v.MepId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteMep == nil {
		t.RemoteMep = make(map[uint16]*NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep)
	}

	if _, ok := t.RemoteMep[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteMep %v", key)
	}

	t.RemoteMep[key] = v
	return nil
}

// GetOrCreateCcmHoldTime retrieves the value of the CcmHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetOrCreateCcmHoldTime() *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime {
	if t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	t.CcmHoldTime = &NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime{}
	return t.CcmHoldTime
}

// GetCcmHoldTime returns the value of the CcmHoldTime struct pointer
// from NokiaConf_Configure_EthCfm_Domain_Association. If the receiver or the field CcmHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetCcmHoldTime() *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime {
	if t != nil && t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoMepDiscovery retrieves the value of the leaf AutoMepDiscovery from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoMepDiscovery is set, it can
// safely use t.GetAutoMepDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoMepDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetAutoMepDiscovery() bool {
	if t == nil || t.AutoMepDiscovery == nil {
		return false
	}
	return *t.AutoMepDiscovery
}

// GetCcmInterval retrieves the value of the leaf CcmInterval from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmInterval is set, it can
// safely use t.GetCcmInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetCcmInterval() E_NokiaTypesEthCfm_CcmIntervalType {
	if t == nil || t.CcmInterval == 0 {
		return NokiaTypesEthCfm_CcmIntervalType_10s
	}
	return t.CcmInterval
}

// GetFacilityIdPermission retrieves the value of the leaf FacilityIdPermission from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityIdPermission is set, it can
// safely use t.GetFacilityIdPermission() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityIdPermission == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetFacilityIdPermission() E_NokiaTypesEthCfm_FacilityIdPermissionType {
	if t == nil || t.FacilityIdPermission == 0 {
		return NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	return t.FacilityIdPermission
}

// GetIccBased retrieves the value of the leaf IccBased from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IccBased is set, it can
// safely use t.GetIccBased() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IccBased == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetIccBased() string {
	if t == nil || t.IccBased == nil {
		return ""
	}
	return *t.IccBased
}

// GetInteger retrieves the value of the leaf Integer from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Integer is set, it can
// safely use t.GetInteger() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Integer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetInteger() uint32 {
	if t == nil || t.Integer == nil {
		return 0
	}
	return *t.Integer
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMaIndex retrieves the value of the leaf MaIndex from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaIndex is set, it can
// safely use t.GetMaIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetMaIndex() uint32 {
	if t == nil || t.MaIndex == nil {
		return 0
	}
	return *t.MaIndex
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetVid retrieves the value of the leaf Vid from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vid is set, it can
// safely use t.GetVid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetVid() uint32 {
	if t == nil || t.Vid == nil {
		return 0
	}
	return *t.Vid
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) GetVpnId() string {
	if t == nil || t.VpnId == nil {
		return ""
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_Domain_Association
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoMepDiscovery == nil {
		var v bool = false
		t.AutoMepDiscovery = &v
	}
	if t.CcmInterval == 0 {
		t.CcmInterval = NokiaTypesEthCfm_CcmIntervalType_10s
	}
	if t.FacilityIdPermission == 0 {
		t.FacilityIdPermission = NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	t.CcmHoldTime.PopulateDefaults()
	for _, e := range t.BridgeIdentifier {
		e.PopulateDefaults()
	}
	for _, e := range t.RemoteMep {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthCfm_Domain_Association struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_Domain_Association"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_Domain_Association) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_Domain_Association.
func (*NokiaConf_Configure_EthCfm_Domain_Association) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier represents the /nokia-conf/configure/eth-cfm/domain/association/bridge-identifier YANG schema element.
type NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier struct {
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BridgeName         *string                                     `path:"bridge-name" module:"nokia-conf"`
	IdPermission       E_NokiaTypesEthCfm_FacilityIdPermissionType `path:"id-permission" module:"nokia-conf"`
	MhfCreation        E_NokiaTypesEthCfm_TmnxMhfCreationType      `path:"mhf-creation" module:"nokia-conf"`
	MipLtrPriority     *uint8                                      `path:"mip-ltr-priority" module:"nokia-conf"`
	Vlan               *int32                                      `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBridgeName retrieves the value of the leaf BridgeName from the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeName is set, it can
// safely use t.GetBridgeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) GetBridgeName() string {
	if t == nil || t.BridgeName == nil {
		return ""
	}
	return *t.BridgeName
}

// GetIdPermission retrieves the value of the leaf IdPermission from the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdPermission is set, it can
// safely use t.GetIdPermission() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdPermission == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) GetIdPermission() E_NokiaTypesEthCfm_FacilityIdPermissionType {
	if t == nil || t.IdPermission == 0 {
		return NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	return t.IdPermission
}

// GetMhfCreation retrieves the value of the leaf MhfCreation from the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhfCreation is set, it can
// safely use t.GetMhfCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhfCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) GetMhfCreation() E_NokiaTypesEthCfm_TmnxMhfCreationType {
	if t == nil || t.MhfCreation == 0 {
		return NokiaTypesEthCfm_TmnxMhfCreationType_none
	}
	return t.MhfCreation
}

// GetMipLtrPriority retrieves the value of the leaf MipLtrPriority from the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MipLtrPriority is set, it can
// safely use t.GetMipLtrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MipLtrPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) GetMipLtrPriority() uint8 {
	if t == nil || t.MipLtrPriority == nil {
		return 7
	}
	return *t.MipLtrPriority
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) GetVlan() int32 {
	if t == nil || t.Vlan == nil {
		return 0
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdPermission == 0 {
		t.IdPermission = NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	if t.MhfCreation == 0 {
		t.MhfCreation = NokiaTypesEthCfm_TmnxMhfCreationType_none
	}
	if t.MipLtrPriority == nil {
		var v uint8 = 7
		t.MipLtrPriority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BridgeName == nil {
		return nil, fmt.Errorf("nil value for key BridgeName")
	}

	return map[string]interface{}{
		"bridge-name": *t.BridgeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier.
func (*NokiaConf_Configure_EthCfm_Domain_Association_BridgeIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime represents the /nokia-conf/configure/eth-cfm/domain/association/ccm-hold-time YANG schema element.
type NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime.
func (*NokiaConf_Configure_EthCfm_Domain_Association_CcmHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep represents the /nokia-conf/configure/eth-cfm/domain/association/remote-mep YANG schema element.
type NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	MepId              *uint16  `path:"mep-id" module:"nokia-conf"`
	RemoteMac          *string  `path:"remote-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetRemoteMac retrieves the value of the leaf RemoteMac from the NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteMac is set, it can
// safely use t.GetRemoteMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) GetRemoteMac() string {
	if t == nil || t.RemoteMac == nil {
		return ""
	}
	return *t.RemoteMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"mep-id": *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep.
func (*NokiaConf_Configure_EthCfm_Domain_Association_RemoteMep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing represents the /nokia-conf/configure/eth-ring YANG schema element.
type NokiaConf_Configure_EthRing struct {
	AdminState         E_NokiaTypesSros_AdminState                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CcmHoldTime        *NokiaConf_Configure_EthRing_CcmHoldTime     `path:"ccm-hold-time" module:"nokia-conf"`
	CompatibleVersion  *uint32                                      `path:"compatible-version" module:"nokia-conf"`
	Description        *string                                      `path:"description" module:"nokia-conf"`
	GuardTime          *uint32                                      `path:"guard-time" module:"nokia-conf"`
	NodeId             *string                                      `path:"node-id" module:"nokia-conf"`
	Path               map[string]*NokiaConf_Configure_EthRing_Path `path:"path" module:"nokia-conf"`
	RevertTime         *uint32                                      `path:"revert-time" module:"nokia-conf"`
	RingIndex          *uint32                                      `path:"ring-index" module:"nokia-conf"`
	RplNode            E_NokiaConf_Configure_EthRing_RplNode        `path:"rpl-node" module:"nokia-conf"`
	SubRing            *NokiaConf_Configure_EthRing_SubRing         `path:"sub-ring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing) IsYANGGoStruct() {}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_EthRing struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_EthRing) NewPath(PathIndex string) (*NokiaConf_Configure_EthRing_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_EthRing_Path)
	}

	key := PathIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_EthRing_Path{
		PathIndex: &PathIndex,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_EthRing struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_EthRing) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PathIndex = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_EthRing. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_EthRing) GetOrCreatePath(PathIndex string) *NokiaConf_Configure_EthRing_Path {

	key := PathIndex

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PathIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_EthRing. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_EthRing) GetPath(PathIndex string) *NokiaConf_Configure_EthRing_Path {

	if t == nil {
		return nil
	}

	key := PathIndex

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_EthRing. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_EthRing) DeletePath(PathIndex string) {
	key := PathIndex

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_EthRing_Path struct to the
// list Path of NokiaConf_Configure_EthRing. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthRing_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_EthRing) AppendPath(v *NokiaConf_Configure_EthRing_Path) error {
	if v.PathIndex == nil {
		return fmt.Errorf("invalid nil key received for PathIndex")
	}

	key := *v.PathIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_EthRing_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetOrCreateCcmHoldTime retrieves the value of the CcmHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing) GetOrCreateCcmHoldTime() *NokiaConf_Configure_EthRing_CcmHoldTime {
	if t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	t.CcmHoldTime = &NokiaConf_Configure_EthRing_CcmHoldTime{}
	return t.CcmHoldTime
}

// GetOrCreateSubRing retrieves the value of the SubRing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing) GetOrCreateSubRing() *NokiaConf_Configure_EthRing_SubRing {
	if t.SubRing != nil {
		return t.SubRing
	}
	t.SubRing = &NokiaConf_Configure_EthRing_SubRing{}
	return t.SubRing
}

// GetCcmHoldTime returns the value of the CcmHoldTime struct pointer
// from NokiaConf_Configure_EthRing. If the receiver or the field CcmHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing) GetCcmHoldTime() *NokiaConf_Configure_EthRing_CcmHoldTime {
	if t != nil && t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	return nil
}

// GetSubRing returns the value of the SubRing struct pointer
// from NokiaConf_Configure_EthRing. If the receiver or the field SubRing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing) GetSubRing() *NokiaConf_Configure_EthRing_SubRing {
	if t != nil && t.SubRing != nil {
		return t.SubRing
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCompatibleVersion retrieves the value of the leaf CompatibleVersion from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompatibleVersion is set, it can
// safely use t.GetCompatibleVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompatibleVersion == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetCompatibleVersion() uint32 {
	if t == nil || t.CompatibleVersion == nil {
		return 2
	}
	return *t.CompatibleVersion
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGuardTime retrieves the value of the leaf GuardTime from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GuardTime is set, it can
// safely use t.GetGuardTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GuardTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetGuardTime() uint32 {
	if t == nil || t.GuardTime == nil {
		return 5
	}
	return *t.GuardTime
}

// GetNodeId retrieves the value of the leaf NodeId from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeId is set, it can
// safely use t.GetNodeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetNodeId() string {
	if t == nil || t.NodeId == nil {
		return ""
	}
	return *t.NodeId
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetRevertTime() uint32 {
	if t == nil || t.RevertTime == nil {
		return 300
	}
	return *t.RevertTime
}

// GetRingIndex retrieves the value of the leaf RingIndex from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RingIndex is set, it can
// safely use t.GetRingIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RingIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetRingIndex() uint32 {
	if t == nil || t.RingIndex == nil {
		return 0
	}
	return *t.RingIndex
}

// GetRplNode retrieves the value of the leaf RplNode from the NokiaConf_Configure_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RplNode is set, it can
// safely use t.GetRplNode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RplNode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing) GetRplNode() E_NokiaConf_Configure_EthRing_RplNode {
	if t == nil || t.RplNode == 0 {
		return 0
	}
	return t.RplNode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CompatibleVersion == nil {
		var v uint32 = 2
		t.CompatibleVersion = &v
	}
	if t.GuardTime == nil {
		var v uint32 = 5
		t.GuardTime = &v
	}
	if t.RevertTime == nil {
		var v uint32 = 300
		t.RevertTime = &v
	}
	t.CcmHoldTime.PopulateDefaults()
	t.SubRing.PopulateDefaults()
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthRing struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthRing) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RingIndex == nil {
		return nil, fmt.Errorf("nil value for key RingIndex")
	}

	return map[string]interface{}{
		"ring-index": *t.RingIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing.
func (*NokiaConf_Configure_EthRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_CcmHoldTime represents the /nokia-conf/configure/eth-ring/ccm-hold-time YANG schema element.
type NokiaConf_Configure_EthRing_CcmHoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_CcmHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_CcmHoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_EthRing_CcmHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_CcmHoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_EthRing_CcmHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_CcmHoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 20
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_CcmHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_CcmHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Up == nil {
		var v uint32 = 20
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_CcmHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_CcmHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_CcmHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_CcmHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_CcmHoldTime.
func (*NokiaConf_Configure_EthRing_CcmHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path represents the /nokia-conf/configure/eth-ring/path YANG schema element.
type NokiaConf_Configure_EthRing_Path struct {
	AdminState         E_NokiaTypesSros_AdminState              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                  `path:"description" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_EthRing_Path_EthCfm `path:"eth-cfm" module:"nokia-conf"`
	PathIndex          *string                                  `path:"path-index" module:"nokia-conf"`
	PortAndRapsTag     *string                                  `path:"port-and-raps-tag" module:"nokia-conf"`
	RplEnd             *bool                                    `path:"rpl-end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path) IsYANGGoStruct() {}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_Path) GetOrCreateEthCfm() *NokiaConf_Configure_EthRing_Path_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_EthRing_Path_EthCfm{}
	return t.EthCfm
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_EthRing_Path. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_Path) GetEthCfm() *NokiaConf_Configure_EthRing_Path_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPathIndex retrieves the value of the leaf PathIndex from the NokiaConf_Configure_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathIndex is set, it can
// safely use t.GetPathIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path) GetPathIndex() string {
	if t == nil || t.PathIndex == nil {
		return ""
	}
	return *t.PathIndex
}

// GetPortAndRapsTag retrieves the value of the leaf PortAndRapsTag from the NokiaConf_Configure_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortAndRapsTag is set, it can
// safely use t.GetPortAndRapsTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortAndRapsTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path) GetPortAndRapsTag() string {
	if t == nil || t.PortAndRapsTag == nil {
		return ""
	}
	return *t.PortAndRapsTag
}

// GetRplEnd retrieves the value of the leaf RplEnd from the NokiaConf_Configure_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RplEnd is set, it can
// safely use t.GetRplEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RplEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path) GetRplEnd() bool {
	if t == nil || t.RplEnd == nil {
		return false
	}
	return *t.RplEnd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RplEnd == nil {
		var v bool = false
		t.RplEnd = &v
	}
	t.EthCfm.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthRing_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthRing_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathIndex == nil {
		return nil, fmt.Errorf("nil value for key PathIndex")
	}

	return map[string]interface{}{
		"path-index": *t.PathIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path.
func (*NokiaConf_Configure_EthRing_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm represents the /nokia-conf/configure/eth-ring/path/eth-cfm YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm struct {
	Mep map[NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key]*NokiaConf_Configure_EthRing_Path_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/eth-ring/path/eth-cfm.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_EthRing_Path_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key]*NokiaConf_Configure_EthRing_Path_EthCfm_Mep)
	}

	key := NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_EthRing_Path_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_EthRing_Path_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_EthRing_Path_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_EthRing_Path_EthCfm_Mep {

	key := NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_EthRing_Path_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_EthRing_Path_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_EthRing_Path_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_EthRing_Path_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_EthRing_Path_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthRing_Path_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) AppendMep(v *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Key]*NokiaConf_Configure_EthRing_Path_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm.
func (*NokiaConf_Configure_EthRing_Path_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep represents the /nokia-conf/configure/eth-ring/path/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                          `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                         `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                        `path:"ccm-padding-size" module:"nokia-conf"`
	ControlMep           *bool                                                          `path:"control-mep" module:"nokia-conf"`
	Description          *string                                                        `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	Grace                *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                          `path:"install-mep" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                         `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                        `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                        `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                        `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                        `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_EthRing_Path_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_EthRing_Path_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_EthRing_Path_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetGrace() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetControlMep retrieves the value of the leaf ControlMep from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlMep is set, it can
// safely use t.GetControlMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetControlMep() bool {
	if t == nil || t.ControlMep == nil {
		return false
	}
	return *t.ControlMep
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_all_def
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.ControlMep == nil {
		var v bool = false
		t.ControlMep = &v
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_all_def
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_EthRing_Path_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm_Mep.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/eth-ring/path/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest represents the /nokia-conf/configure/eth-ring/path/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                          `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/eth-ring/path/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                     `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace represents the /nokia-conf/configure/eth-ring/path/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/eth-ring/path/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/eth-ring/path/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_SubRing represents the /nokia-conf/configure/eth-ring/sub-ring YANG schema element.
type NokiaConf_Configure_EthRing_SubRing struct {
	Interconnect *NokiaConf_Configure_EthRing_SubRing_Interconnect `path:"interconnect" module:"nokia-conf"`
	Type         E_NokiaConf_Configure_EthRing_SubRing_Type        `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_SubRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_SubRing) IsYANGGoStruct() {}

// GetOrCreateInterconnect retrieves the value of the Interconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_EthRing_SubRing) GetOrCreateInterconnect() *NokiaConf_Configure_EthRing_SubRing_Interconnect {
	if t.Interconnect != nil {
		return t.Interconnect
	}
	t.Interconnect = &NokiaConf_Configure_EthRing_SubRing_Interconnect{}
	return t.Interconnect
}

// GetInterconnect returns the value of the Interconnect struct pointer
// from NokiaConf_Configure_EthRing_SubRing. If the receiver or the field Interconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_EthRing_SubRing) GetInterconnect() *NokiaConf_Configure_EthRing_SubRing_Interconnect {
	if t != nil && t.Interconnect != nil {
		return t.Interconnect
	}
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_EthRing_SubRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_SubRing) GetType() E_NokiaConf_Configure_EthRing_SubRing_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_SubRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_SubRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interconnect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_SubRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_SubRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_SubRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_SubRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_SubRing.
func (*NokiaConf_Configure_EthRing_SubRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_EthRing_SubRing_Interconnect represents the /nokia-conf/configure/eth-ring/sub-ring/interconnect YANG schema element.
type NokiaConf_Configure_EthRing_SubRing_Interconnect struct {
	PropagateTopologyChange *bool     `path:"propagate-topology-change" module:"nokia-conf"`
	RingId                  *uint32   `path:"ring-id" module:"nokia-conf"`
	Vpls                    YANGEmpty `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_EthRing_SubRing_Interconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_EthRing_SubRing_Interconnect) IsYANGGoStruct() {}

// GetPropagateTopologyChange retrieves the value of the leaf PropagateTopologyChange from the NokiaConf_Configure_EthRing_SubRing_Interconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateTopologyChange is set, it can
// safely use t.GetPropagateTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateTopologyChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_SubRing_Interconnect) GetPropagateTopologyChange() bool {
	if t == nil || t.PropagateTopologyChange == nil {
		return false
	}
	return *t.PropagateTopologyChange
}

// GetRingId retrieves the value of the leaf RingId from the NokiaConf_Configure_EthRing_SubRing_Interconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RingId is set, it can
// safely use t.GetRingId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RingId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_SubRing_Interconnect) GetRingId() uint32 {
	if t == nil || t.RingId == nil {
		return 0
	}
	return *t.RingId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_EthRing_SubRing_Interconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_EthRing_SubRing_Interconnect) GetVpls() YANGEmpty {
	if t == nil || t.Vpls == false {
		return false
	}
	return t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_EthRing_SubRing_Interconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_EthRing_SubRing_Interconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PropagateTopologyChange == nil {
		var v bool = false
		t.PropagateTopologyChange = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_SubRing_Interconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_EthRing_SubRing_Interconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_EthRing_SubRing_Interconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_EthRing_SubRing_Interconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_EthRing_SubRing_Interconnect.
func (*NokiaConf_Configure_EthRing_SubRing_Interconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter represents the /nokia-conf/configure/filter YANG schema element.
type NokiaConf_Configure_Filter struct {
	ApplyGroups           []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	DhcpFilter            map[uint32]*NokiaConf_Configure_Filter_DhcpFilter            `path:"dhcp-filter" module:"nokia-conf"`
	Dhcp6Filter           map[uint32]*NokiaConf_Configure_Filter_Dhcp6Filter           `path:"dhcp6-filter" module:"nokia-conf"`
	GreTunnelTemplate     map[string]*NokiaConf_Configure_Filter_GreTunnelTemplate     `path:"gre-tunnel-template" module:"nokia-conf"`
	IpException           map[string]*NokiaConf_Configure_Filter_IpException           `path:"ip-exception" module:"nokia-conf"`
	IpFilter              map[string]*NokiaConf_Configure_Filter_IpFilter              `path:"ip-filter" module:"nokia-conf"`
	Ipv6Exception         map[string]*NokiaConf_Configure_Filter_Ipv6Exception         `path:"ipv6-exception" module:"nokia-conf"`
	Ipv6Filter            map[string]*NokiaConf_Configure_Filter_Ipv6Filter            `path:"ipv6-filter" module:"nokia-conf"`
	Log                   map[uint32]*NokiaConf_Configure_Filter_Log                   `path:"log" module:"nokia-conf"`
	MacFilter             map[string]*NokiaConf_Configure_Filter_MacFilter             `path:"mac-filter" module:"nokia-conf"`
	MatchList             *NokiaConf_Configure_Filter_MatchList                        `path:"match-list" module:"nokia-conf"`
	MdAutoId              *NokiaConf_Configure_Filter_MdAutoId                         `path:"md-auto-id" module:"nokia-conf"`
	RedirectPolicy        map[string]*NokiaConf_Configure_Filter_RedirectPolicy        `path:"redirect-policy" module:"nokia-conf"`
	RedirectPolicyBinding map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding `path:"redirect-policy-binding" module:"nokia-conf"`
	SystemFilter          *NokiaConf_Configure_Filter_SystemFilter                     `path:"system-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter) IsYANGGoStruct() {}

// NewDhcpFilter creates a new entry in the DhcpFilter list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewDhcpFilter(FilterId uint32) (*NokiaConf_Configure_Filter_DhcpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DhcpFilter == nil {
		t.DhcpFilter = make(map[uint32]*NokiaConf_Configure_Filter_DhcpFilter)
	}

	key := FilterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DhcpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DhcpFilter", key)
	}

	t.DhcpFilter[key] = &NokiaConf_Configure_Filter_DhcpFilter{
		FilterId: &FilterId,
	}

	return t.DhcpFilter[key], nil
}

// RenameDhcpFilter renames an entry in the list DhcpFilter within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameDhcpFilter(oldK, newK uint32) error {
	if _, ok := t.DhcpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in DhcpFilter", newK)
	}

	e, ok := t.DhcpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DhcpFilter", oldK)
	}
	e.FilterId = &newK

	t.DhcpFilter[newK] = e
	delete(t.DhcpFilter, oldK)
	return nil
}

// GetOrCreateDhcpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateDhcpFilter(FilterId uint32) *NokiaConf_Configure_Filter_DhcpFilter {

	key := FilterId

	if v, ok := t.DhcpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpFilter(FilterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpFilter got unexpected error: %v", err))
	}
	return v
}

// GetDhcpFilter retrieves the value with the specified key from
// the DhcpFilter map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetDhcpFilter(FilterId uint32) *NokiaConf_Configure_Filter_DhcpFilter {

	if t == nil {
		return nil
	}

	key := FilterId

	if lm, ok := t.DhcpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteDhcpFilter(FilterId uint32) {
	key := FilterId

	delete(t.DhcpFilter, key)
}

// AppendDhcpFilter appends the supplied NokiaConf_Configure_Filter_DhcpFilter struct to the
// list DhcpFilter of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_DhcpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendDhcpFilter(v *NokiaConf_Configure_Filter_DhcpFilter) error {
	if v.FilterId == nil {
		return fmt.Errorf("invalid nil key received for FilterId")
	}

	key := *v.FilterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DhcpFilter == nil {
		t.DhcpFilter = make(map[uint32]*NokiaConf_Configure_Filter_DhcpFilter)
	}

	if _, ok := t.DhcpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list DhcpFilter %v", key)
	}

	t.DhcpFilter[key] = v
	return nil
}

// NewDhcp6Filter creates a new entry in the Dhcp6Filter list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewDhcp6Filter(FilterId uint32) (*NokiaConf_Configure_Filter_Dhcp6Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6Filter == nil {
		t.Dhcp6Filter = make(map[uint32]*NokiaConf_Configure_Filter_Dhcp6Filter)
	}

	key := FilterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcp6Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcp6Filter", key)
	}

	t.Dhcp6Filter[key] = &NokiaConf_Configure_Filter_Dhcp6Filter{
		FilterId: &FilterId,
	}

	return t.Dhcp6Filter[key], nil
}

// RenameDhcp6Filter renames an entry in the list Dhcp6Filter within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameDhcp6Filter(oldK, newK uint32) error {
	if _, ok := t.Dhcp6Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcp6Filter", newK)
	}

	e, ok := t.Dhcp6Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcp6Filter", oldK)
	}
	e.FilterId = &newK

	t.Dhcp6Filter[newK] = e
	delete(t.Dhcp6Filter, oldK)
	return nil
}

// GetOrCreateDhcp6Filter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateDhcp6Filter(FilterId uint32) *NokiaConf_Configure_Filter_Dhcp6Filter {

	key := FilterId

	if v, ok := t.Dhcp6Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcp6Filter(FilterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcp6Filter got unexpected error: %v", err))
	}
	return v
}

// GetDhcp6Filter retrieves the value with the specified key from
// the Dhcp6Filter map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetDhcp6Filter(FilterId uint32) *NokiaConf_Configure_Filter_Dhcp6Filter {

	if t == nil {
		return nil
	}

	key := FilterId

	if lm, ok := t.Dhcp6Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcp6Filter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteDhcp6Filter(FilterId uint32) {
	key := FilterId

	delete(t.Dhcp6Filter, key)
}

// AppendDhcp6Filter appends the supplied NokiaConf_Configure_Filter_Dhcp6Filter struct to the
// list Dhcp6Filter of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Dhcp6Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendDhcp6Filter(v *NokiaConf_Configure_Filter_Dhcp6Filter) error {
	if v.FilterId == nil {
		return fmt.Errorf("invalid nil key received for FilterId")
	}

	key := *v.FilterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6Filter == nil {
		t.Dhcp6Filter = make(map[uint32]*NokiaConf_Configure_Filter_Dhcp6Filter)
	}

	if _, ok := t.Dhcp6Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcp6Filter %v", key)
	}

	t.Dhcp6Filter[key] = v
	return nil
}

// NewGreTunnelTemplate creates a new entry in the GreTunnelTemplate list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewGreTunnelTemplate(GreTunnelTemplateName string) (*NokiaConf_Configure_Filter_GreTunnelTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GreTunnelTemplate == nil {
		t.GreTunnelTemplate = make(map[string]*NokiaConf_Configure_Filter_GreTunnelTemplate)
	}

	key := GreTunnelTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GreTunnelTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GreTunnelTemplate", key)
	}

	t.GreTunnelTemplate[key] = &NokiaConf_Configure_Filter_GreTunnelTemplate{
		GreTunnelTemplateName: &GreTunnelTemplateName,
	}

	return t.GreTunnelTemplate[key], nil
}

// RenameGreTunnelTemplate renames an entry in the list GreTunnelTemplate within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameGreTunnelTemplate(oldK, newK string) error {
	if _, ok := t.GreTunnelTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in GreTunnelTemplate", newK)
	}

	e, ok := t.GreTunnelTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GreTunnelTemplate", oldK)
	}
	e.GreTunnelTemplateName = &newK

	t.GreTunnelTemplate[newK] = e
	delete(t.GreTunnelTemplate, oldK)
	return nil
}

// GetOrCreateGreTunnelTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateGreTunnelTemplate(GreTunnelTemplateName string) *NokiaConf_Configure_Filter_GreTunnelTemplate {

	key := GreTunnelTemplateName

	if v, ok := t.GreTunnelTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGreTunnelTemplate(GreTunnelTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGreTunnelTemplate got unexpected error: %v", err))
	}
	return v
}

// GetGreTunnelTemplate retrieves the value with the specified key from
// the GreTunnelTemplate map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetGreTunnelTemplate(GreTunnelTemplateName string) *NokiaConf_Configure_Filter_GreTunnelTemplate {

	if t == nil {
		return nil
	}

	key := GreTunnelTemplateName

	if lm, ok := t.GreTunnelTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteGreTunnelTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteGreTunnelTemplate(GreTunnelTemplateName string) {
	key := GreTunnelTemplateName

	delete(t.GreTunnelTemplate, key)
}

// AppendGreTunnelTemplate appends the supplied NokiaConf_Configure_Filter_GreTunnelTemplate struct to the
// list GreTunnelTemplate of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_GreTunnelTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendGreTunnelTemplate(v *NokiaConf_Configure_Filter_GreTunnelTemplate) error {
	if v.GreTunnelTemplateName == nil {
		return fmt.Errorf("invalid nil key received for GreTunnelTemplateName")
	}

	key := *v.GreTunnelTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GreTunnelTemplate == nil {
		t.GreTunnelTemplate = make(map[string]*NokiaConf_Configure_Filter_GreTunnelTemplate)
	}

	if _, ok := t.GreTunnelTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list GreTunnelTemplate %v", key)
	}

	t.GreTunnelTemplate[key] = v
	return nil
}

// NewIpException creates a new entry in the IpException list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewIpException(FilterName string) (*NokiaConf_Configure_Filter_IpException, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpException == nil {
		t.IpException = make(map[string]*NokiaConf_Configure_Filter_IpException)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpException[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpException", key)
	}

	t.IpException[key] = &NokiaConf_Configure_Filter_IpException{
		FilterName: &FilterName,
	}

	return t.IpException[key], nil
}

// RenameIpException renames an entry in the list IpException within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameIpException(oldK, newK string) error {
	if _, ok := t.IpException[newK]; ok {
		return fmt.Errorf("key %v already exists in IpException", newK)
	}

	e, ok := t.IpException[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpException", oldK)
	}
	e.FilterName = &newK

	t.IpException[newK] = e
	delete(t.IpException, oldK)
	return nil
}

// GetOrCreateIpException retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateIpException(FilterName string) *NokiaConf_Configure_Filter_IpException {

	key := FilterName

	if v, ok := t.IpException[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpException(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpException got unexpected error: %v", err))
	}
	return v
}

// GetIpException retrieves the value with the specified key from
// the IpException map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetIpException(FilterName string) *NokiaConf_Configure_Filter_IpException {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.IpException[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpException deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteIpException(FilterName string) {
	key := FilterName

	delete(t.IpException, key)
}

// AppendIpException appends the supplied NokiaConf_Configure_Filter_IpException struct to the
// list IpException of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_IpException already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendIpException(v *NokiaConf_Configure_Filter_IpException) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpException == nil {
		t.IpException = make(map[string]*NokiaConf_Configure_Filter_IpException)
	}

	if _, ok := t.IpException[key]; ok {
		return fmt.Errorf("duplicate key for list IpException %v", key)
	}

	t.IpException[key] = v
	return nil
}

// NewIpFilter creates a new entry in the IpFilter list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewIpFilter(FilterName string) (*NokiaConf_Configure_Filter_IpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpFilter == nil {
		t.IpFilter = make(map[string]*NokiaConf_Configure_Filter_IpFilter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpFilter", key)
	}

	t.IpFilter[key] = &NokiaConf_Configure_Filter_IpFilter{
		FilterName: &FilterName,
	}

	return t.IpFilter[key], nil
}

// RenameIpFilter renames an entry in the list IpFilter within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameIpFilter(oldK, newK string) error {
	if _, ok := t.IpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in IpFilter", newK)
	}

	e, ok := t.IpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpFilter", oldK)
	}
	e.FilterName = &newK

	t.IpFilter[newK] = e
	delete(t.IpFilter, oldK)
	return nil
}

// GetOrCreateIpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateIpFilter(FilterName string) *NokiaConf_Configure_Filter_IpFilter {

	key := FilterName

	if v, ok := t.IpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpFilter got unexpected error: %v", err))
	}
	return v
}

// GetIpFilter retrieves the value with the specified key from
// the IpFilter map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetIpFilter(FilterName string) *NokiaConf_Configure_Filter_IpFilter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.IpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteIpFilter(FilterName string) {
	key := FilterName

	delete(t.IpFilter, key)
}

// AppendIpFilter appends the supplied NokiaConf_Configure_Filter_IpFilter struct to the
// list IpFilter of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_IpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendIpFilter(v *NokiaConf_Configure_Filter_IpFilter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpFilter == nil {
		t.IpFilter = make(map[string]*NokiaConf_Configure_Filter_IpFilter)
	}

	if _, ok := t.IpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list IpFilter %v", key)
	}

	t.IpFilter[key] = v
	return nil
}

// NewIpv6Exception creates a new entry in the Ipv6Exception list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewIpv6Exception(FilterName string) (*NokiaConf_Configure_Filter_Ipv6Exception, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Exception == nil {
		t.Ipv6Exception = make(map[string]*NokiaConf_Configure_Filter_Ipv6Exception)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Exception[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Exception", key)
	}

	t.Ipv6Exception[key] = &NokiaConf_Configure_Filter_Ipv6Exception{
		FilterName: &FilterName,
	}

	return t.Ipv6Exception[key], nil
}

// RenameIpv6Exception renames an entry in the list Ipv6Exception within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameIpv6Exception(oldK, newK string) error {
	if _, ok := t.Ipv6Exception[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Exception", newK)
	}

	e, ok := t.Ipv6Exception[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Exception", oldK)
	}
	e.FilterName = &newK

	t.Ipv6Exception[newK] = e
	delete(t.Ipv6Exception, oldK)
	return nil
}

// GetOrCreateIpv6Exception retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateIpv6Exception(FilterName string) *NokiaConf_Configure_Filter_Ipv6Exception {

	key := FilterName

	if v, ok := t.Ipv6Exception[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Exception(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Exception got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Exception retrieves the value with the specified key from
// the Ipv6Exception map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetIpv6Exception(FilterName string) *NokiaConf_Configure_Filter_Ipv6Exception {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.Ipv6Exception[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Exception deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteIpv6Exception(FilterName string) {
	key := FilterName

	delete(t.Ipv6Exception, key)
}

// AppendIpv6Exception appends the supplied NokiaConf_Configure_Filter_Ipv6Exception struct to the
// list Ipv6Exception of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Ipv6Exception already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendIpv6Exception(v *NokiaConf_Configure_Filter_Ipv6Exception) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Exception == nil {
		t.Ipv6Exception = make(map[string]*NokiaConf_Configure_Filter_Ipv6Exception)
	}

	if _, ok := t.Ipv6Exception[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Exception %v", key)
	}

	t.Ipv6Exception[key] = v
	return nil
}

// NewIpv6Filter creates a new entry in the Ipv6Filter list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewIpv6Filter(FilterName string) (*NokiaConf_Configure_Filter_Ipv6Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*NokiaConf_Configure_Filter_Ipv6Filter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Filter", key)
	}

	t.Ipv6Filter[key] = &NokiaConf_Configure_Filter_Ipv6Filter{
		FilterName: &FilterName,
	}

	return t.Ipv6Filter[key], nil
}

// RenameIpv6Filter renames an entry in the list Ipv6Filter within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameIpv6Filter(oldK, newK string) error {
	if _, ok := t.Ipv6Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Filter", newK)
	}

	e, ok := t.Ipv6Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Filter", oldK)
	}
	e.FilterName = &newK

	t.Ipv6Filter[newK] = e
	delete(t.Ipv6Filter, oldK)
	return nil
}

// GetOrCreateIpv6Filter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateIpv6Filter(FilterName string) *NokiaConf_Configure_Filter_Ipv6Filter {

	key := FilterName

	if v, ok := t.Ipv6Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Filter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Filter got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Filter retrieves the value with the specified key from
// the Ipv6Filter map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetIpv6Filter(FilterName string) *NokiaConf_Configure_Filter_Ipv6Filter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.Ipv6Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Filter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteIpv6Filter(FilterName string) {
	key := FilterName

	delete(t.Ipv6Filter, key)
}

// AppendIpv6Filter appends the supplied NokiaConf_Configure_Filter_Ipv6Filter struct to the
// list Ipv6Filter of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Ipv6Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendIpv6Filter(v *NokiaConf_Configure_Filter_Ipv6Filter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*NokiaConf_Configure_Filter_Ipv6Filter)
	}

	if _, ok := t.Ipv6Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Filter %v", key)
	}

	t.Ipv6Filter[key] = v
	return nil
}

// NewLog creates a new entry in the Log list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewLog(LogId uint32) (*NokiaConf_Configure_Filter_Log, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Log == nil {
		t.Log = make(map[uint32]*NokiaConf_Configure_Filter_Log)
	}

	key := LogId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Log[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Log", key)
	}

	t.Log[key] = &NokiaConf_Configure_Filter_Log{
		LogId: &LogId,
	}

	return t.Log[key], nil
}

// RenameLog renames an entry in the list Log within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameLog(oldK, newK uint32) error {
	if _, ok := t.Log[newK]; ok {
		return fmt.Errorf("key %v already exists in Log", newK)
	}

	e, ok := t.Log[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Log", oldK)
	}
	e.LogId = &newK

	t.Log[newK] = e
	delete(t.Log, oldK)
	return nil
}

// GetOrCreateLog retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateLog(LogId uint32) *NokiaConf_Configure_Filter_Log {

	key := LogId

	if v, ok := t.Log[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLog(LogId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLog got unexpected error: %v", err))
	}
	return v
}

// GetLog retrieves the value with the specified key from
// the Log map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetLog(LogId uint32) *NokiaConf_Configure_Filter_Log {

	if t == nil {
		return nil
	}

	key := LogId

	if lm, ok := t.Log[key]; ok {
		return lm
	}
	return nil
}

// DeleteLog deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteLog(LogId uint32) {
	key := LogId

	delete(t.Log, key)
}

// AppendLog appends the supplied NokiaConf_Configure_Filter_Log struct to the
// list Log of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Log already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendLog(v *NokiaConf_Configure_Filter_Log) error {
	if v.LogId == nil {
		return fmt.Errorf("invalid nil key received for LogId")
	}

	key := *v.LogId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Log == nil {
		t.Log = make(map[uint32]*NokiaConf_Configure_Filter_Log)
	}

	if _, ok := t.Log[key]; ok {
		return fmt.Errorf("duplicate key for list Log %v", key)
	}

	t.Log[key] = v
	return nil
}

// NewMacFilter creates a new entry in the MacFilter list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewMacFilter(FilterName string) (*NokiaConf_Configure_Filter_MacFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacFilter == nil {
		t.MacFilter = make(map[string]*NokiaConf_Configure_Filter_MacFilter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacFilter", key)
	}

	t.MacFilter[key] = &NokiaConf_Configure_Filter_MacFilter{
		FilterName: &FilterName,
	}

	return t.MacFilter[key], nil
}

// RenameMacFilter renames an entry in the list MacFilter within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameMacFilter(oldK, newK string) error {
	if _, ok := t.MacFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in MacFilter", newK)
	}

	e, ok := t.MacFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacFilter", oldK)
	}
	e.FilterName = &newK

	t.MacFilter[newK] = e
	delete(t.MacFilter, oldK)
	return nil
}

// GetOrCreateMacFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateMacFilter(FilterName string) *NokiaConf_Configure_Filter_MacFilter {

	key := FilterName

	if v, ok := t.MacFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacFilter got unexpected error: %v", err))
	}
	return v
}

// GetMacFilter retrieves the value with the specified key from
// the MacFilter map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetMacFilter(FilterName string) *NokiaConf_Configure_Filter_MacFilter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.MacFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteMacFilter(FilterName string) {
	key := FilterName

	delete(t.MacFilter, key)
}

// AppendMacFilter appends the supplied NokiaConf_Configure_Filter_MacFilter struct to the
// list MacFilter of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MacFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendMacFilter(v *NokiaConf_Configure_Filter_MacFilter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacFilter == nil {
		t.MacFilter = make(map[string]*NokiaConf_Configure_Filter_MacFilter)
	}

	if _, ok := t.MacFilter[key]; ok {
		return fmt.Errorf("duplicate key for list MacFilter %v", key)
	}

	t.MacFilter[key] = v
	return nil
}

// NewRedirectPolicy creates a new entry in the RedirectPolicy list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewRedirectPolicy(RedirectPolicyName string) (*NokiaConf_Configure_Filter_RedirectPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicy == nil {
		t.RedirectPolicy = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicy)
	}

	key := RedirectPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedirectPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedirectPolicy", key)
	}

	t.RedirectPolicy[key] = &NokiaConf_Configure_Filter_RedirectPolicy{
		RedirectPolicyName: &RedirectPolicyName,
	}

	return t.RedirectPolicy[key], nil
}

// RenameRedirectPolicy renames an entry in the list RedirectPolicy within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameRedirectPolicy(oldK, newK string) error {
	if _, ok := t.RedirectPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RedirectPolicy", newK)
	}

	e, ok := t.RedirectPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedirectPolicy", oldK)
	}
	e.RedirectPolicyName = &newK

	t.RedirectPolicy[newK] = e
	delete(t.RedirectPolicy, oldK)
	return nil
}

// GetOrCreateRedirectPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateRedirectPolicy(RedirectPolicyName string) *NokiaConf_Configure_Filter_RedirectPolicy {

	key := RedirectPolicyName

	if v, ok := t.RedirectPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedirectPolicy(RedirectPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedirectPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRedirectPolicy retrieves the value with the specified key from
// the RedirectPolicy map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetRedirectPolicy(RedirectPolicyName string) *NokiaConf_Configure_Filter_RedirectPolicy {

	if t == nil {
		return nil
	}

	key := RedirectPolicyName

	if lm, ok := t.RedirectPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedirectPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteRedirectPolicy(RedirectPolicyName string) {
	key := RedirectPolicyName

	delete(t.RedirectPolicy, key)
}

// AppendRedirectPolicy appends the supplied NokiaConf_Configure_Filter_RedirectPolicy struct to the
// list RedirectPolicy of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_RedirectPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendRedirectPolicy(v *NokiaConf_Configure_Filter_RedirectPolicy) error {
	if v.RedirectPolicyName == nil {
		return fmt.Errorf("invalid nil key received for RedirectPolicyName")
	}

	key := *v.RedirectPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicy == nil {
		t.RedirectPolicy = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicy)
	}

	if _, ok := t.RedirectPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RedirectPolicy %v", key)
	}

	t.RedirectPolicy[key] = v
	return nil
}

// NewRedirectPolicyBinding creates a new entry in the RedirectPolicyBinding list of the
// NokiaConf_Configure_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter) NewRedirectPolicyBinding(BindingName string) (*NokiaConf_Configure_Filter_RedirectPolicyBinding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicyBinding == nil {
		t.RedirectPolicyBinding = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding)
	}

	key := BindingName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedirectPolicyBinding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedirectPolicyBinding", key)
	}

	t.RedirectPolicyBinding[key] = &NokiaConf_Configure_Filter_RedirectPolicyBinding{
		BindingName: &BindingName,
	}

	return t.RedirectPolicyBinding[key], nil
}

// RenameRedirectPolicyBinding renames an entry in the list RedirectPolicyBinding within
// the NokiaConf_Configure_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter) RenameRedirectPolicyBinding(oldK, newK string) error {
	if _, ok := t.RedirectPolicyBinding[newK]; ok {
		return fmt.Errorf("key %v already exists in RedirectPolicyBinding", newK)
	}

	e, ok := t.RedirectPolicyBinding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedirectPolicyBinding", oldK)
	}
	e.BindingName = &newK

	t.RedirectPolicyBinding[newK] = e
	delete(t.RedirectPolicyBinding, oldK)
	return nil
}

// GetOrCreateRedirectPolicyBinding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter) GetOrCreateRedirectPolicyBinding(BindingName string) *NokiaConf_Configure_Filter_RedirectPolicyBinding {

	key := BindingName

	if v, ok := t.RedirectPolicyBinding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedirectPolicyBinding(BindingName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedirectPolicyBinding got unexpected error: %v", err))
	}
	return v
}

// GetRedirectPolicyBinding retrieves the value with the specified key from
// the RedirectPolicyBinding map field of NokiaConf_Configure_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter) GetRedirectPolicyBinding(BindingName string) *NokiaConf_Configure_Filter_RedirectPolicyBinding {

	if t == nil {
		return nil
	}

	key := BindingName

	if lm, ok := t.RedirectPolicyBinding[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedirectPolicyBinding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter) DeleteRedirectPolicyBinding(BindingName string) {
	key := BindingName

	delete(t.RedirectPolicyBinding, key)
}

// AppendRedirectPolicyBinding appends the supplied NokiaConf_Configure_Filter_RedirectPolicyBinding struct to the
// list RedirectPolicyBinding of NokiaConf_Configure_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_RedirectPolicyBinding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter) AppendRedirectPolicyBinding(v *NokiaConf_Configure_Filter_RedirectPolicyBinding) error {
	if v.BindingName == nil {
		return fmt.Errorf("invalid nil key received for BindingName")
	}

	key := *v.BindingName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicyBinding == nil {
		t.RedirectPolicyBinding = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding)
	}

	if _, ok := t.RedirectPolicyBinding[key]; ok {
		return fmt.Errorf("duplicate key for list RedirectPolicyBinding %v", key)
	}

	t.RedirectPolicyBinding[key] = v
	return nil
}

// GetOrCreateMatchList retrieves the value of the MatchList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter) GetOrCreateMatchList() *NokiaConf_Configure_Filter_MatchList {
	if t.MatchList != nil {
		return t.MatchList
	}
	t.MatchList = &NokiaConf_Configure_Filter_MatchList{}
	return t.MatchList
}

// GetOrCreateMdAutoId retrieves the value of the MdAutoId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter) GetOrCreateMdAutoId() *NokiaConf_Configure_Filter_MdAutoId {
	if t.MdAutoId != nil {
		return t.MdAutoId
	}
	t.MdAutoId = &NokiaConf_Configure_Filter_MdAutoId{}
	return t.MdAutoId
}

// GetOrCreateSystemFilter retrieves the value of the SystemFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter) GetOrCreateSystemFilter() *NokiaConf_Configure_Filter_SystemFilter {
	if t.SystemFilter != nil {
		return t.SystemFilter
	}
	t.SystemFilter = &NokiaConf_Configure_Filter_SystemFilter{}
	return t.SystemFilter
}

// GetMatchList returns the value of the MatchList struct pointer
// from NokiaConf_Configure_Filter. If the receiver or the field MatchList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter) GetMatchList() *NokiaConf_Configure_Filter_MatchList {
	if t != nil && t.MatchList != nil {
		return t.MatchList
	}
	return nil
}

// GetMdAutoId returns the value of the MdAutoId struct pointer
// from NokiaConf_Configure_Filter. If the receiver or the field MdAutoId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter) GetMdAutoId() *NokiaConf_Configure_Filter_MdAutoId {
	if t != nil && t.MdAutoId != nil {
		return t.MdAutoId
	}
	return nil
}

// GetSystemFilter returns the value of the SystemFilter struct pointer
// from NokiaConf_Configure_Filter. If the receiver or the field SystemFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter) GetSystemFilter() *NokiaConf_Configure_Filter_SystemFilter {
	if t != nil && t.SystemFilter != nil {
		return t.SystemFilter
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MatchList.PopulateDefaults()
	t.MdAutoId.PopulateDefaults()
	t.SystemFilter.PopulateDefaults()
	for _, e := range t.DhcpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcp6Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.GreTunnelTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.IpException {
		e.PopulateDefaults()
	}
	for _, e := range t.IpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Exception {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.Log {
		e.PopulateDefaults()
	}
	for _, e := range t.MacFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.RedirectPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RedirectPolicyBinding {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter.
func (*NokiaConf_Configure_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter represents the /nokia-conf/configure/filter/dhcp6-filter YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction    `path:"default-action" module:"nokia-conf" yangPresence:"true"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Filter_Dhcp6Filter_Entry `path:"entry" module:"nokia-conf"`
	FilterId           *uint32                                                  `path:"filter-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Filter_Dhcp6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_Dhcp6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Filter_Dhcp6Filter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Filter_Dhcp6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Dhcp6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Filter_Dhcp6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Filter_Dhcp6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetEntry(EntryId uint32) *NokiaConf_Configure_Filter_Dhcp6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Dhcp6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Filter_Dhcp6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Filter_Dhcp6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Dhcp6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) AppendEntry(v *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_Dhcp6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetOrCreateDefaultAction() *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Filter_Dhcp6Filter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetDefaultAction() *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Dhcp6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Dhcp6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_Dhcp6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Filter_Dhcp6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Dhcp6Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterId == nil {
		return nil, fmt.Errorf("nil value for key FilterId")
	}

	return map[string]interface{}{
		"filter-id": *t.FilterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter.
func (*NokiaConf_Configure_Filter_Dhcp6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction represents the /nokia-conf/configure/filter/dhcp6-filter/default-action YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction struct {
	BypassHostCreation *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation `path:"bypass-host-creation" module:"nokia-conf" yangPresence:"true"`
	Drop               YANGEmpty                                                                `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) IsYANGGoStruct() {}

// GetOrCreateBypassHostCreation retrieves the value of the BypassHostCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) GetOrCreateBypassHostCreation() *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation {
	if t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	t.BypassHostCreation = &NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation{}
	return t.BypassHostCreation
}

// GetBypassHostCreation returns the value of the BypassHostCreation struct pointer
// from NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction. If the receiver or the field BypassHostCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) GetBypassHostCreation() *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation {
	if t != nil && t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BypassHostCreation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation represents the /nokia-conf/configure/filter/dhcp6-filter/default-action/bypass-host-creation YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation struct {
	Na *bool `path:"na" module:"nokia-conf"`
	Pd *bool `path:"pd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) IsYANGGoStruct() {}

// GetNa retrieves the value of the leaf Na from the NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Na is set, it can
// safely use t.GetNa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) GetNa() bool {
	if t == nil || t.Na == nil {
		return true
	}
	return *t.Na
}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Na == nil {
		var v bool = true
		t.Na = &v
	}
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter_Entry represents the /nokia-conf/configure/filter/dhcp6-filter/entry YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter_Entry struct {
	Action             *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action `path:"action" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                              `path:"entry-id" module:"nokia-conf"`
	Option             *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option `path:"option" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) GetOrCreateAction() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) GetOrCreateOption() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option{}
	return t.Option
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Filter_Dhcp6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) GetAction() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Filter_Dhcp6Filter_Entry. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) GetOption() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Option.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Dhcp6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter_Entry.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action represents the /nokia-conf/configure/filter/dhcp6-filter/entry/action YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action struct {
	BypassHostCreation *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation `path:"bypass-host-creation" module:"nokia-conf" yangPresence:"true"`
	Drop               YANGEmpty                                                               `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateBypassHostCreation retrieves the value of the BypassHostCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) GetOrCreateBypassHostCreation() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation {
	if t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	t.BypassHostCreation = &NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation{}
	return t.BypassHostCreation
}

// GetBypassHostCreation returns the value of the BypassHostCreation struct pointer
// from NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action. If the receiver or the field BypassHostCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) GetBypassHostCreation() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation {
	if t != nil && t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BypassHostCreation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation represents the /nokia-conf/configure/filter/dhcp6-filter/entry/action/bypass-host-creation YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation struct {
	Na *bool `path:"na" module:"nokia-conf"`
	Pd *bool `path:"pd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) IsYANGGoStruct() {}

// GetNa retrieves the value of the leaf Na from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Na is set, it can
// safely use t.GetNa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) GetNa() bool {
	if t == nil || t.Na == nil {
		return true
	}
	return *t.Na
}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Na == nil {
		var v bool = true
		t.Na = &v
	}
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option represents the /nokia-conf/configure/filter/dhcp6-filter/entry/option YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option struct {
	Absent  YANGEmpty                                                  `path:"absent" module:"nokia-conf"`
	Match   *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match `path:"match" module:"nokia-conf" yangPresence:"true"`
	Number  *int32                                                     `path:"number" module:"nokia-conf"`
	Present YANGEmpty                                                  `path:"present" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) GetOrCreateMatch() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) GetMatch() *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAbsent retrieves the value of the leaf Absent from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absent is set, it can
// safely use t.GetAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) GetAbsent() YANGEmpty {
	if t == nil || t.Absent == false {
		return false
	}
	return t.Absent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) GetNumber() int32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetPresent retrieves the value of the leaf Present from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Present is set, it can
// safely use t.GetPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Present == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) GetPresent() YANGEmpty {
	if t == nil || t.Present == false {
		return false
	}
	return t.Present
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match represents the /nokia-conf/configure/filter/dhcp6-filter/entry/option/match YANG schema element.
type NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match struct {
	Exact  *bool   `path:"exact" module:"nokia-conf"`
	Hex    *string `path:"hex" module:"nokia-conf"`
	Invert *bool   `path:"invert" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) IsYANGGoStruct() {}

// GetExact retrieves the value of the leaf Exact from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exact is set, it can
// safely use t.GetExact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) GetExact() bool {
	if t == nil || t.Exact == nil {
		return false
	}
	return *t.Exact
}

// GetHex retrieves the value of the leaf Hex from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hex is set, it can
// safely use t.GetHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) GetHex() string {
	if t == nil || t.Hex == nil {
		return ""
	}
	return *t.Hex
}

// GetInvert retrieves the value of the leaf Invert from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Invert is set, it can
// safely use t.GetInvert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Invert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) GetInvert() bool {
	if t == nil || t.Invert == nil {
		return false
	}
	return *t.Invert
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exact == nil {
		var v bool = false
		t.Exact = &v
	}
	if t.Invert == nil {
		var v bool = false
		t.Invert = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match.
func (*NokiaConf_Configure_Filter_Dhcp6Filter_Entry_Option_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_DhcpFilter represents the /nokia-conf/configure/filter/dhcp-filter YANG schema element.
type NokiaConf_Configure_Filter_DhcpFilter struct {
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction    `path:"default-action" module:"nokia-conf" yangPresence:"true"`
	Description        *string                                                 `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Filter_DhcpFilter_Entry `path:"entry" module:"nokia-conf"`
	FilterId           *uint32                                                 `path:"filter-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_DhcpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_DhcpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Filter_DhcpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_DhcpFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Filter_DhcpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_DhcpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Filter_DhcpFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Filter_DhcpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_DhcpFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_DhcpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Filter_DhcpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Filter_DhcpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_Filter_DhcpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_DhcpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_DhcpFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Filter_DhcpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Filter_DhcpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_DhcpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_DhcpFilter) AppendEntry(v *NokiaConf_Configure_Filter_DhcpFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_DhcpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetOrCreateDefaultAction() *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Filter_DhcpFilter_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Filter_DhcpFilter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetDefaultAction() *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_DhcpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_DhcpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_DhcpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Filter_DhcpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_DhcpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_DhcpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_DhcpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_DhcpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterId == nil {
		return nil, fmt.Errorf("nil value for key FilterId")
	}

	return map[string]interface{}{
		"filter-id": *t.FilterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_DhcpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_DhcpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_DhcpFilter.
func (*NokiaConf_Configure_Filter_DhcpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_DhcpFilter_DefaultAction represents the /nokia-conf/configure/filter/dhcp-filter/default-action YANG schema element.
type NokiaConf_Configure_Filter_DhcpFilter_DefaultAction struct {
	BypassHostCreation YANGEmpty `path:"bypass-host-creation" module:"nokia-conf"`
	Drop               YANGEmpty `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_DhcpFilter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) IsYANGGoStruct() {}

// GetBypassHostCreation retrieves the value of the leaf BypassHostCreation from the NokiaConf_Configure_Filter_DhcpFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassHostCreation is set, it can
// safely use t.GetBypassHostCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassHostCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) GetBypassHostCreation() YANGEmpty {
	if t == nil || t.BypassHostCreation == false {
		return false
	}
	return t.BypassHostCreation
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Filter_DhcpFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_DhcpFilter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_DhcpFilter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_DhcpFilter_DefaultAction.
func (*NokiaConf_Configure_Filter_DhcpFilter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_DhcpFilter_Entry represents the /nokia-conf/configure/filter/dhcp-filter/entry YANG schema element.
type NokiaConf_Configure_Filter_DhcpFilter_Entry struct {
	Action             *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action `path:"action" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                             `path:"entry-id" module:"nokia-conf"`
	Option             *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option `path:"option" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_DhcpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Filter_DhcpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) GetOrCreateOption() *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Filter_DhcpFilter_Entry_Option{}
	return t.Option
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Filter_DhcpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) GetAction() *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Filter_DhcpFilter_Entry. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) GetOption() *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_DhcpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_DhcpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Filter_DhcpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_DhcpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Option.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_DhcpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_DhcpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_DhcpFilter_Entry.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_DhcpFilter_Entry_Action represents the /nokia-conf/configure/filter/dhcp-filter/entry/action YANG schema element.
type NokiaConf_Configure_Filter_DhcpFilter_Entry_Action struct {
	BypassHostCreation YANGEmpty `path:"bypass-host-creation" module:"nokia-conf"`
	Drop               YANGEmpty `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_DhcpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) IsYANGGoStruct() {}

// GetBypassHostCreation retrieves the value of the leaf BypassHostCreation from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassHostCreation is set, it can
// safely use t.GetBypassHostCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassHostCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) GetBypassHostCreation() YANGEmpty {
	if t == nil || t.BypassHostCreation == false {
		return false
	}
	return t.BypassHostCreation
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_DhcpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_DhcpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_DhcpFilter_Entry_Action.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_DhcpFilter_Entry_Option represents the /nokia-conf/configure/filter/dhcp-filter/entry/option YANG schema element.
type NokiaConf_Configure_Filter_DhcpFilter_Entry_Option struct {
	Absent  YANGEmpty                                                 `path:"absent" module:"nokia-conf"`
	Match   *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match `path:"match" module:"nokia-conf" yangPresence:"true"`
	Number  *int32                                                    `path:"number" module:"nokia-conf"`
	Present YANGEmpty                                                 `path:"present" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_DhcpFilter_Entry_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) GetOrCreateMatch() *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Filter_DhcpFilter_Entry_Option. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) GetMatch() *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAbsent retrieves the value of the leaf Absent from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absent is set, it can
// safely use t.GetAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) GetAbsent() YANGEmpty {
	if t == nil || t.Absent == false {
		return false
	}
	return t.Absent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) GetNumber() int32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetPresent retrieves the value of the leaf Present from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Present is set, it can
// safely use t.GetPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Present == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) GetPresent() YANGEmpty {
	if t == nil || t.Present == false {
		return false
	}
	return t.Present
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_DhcpFilter_Entry_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_DhcpFilter_Entry_Option.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match represents the /nokia-conf/configure/filter/dhcp-filter/entry/option/match YANG schema element.
type NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match struct {
	Exact  *bool   `path:"exact" module:"nokia-conf"`
	Hex    *string `path:"hex" module:"nokia-conf"`
	Invert *bool   `path:"invert" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) IsYANGGoStruct() {}

// GetExact retrieves the value of the leaf Exact from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exact is set, it can
// safely use t.GetExact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) GetExact() bool {
	if t == nil || t.Exact == nil {
		return false
	}
	return *t.Exact
}

// GetHex retrieves the value of the leaf Hex from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hex is set, it can
// safely use t.GetHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) GetHex() string {
	if t == nil || t.Hex == nil {
		return ""
	}
	return *t.Hex
}

// GetInvert retrieves the value of the leaf Invert from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Invert is set, it can
// safely use t.GetInvert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Invert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) GetInvert() bool {
	if t == nil || t.Invert == nil {
		return false
	}
	return *t.Invert
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exact == nil {
		var v bool = false
		t.Exact = &v
	}
	if t.Invert == nil {
		var v bool = false
		t.Invert = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match.
func (*NokiaConf_Configure_Filter_DhcpFilter_Entry_Option_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_GreTunnelTemplate represents the /nokia-conf/configure/filter/gre-tunnel-template YANG schema element.
type NokiaConf_Configure_Filter_GreTunnelTemplate struct {
	ApplyGroups           []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description           *string                                            `path:"description" module:"nokia-conf"`
	GreTunnelTemplateName *string                                            `path:"gre-tunnel-template-name" module:"nokia-conf"`
	Ipv4                  *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_GreTunnelTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_GreTunnelTemplate) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) GetOrCreateIpv4() *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Filter_GreTunnelTemplate. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) GetIpv4() *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_GreTunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_GreTunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_GreTunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGreTunnelTemplateName retrieves the value of the leaf GreTunnelTemplateName from the NokiaConf_Configure_Filter_GreTunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTunnelTemplateName is set, it can
// safely use t.GetGreTunnelTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTunnelTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) GetGreTunnelTemplateName() string {
	if t == nil || t.GreTunnelTemplateName == nil {
		return ""
	}
	return *t.GreTunnelTemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_GreTunnelTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_GreTunnelTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GreTunnelTemplateName == nil {
		return nil, fmt.Errorf("nil value for key GreTunnelTemplateName")
	}

	return map[string]interface{}{
		"gre-tunnel-template-name": *t.GreTunnelTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_GreTunnelTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_GreTunnelTemplate.
func (*NokiaConf_Configure_Filter_GreTunnelTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 represents the /nokia-conf/configure/filter/gre-tunnel-template/ipv4 YANG schema element.
type NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 struct {
	DestinationAddress map[string]*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress `path:"destination-address" module:"nokia-conf"`
	GreKey             NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_GreKey_Union                   `path:"gre-key" module:"nokia-conf"`
	SkipTtlDecrement   *bool                                                                            `path:"skip-ttl-decrement" module:"nokia-conf"`
	SourceAddress      *string                                                                          `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) IsYANGGoStruct() {}

// NewDestinationAddress creates a new entry in the DestinationAddress list of the
// NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) NewDestinationAddress(Address string) (*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationAddress == nil {
		t.DestinationAddress = make(map[string]*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationAddress", key)
	}

	t.DestinationAddress[key] = &NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress{
		Address: &Address,
	}

	return t.DestinationAddress[key], nil
}

// RenameDestinationAddress renames an entry in the list DestinationAddress within
// the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) RenameDestinationAddress(oldK, newK string) error {
	if _, ok := t.DestinationAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationAddress", newK)
	}

	e, ok := t.DestinationAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationAddress", oldK)
	}
	e.Address = &newK

	t.DestinationAddress[newK] = e
	delete(t.DestinationAddress, oldK)
	return nil
}

// GetOrCreateDestinationAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) GetOrCreateDestinationAddress(Address string) *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress {

	key := Address

	if v, ok := t.DestinationAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationAddress got unexpected error: %v", err))
	}
	return v
}

// GetDestinationAddress retrieves the value with the specified key from
// the DestinationAddress map field of NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) GetDestinationAddress(Address string) *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.DestinationAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) DeleteDestinationAddress(Address string) {
	key := Address

	delete(t.DestinationAddress, key)
}

// AppendDestinationAddress appends the supplied NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress struct to the
// list DestinationAddress of NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) AppendDestinationAddress(v *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationAddress == nil {
		t.DestinationAddress = make(map[string]*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress)
	}

	if _, ok := t.DestinationAddress[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationAddress %v", key)
	}

	t.DestinationAddress[key] = v
	return nil
}

// GetGreKey retrieves the value of the leaf GreKey from the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreKey is set, it can
// safely use t.GetGreKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) GetGreKey() NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_GreKey_Union {
	if t == nil || t.GreKey == nil {
		return nil
	}
	return t.GreKey
}

// GetSkipTtlDecrement retrieves the value of the leaf SkipTtlDecrement from the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipTtlDecrement is set, it can
// safely use t.GetSkipTtlDecrement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipTtlDecrement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) GetSkipTtlDecrement() bool {
	if t == nil || t.SkipTtlDecrement == nil {
		return false
	}
	return *t.SkipTtlDecrement
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SkipTtlDecrement == nil {
		var v bool = false
		t.SkipTtlDecrement = &v
	}
	for _, e := range t.DestinationAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4.
func (*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress represents the /nokia-conf/configure/filter/gre-tunnel-template/ipv4/destination-address YANG schema element.
type NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress.
func (*NokiaConf_Configure_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException represents the /nokia-conf/configure/filter/ip-exception YANG schema element.
type NokiaConf_Configure_Filter_IpException struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Filter_IpException_Entry `path:"entry" module:"nokia-conf"`
	FilterId           *uint32                                                  `path:"filter-id" module:"nokia-conf"`
	FilterName         *string                                                  `path:"filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Filter_IpException struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_IpException) NewEntry(EntryId uint32) (*NokiaConf_Configure_Filter_IpException_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_IpException_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Filter_IpException_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Filter_IpException struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_IpException) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpException. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_IpException) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Filter_IpException_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Filter_IpException. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_IpException) GetEntry(EntryId uint32) *NokiaConf_Configure_Filter_IpException_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpException. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_IpException) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Filter_IpException_Entry struct to the
// list Entry of NokiaConf_Configure_Filter_IpException. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_IpException_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_IpException) AppendEntry(v *NokiaConf_Configure_Filter_IpException_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_IpException_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_IpException struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_IpException) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException.
func (*NokiaConf_Configure_Filter_IpException) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry represents the /nokia-conf/configure/filter/ip-exception/entry YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                             `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                             `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Filter_IpException_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry) GetOrCreateMatch() *NokiaConf_Configure_Filter_IpException_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Filter_IpException_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry) GetMatch() *NokiaConf_Configure_Filter_IpException_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpException_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpException_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_IpException_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Filter_IpException_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_IpException_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_IpException_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry.
func (*NokiaConf_Configure_Filter_IpException_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match represents the /nokia-conf/configure/filter/ip-exception/entry/match YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match struct {
	DstIp    *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Icmp     *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Filter_IpException_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetDstIp() *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetDstPort() *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetIcmp() *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetSrcIp() *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetSrcPort() *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Filter_IpException_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) GetProtocol() NokiaConf_Configure_Filter_IpException_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp represents the /nokia-conf/configure/filter/ip-exception/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort represents the /nokia-conf/configure/filter/ip-exception/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort struct {
	Eq    *uint16                                                           `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                           `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                           `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range represents the /nokia-conf/configure/filter/ip-exception/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp represents the /nokia-conf/configure/filter/ip-exception/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp represents the /nokia-conf/configure/filter/ip-exception/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort represents the /nokia-conf/configure/filter/ip-exception/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort struct {
	Eq    *uint16                                                           `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                           `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                           `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/filter/ip-exception/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Filter_IpException_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter represents the /nokia-conf/configure/filter/ip-filter YANG schema element.
type NokiaConf_Configure_Filter_IpFilter struct {
	ApplyGroups         []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	ChainToSystemFilter *bool                                                 `path:"chain-to-system-filter" module:"nokia-conf"`
	DefaultAction       E_NokiaTypesFilter_FilterDefaultAction                `path:"default-action" module:"nokia-conf"`
	Description         *string                                               `path:"description" module:"nokia-conf"`
	Embed               *NokiaConf_Configure_Filter_IpFilter_Embed            `path:"embed" module:"nokia-conf"`
	Entry               map[uint32]*NokiaConf_Configure_Filter_IpFilter_Entry `path:"entry" module:"nokia-conf"`
	FilterId            *uint32                                               `path:"filter-id" module:"nokia-conf"`
	FilterName          *string                                               `path:"filter-name" module:"nokia-conf"`
	Scope               E_NokiaTypesFilter_FilterScope                        `path:"scope" module:"nokia-conf"`
	SubscriberMgmt      *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt   `path:"subscriber-mgmt" module:"nokia-conf"`
	Type                E_NokiaConf_Configure_Filter_IpFilter_Type            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Filter_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_IpFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Filter_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_IpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Filter_IpFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Filter_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_IpFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_IpFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Filter_IpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Filter_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_Filter_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_IpFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Filter_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Filter_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_IpFilter) AppendEntry(v *NokiaConf_Configure_Filter_IpFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateEmbed retrieves the value of the Embed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter) GetOrCreateEmbed() *NokiaConf_Configure_Filter_IpFilter_Embed {
	if t.Embed != nil {
		return t.Embed
	}
	t.Embed = &NokiaConf_Configure_Filter_IpFilter_Embed{}
	return t.Embed
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetEmbed returns the value of the Embed struct pointer
// from NokiaConf_Configure_Filter_IpFilter. If the receiver or the field Embed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter) GetEmbed() *NokiaConf_Configure_Filter_IpFilter_Embed {
	if t != nil && t.Embed != nil {
		return t.Embed
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Filter_IpFilter. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter) GetSubscriberMgmt() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChainToSystemFilter retrieves the value of the leaf ChainToSystemFilter from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChainToSystemFilter is set, it can
// safely use t.GetChainToSystemFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChainToSystemFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetChainToSystemFilter() bool {
	if t == nil || t.ChainToSystemFilter == nil {
		return false
	}
	return *t.ChainToSystemFilter
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetDefaultAction() E_NokiaTypesFilter_FilterDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_FilterDefaultAction_drop
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetScope() E_NokiaTypesFilter_FilterScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesFilter_FilterScope_template
	}
	return t.Scope
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter) GetType() E_NokiaConf_Configure_Filter_IpFilter_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Filter_IpFilter_Type_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ChainToSystemFilter == nil {
		var v bool = false
		t.ChainToSystemFilter = &v
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_FilterDefaultAction_drop
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesFilter_FilterScope_template
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Filter_IpFilter_Type_normal
	}
	t.Embed.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_IpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_IpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter.
func (*NokiaConf_Configure_Filter_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Embed represents the /nokia-conf/configure/filter/ip-filter/embed YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Embed struct {
	Filter   map[NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key]*NokiaConf_Configure_Filter_IpFilter_Embed_Filter     `path:"filter" module:"nokia-conf"`
	Flowspec map[uint32]*NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec                                                 `path:"flowspec" module:"nokia-conf"`
	Openflow map[NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key]*NokiaConf_Configure_Filter_IpFilter_Embed_Openflow `path:"openflow" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Embed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Embed) IsYANGGoStruct() {}

// NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key represents the key for list Filter of element /nokia-conf/configure/filter/ip-filter/embed.
type NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key struct {
	Name   string `path:"name"`
	Offset uint32 `path:"offset"`
}

// NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key represents the key for list Openflow of element /nokia-conf/configure/filter/ip-filter/embed.
type NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key struct {
	OfSwitch string `path:"of-switch"`
	Offset   uint32 `path:"offset"`
}

// NewFilter creates a new entry in the Filter list of the
// NokiaConf_Configure_Filter_IpFilter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) NewFilter(Name string, Offset uint32) (*NokiaConf_Configure_Filter_IpFilter_Embed_Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key]*NokiaConf_Configure_Filter_IpFilter_Embed_Filter)
	}

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Filter", key)
	}

	t.Filter[key] = &NokiaConf_Configure_Filter_IpFilter_Embed_Filter{
		Name:   &Name,
		Offset: &Offset,
	}

	return t.Filter[key], nil
}

// RenameFilter renames an entry in the list Filter within
// the NokiaConf_Configure_Filter_IpFilter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) RenameFilter(oldK, newK NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key) error {
	if _, ok := t.Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Filter", newK)
	}

	e, ok := t.Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Filter", oldK)
	}
	e.Name = &newK.Name
	e.Offset = &newK.Offset

	t.Filter[newK] = e
	delete(t.Filter, oldK)
	return nil
}

// GetOrCreateFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) GetOrCreateFilter(Name string, Offset uint32) *NokiaConf_Configure_Filter_IpFilter_Embed_Filter {

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	if v, ok := t.Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFilter(Name, Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFilter got unexpected error: %v", err))
	}
	return v
}

// GetFilter retrieves the value with the specified key from
// the Filter map field of NokiaConf_Configure_Filter_IpFilter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) GetFilter(Name string, Offset uint32) *NokiaConf_Configure_Filter_IpFilter_Embed_Filter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	if lm, ok := t.Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) DeleteFilter(Name string, Offset uint32) {
	key := NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	delete(t.Filter, key)
}

// AppendFilter appends the supplied NokiaConf_Configure_Filter_IpFilter_Embed_Filter struct to the
// list Filter of NokiaConf_Configure_Filter_IpFilter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_IpFilter_Embed_Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) AppendFilter(v *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	if v.Offset == nil {
		return fmt.Errorf("invalid nil key for Offset")
	}

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key{
		Name:   *v.Name,
		Offset: *v.Offset,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[NokiaConf_Configure_Filter_IpFilter_Embed_Filter_Key]*NokiaConf_Configure_Filter_IpFilter_Embed_Filter)
	}

	if _, ok := t.Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Filter %v", key)
	}

	t.Filter[key] = v
	return nil
}

// NewFlowspec creates a new entry in the Flowspec list of the
// NokiaConf_Configure_Filter_IpFilter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) NewFlowspec(Offset uint32) (*NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowspec == nil {
		t.Flowspec = make(map[uint32]*NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec)
	}

	key := Offset

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flowspec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flowspec", key)
	}

	t.Flowspec[key] = &NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec{
		Offset: &Offset,
	}

	return t.Flowspec[key], nil
}

// RenameFlowspec renames an entry in the list Flowspec within
// the NokiaConf_Configure_Filter_IpFilter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) RenameFlowspec(oldK, newK uint32) error {
	if _, ok := t.Flowspec[newK]; ok {
		return fmt.Errorf("key %v already exists in Flowspec", newK)
	}

	e, ok := t.Flowspec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flowspec", oldK)
	}
	e.Offset = &newK

	t.Flowspec[newK] = e
	delete(t.Flowspec, oldK)
	return nil
}

// GetOrCreateFlowspec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) GetOrCreateFlowspec(Offset uint32) *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec {

	key := Offset

	if v, ok := t.Flowspec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowspec(Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowspec got unexpected error: %v", err))
	}
	return v
}

// GetFlowspec retrieves the value with the specified key from
// the Flowspec map field of NokiaConf_Configure_Filter_IpFilter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) GetFlowspec(Offset uint32) *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec {

	if t == nil {
		return nil
	}

	key := Offset

	if lm, ok := t.Flowspec[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowspec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) DeleteFlowspec(Offset uint32) {
	key := Offset

	delete(t.Flowspec, key)
}

// AppendFlowspec appends the supplied NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec struct to the
// list Flowspec of NokiaConf_Configure_Filter_IpFilter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) AppendFlowspec(v *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) error {
	if v.Offset == nil {
		return fmt.Errorf("invalid nil key received for Offset")
	}

	key := *v.Offset

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowspec == nil {
		t.Flowspec = make(map[uint32]*NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec)
	}

	if _, ok := t.Flowspec[key]; ok {
		return fmt.Errorf("duplicate key for list Flowspec %v", key)
	}

	t.Flowspec[key] = v
	return nil
}

// NewOpenflow creates a new entry in the Openflow list of the
// NokiaConf_Configure_Filter_IpFilter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) NewOpenflow(OfSwitch string, Offset uint32) (*NokiaConf_Configure_Filter_IpFilter_Embed_Openflow, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Openflow == nil {
		t.Openflow = make(map[NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key]*NokiaConf_Configure_Filter_IpFilter_Embed_Openflow)
	}

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Openflow[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Openflow", key)
	}

	t.Openflow[key] = &NokiaConf_Configure_Filter_IpFilter_Embed_Openflow{
		OfSwitch: &OfSwitch,
		Offset:   &Offset,
	}

	return t.Openflow[key], nil
}

// RenameOpenflow renames an entry in the list Openflow within
// the NokiaConf_Configure_Filter_IpFilter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) RenameOpenflow(oldK, newK NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key) error {
	if _, ok := t.Openflow[newK]; ok {
		return fmt.Errorf("key %v already exists in Openflow", newK)
	}

	e, ok := t.Openflow[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Openflow", oldK)
	}
	e.OfSwitch = &newK.OfSwitch
	e.Offset = &newK.Offset

	t.Openflow[newK] = e
	delete(t.Openflow, oldK)
	return nil
}

// GetOrCreateOpenflow retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) GetOrCreateOpenflow(OfSwitch string, Offset uint32) *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow {

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	if v, ok := t.Openflow[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpenflow(OfSwitch, Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpenflow got unexpected error: %v", err))
	}
	return v
}

// GetOpenflow retrieves the value with the specified key from
// the Openflow map field of NokiaConf_Configure_Filter_IpFilter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) GetOpenflow(OfSwitch string, Offset uint32) *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	if lm, ok := t.Openflow[key]; ok {
		return lm
	}
	return nil
}

// DeleteOpenflow deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_IpFilter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) DeleteOpenflow(OfSwitch string, Offset uint32) {
	key := NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	delete(t.Openflow, key)
}

// AppendOpenflow appends the supplied NokiaConf_Configure_Filter_IpFilter_Embed_Openflow struct to the
// list Openflow of NokiaConf_Configure_Filter_IpFilter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_IpFilter_Embed_Openflow already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) AppendOpenflow(v *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) error {
	if v.OfSwitch == nil {
		return fmt.Errorf("invalid nil key for OfSwitch")
	}

	if v.Offset == nil {
		return fmt.Errorf("invalid nil key for Offset")
	}

	key := NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: *v.OfSwitch,
		Offset:   *v.Offset,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Openflow == nil {
		t.Openflow = make(map[NokiaConf_Configure_Filter_IpFilter_Embed_Openflow_Key]*NokiaConf_Configure_Filter_IpFilter_Embed_Openflow)
	}

	if _, ok := t.Openflow[key]; ok {
		return fmt.Errorf("duplicate key for list Openflow %v", key)
	}

	t.Openflow[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Embed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.Flowspec {
		e.PopulateDefaults()
	}
	for _, e := range t.Openflow {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Embed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Embed.
func (*NokiaConf_Configure_Filter_IpFilter_Embed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Embed_Filter represents the /nokia-conf/configure/filter/ip-filter/embed/filter YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Embed_Filter struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string                     `path:"name" module:"nokia-conf"`
	Offset             *uint32                     `path:"offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Embed_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Embed_Filter) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Embed_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_IpFilter_Embed_Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.Offset == nil {
		return nil, fmt.Errorf("nil value for key Offset")
	}

	return map[string]interface{}{
		"name":   *t.Name,
		"offset": *t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Embed_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Embed_Filter.
func (*NokiaConf_Configure_Filter_IpFilter_Embed_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec represents the /nokia-conf/configure/filter/ip-filter/embed/flowspec YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Group              *uint32                     `path:"group" module:"nokia-conf"`
	Offset             *uint32                     `path:"offset" module:"nokia-conf"`
	RouterInstance     *string                     `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) GetGroup() uint32 {
	if t == nil || t.Group == nil {
		return 0
	}
	return *t.Group
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Offset == nil {
		return nil, fmt.Errorf("nil value for key Offset")
	}

	return map[string]interface{}{
		"offset": *t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec.
func (*NokiaConf_Configure_Filter_IpFilter_Embed_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Embed_Openflow represents the /nokia-conf/configure/filter/ip-filter/embed/openflow YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Embed_Openflow struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Grt                YANGEmpty                   `path:"grt" module:"nokia-conf"`
	OfSwitch           *string                     `path:"of-switch" module:"nokia-conf"`
	Offset             *uint32                     `path:"offset" module:"nokia-conf"`
	Sap                *string                     `path:"sap" module:"nokia-conf"`
	System             YANGEmpty                   `path:"system" module:"nokia-conf"`
	Vpls               *string                     `path:"vpls" module:"nokia-conf"`
	Vprn               *string                     `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Embed_Openflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGrt retrieves the value of the leaf Grt from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grt is set, it can
// safely use t.GetGrt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetGrt() YANGEmpty {
	if t == nil || t.Grt == false {
		return false
	}
	return t.Grt
}

// GetOfSwitch retrieves the value of the leaf OfSwitch from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfSwitch is set, it can
// safely use t.GetOfSwitch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfSwitch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetOfSwitch() string {
	if t == nil || t.OfSwitch == nil {
		return ""
	}
	return *t.OfSwitch
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetSystem retrieves the value of the leaf System from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if System is set, it can
// safely use t.GetSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.System == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetSystem() YANGEmpty {
	if t == nil || t.System == false {
		return false
	}
	return t.System
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_IpFilter_Embed_Openflow struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OfSwitch == nil {
		return nil, fmt.Errorf("nil value for key OfSwitch")
	}

	if t.Offset == nil {
		return nil, fmt.Errorf("nil value for key Offset")
	}

	return map[string]interface{}{
		"of-switch": *t.OfSwitch,
		"offset":    *t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Embed_Openflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Embed_Openflow.
func (*NokiaConf_Configure_Filter_IpFilter_Embed_Openflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry represents the /nokia-conf/configure/filter/ip-filter/entry YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry struct {
	Action                *NokiaConf_Configure_Filter_IpFilter_Entry_Action          `path:"action" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups           []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats          *bool                                                      `path:"collect-stats" module:"nokia-conf"`
	Description           *string                                                    `path:"description" module:"nokia-conf"`
	EgressPbr             E_NokiaTypesFilter_FilterEgressPbr                         `path:"egress-pbr" module:"nokia-conf"`
	EntryId               *uint32                                                    `path:"entry-id" module:"nokia-conf"`
	FilterSample          *bool                                                      `path:"filter-sample" module:"nokia-conf"`
	InterfaceSample       *bool                                                      `path:"interface-sample" module:"nokia-conf"`
	Log                   *uint32                                                    `path:"log" module:"nokia-conf"`
	Match                 *NokiaConf_Configure_Filter_IpFilter_Entry_Match           `path:"match" module:"nokia-conf"`
	PbrDownActionOverride E_NokiaTypesFilter_FilterPbrDownActionOvr                  `path:"pbr-down-action-override" module:"nokia-conf"`
	SampleProfile         *uint32                                                    `path:"sample-profile" module:"nokia-conf"`
	StickyDest            NokiaConf_Configure_Filter_IpFilter_Entry_StickyDest_Union `path:"sticky-dest" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Filter_IpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Filter_IpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Filter_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Filter_IpFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetAction() *NokiaConf_Configure_Filter_IpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetMatch() *NokiaConf_Configure_Filter_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressPbr retrieves the value of the leaf EgressPbr from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPbr is set, it can
// safely use t.GetEgressPbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetEgressPbr() E_NokiaTypesFilter_FilterEgressPbr {
	if t == nil || t.EgressPbr == 0 {
		return 0
	}
	return t.EgressPbr
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetFilterSample retrieves the value of the leaf FilterSample from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterSample is set, it can
// safely use t.GetFilterSample() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterSample == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetFilterSample() bool {
	if t == nil || t.FilterSample == nil {
		return false
	}
	return *t.FilterSample
}

// GetInterfaceSample retrieves the value of the leaf InterfaceSample from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSample is set, it can
// safely use t.GetInterfaceSample() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSample == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetInterfaceSample() bool {
	if t == nil || t.InterfaceSample == nil {
		return true
	}
	return *t.InterfaceSample
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// GetPbrDownActionOverride retrieves the value of the leaf PbrDownActionOverride from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbrDownActionOverride is set, it can
// safely use t.GetPbrDownActionOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbrDownActionOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetPbrDownActionOverride() E_NokiaTypesFilter_FilterPbrDownActionOvr {
	if t == nil || t.PbrDownActionOverride == 0 {
		return 0
	}
	return t.PbrDownActionOverride
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetSampleProfile() uint32 {
	if t == nil || t.SampleProfile == nil {
		return 0
	}
	return *t.SampleProfile
}

// GetStickyDest retrieves the value of the leaf StickyDest from the NokiaConf_Configure_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyDest is set, it can
// safely use t.GetStickyDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyDest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) GetStickyDest() NokiaConf_Configure_Filter_IpFilter_Entry_StickyDest_Union {
	if t == nil || t.StickyDest == nil {
		return nil
	}
	return t.StickyDest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.FilterSample == nil {
		var v bool = false
		t.FilterSample = &v
	}
	if t.InterfaceSample == nil {
		var v bool = true
		t.InterfaceSample = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry.
func (*NokiaConf_Configure_Filter_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action represents the /nokia-conf/configure/filter/ip-filter/entry/action YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action struct {
	Accept             YANGEmpty                                                      `path:"accept" module:"nokia-conf"`
	AcceptWhen         *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen   `path:"accept-when" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Drop               YANGEmpty                                                      `path:"drop" module:"nokia-conf"`
	DropWhen           *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen     `path:"drop-when" module:"nokia-conf" yangPresence:"true"`
	Fc                 E_NokiaTypesSros_FcName                                        `path:"fc" module:"nokia-conf"`
	Forward            *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward      `path:"forward" module:"nokia-conf"`
	GtpLocalBreakout   YANGEmpty                                                      `path:"gtp-local-breakout" module:"nokia-conf"`
	HttpRedirect       *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
	IgnoreMatch        YANGEmpty                                                      `path:"ignore-match" module:"nokia-conf"`
	L2AwareNatBypass   *bool                                                          `path:"l2-aware-nat-bypass" module:"nokia-conf"`
	Nat                *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat          `path:"nat" module:"nokia-conf" yangPresence:"true"`
	RateLimit          *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit    `path:"rate-limit" module:"nokia-conf" yangPresence:"true"`
	Reassemble         YANGEmpty                                                      `path:"reassemble" module:"nokia-conf"`
	Remark             *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark       `path:"remark" module:"nokia-conf" yangPresence:"true"`
	Secondary          *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary    `path:"secondary" module:"nokia-conf" yangPresence:"true"`
	TcpMssAdjust       YANGEmpty                                                      `path:"tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAcceptWhen retrieves the value of the AcceptWhen field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateAcceptWhen() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen {
	if t.AcceptWhen != nil {
		return t.AcceptWhen
	}
	t.AcceptWhen = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen{}
	return t.AcceptWhen
}

// GetOrCreateDropWhen retrieves the value of the DropWhen field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateDropWhen() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen {
	if t.DropWhen != nil {
		return t.DropWhen
	}
	t.DropWhen = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen{}
	return t.DropWhen
}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateForward() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward{}
	return t.Forward
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateNat() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat{}
	return t.Nat
}

// GetOrCreateRateLimit retrieves the value of the RateLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateRateLimit() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit {
	if t.RateLimit != nil {
		return t.RateLimit
	}
	t.RateLimit = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit{}
	return t.RateLimit
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateRemark() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark{}
	return t.Remark
}

// GetOrCreateSecondary retrieves the value of the Secondary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetOrCreateSecondary() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary {
	if t.Secondary != nil {
		return t.Secondary
	}
	t.Secondary = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary{}
	return t.Secondary
}

// GetAcceptWhen returns the value of the AcceptWhen struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field AcceptWhen is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetAcceptWhen() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen {
	if t != nil && t.AcceptWhen != nil {
		return t.AcceptWhen
	}
	return nil
}

// GetDropWhen returns the value of the DropWhen struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field DropWhen is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetDropWhen() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen {
	if t != nil && t.DropWhen != nil {
		return t.DropWhen
	}
	return nil
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetForward() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetNat() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetRateLimit returns the value of the RateLimit struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field RateLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetRateLimit() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit {
	if t != nil && t.RateLimit != nil {
		return t.RateLimit
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetRemark() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetSecondary returns the value of the Secondary struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action. If the receiver or the field Secondary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetSecondary() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary {
	if t != nil && t.Secondary != nil {
		return t.Secondary
	}
	return nil
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetGtpLocalBreakout retrieves the value of the leaf GtpLocalBreakout from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpLocalBreakout is set, it can
// safely use t.GetGtpLocalBreakout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpLocalBreakout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetGtpLocalBreakout() YANGEmpty {
	if t == nil || t.GtpLocalBreakout == false {
		return false
	}
	return t.GtpLocalBreakout
}

// GetIgnoreMatch retrieves the value of the leaf IgnoreMatch from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMatch is set, it can
// safely use t.GetIgnoreMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetIgnoreMatch() YANGEmpty {
	if t == nil || t.IgnoreMatch == false {
		return false
	}
	return t.IgnoreMatch
}

// GetL2AwareNatBypass retrieves the value of the leaf L2AwareNatBypass from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2AwareNatBypass is set, it can
// safely use t.GetL2AwareNatBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2AwareNatBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetL2AwareNatBypass() bool {
	if t == nil || t.L2AwareNatBypass == nil {
		return false
	}
	return *t.L2AwareNatBypass
}

// GetReassemble retrieves the value of the leaf Reassemble from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reassemble is set, it can
// safely use t.GetReassemble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reassemble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetReassemble() YANGEmpty {
	if t == nil || t.Reassemble == false {
		return false
	}
	return t.Reassemble
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) GetTcpMssAdjust() YANGEmpty {
	if t == nil || t.TcpMssAdjust == false {
		return false
	}
	return t.TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.L2AwareNatBypass == nil {
		var v bool = false
		t.L2AwareNatBypass = &v
	}
	t.AcceptWhen.PopulateDefaults()
	t.DropWhen.PopulateDefaults()
	t.Forward.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.RateLimit.PopulateDefaults()
	t.Remark.PopulateDefaults()
	t.Secondary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen represents the /nokia-conf/configure/filter/ip-filter/entry/action/accept-when YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen struct {
	Pattern *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern `path:"pattern" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) IsYANGGoStruct() {}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) GetOrCreatePattern() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern{}
	return t.Pattern
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) GetPattern() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Pattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern represents the /nokia-conf/configure/filter/ip-filter/entry/action/accept-when/pattern YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern struct {
	Expression  *string                                                                          `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                          `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                           `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) IsYANGGoStruct() {}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetOffsetType() E_NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen represents the /nokia-conf/configure/filter/ip-filter/entry/action/drop-when YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen struct {
	ExtractedTraffic YANGEmpty                                                               `path:"extracted-traffic" module:"nokia-conf"`
	PacketLength     *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength `path:"packet-length" module:"nokia-conf" yangPresence:"true"`
	Pattern          *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern      `path:"pattern" module:"nokia-conf" yangPresence:"true"`
	Ttl              *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl          `path:"ttl" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) IsYANGGoStruct() {}

// GetOrCreatePacketLength retrieves the value of the PacketLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) GetOrCreatePacketLength() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength {
	if t.PacketLength != nil {
		return t.PacketLength
	}
	t.PacketLength = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength{}
	return t.PacketLength
}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) GetOrCreatePattern() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern{}
	return t.Pattern
}

// GetOrCreateTtl retrieves the value of the Ttl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) GetOrCreateTtl() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl {
	if t.Ttl != nil {
		return t.Ttl
	}
	t.Ttl = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl{}
	return t.Ttl
}

// GetPacketLength returns the value of the PacketLength struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen. If the receiver or the field PacketLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) GetPacketLength() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength {
	if t != nil && t.PacketLength != nil {
		return t.PacketLength
	}
	return nil
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) GetPattern() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// GetTtl returns the value of the Ttl struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen. If the receiver or the field Ttl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) GetTtl() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl {
	if t != nil && t.Ttl != nil {
		return t.Ttl
	}
	return nil
}

// GetExtractedTraffic retrieves the value of the leaf ExtractedTraffic from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtractedTraffic is set, it can
// safely use t.GetExtractedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtractedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) GetExtractedTraffic() YANGEmpty {
	if t == nil || t.ExtractedTraffic == false {
		return false
	}
	return t.ExtractedTraffic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketLength.PopulateDefaults()
	t.Pattern.PopulateDefaults()
	t.Ttl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength represents the /nokia-conf/configure/filter/ip-filter/entry/action/drop-when/packet-length YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength struct {
	Eq    *int32                                                                        `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                        `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                        `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range represents the /nokia-conf/configure/filter/ip-filter/entry/action/drop-when/packet-length/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern represents the /nokia-conf/configure/filter/ip-filter/entry/action/drop-when/pattern YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern struct {
	Expression  *string                                                                        `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                        `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                         `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) IsYANGGoStruct() {}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetOffsetType() E_NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl represents the /nokia-conf/configure/filter/ip-filter/entry/action/drop-when/ttl YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl struct {
	Eq    *int32                                                               `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                               `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                               `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range represents the /nokia-conf/configure/filter/ip-filter/entry/action/drop-when/ttl/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward struct {
	BondingConnection *uint32                                                              `path:"bonding-connection" module:"nokia-conf"`
	EsiL2             *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2      `path:"esi-l2" module:"nokia-conf" yangPresence:"true"`
	EsiL3             *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3      `path:"esi-l3" module:"nokia-conf" yangPresence:"true"`
	GreTunnel         *string                                                              `path:"gre-tunnel" module:"nokia-conf"`
	Lsp               *string                                                              `path:"lsp" module:"nokia-conf"`
	MplsPolicy        *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy `path:"mpls-policy" module:"nokia-conf" yangPresence:"true"`
	NextHop           *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop    `path:"next-hop" module:"nokia-conf" yangPresence:"true"`
	RedirectPolicy    *string                                                              `path:"redirect-policy" module:"nokia-conf"`
	RouterInstance    *string                                                              `path:"router-instance" module:"nokia-conf"`
	Sap               *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap        `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp               *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp        `path:"sdp" module:"nokia-conf" yangPresence:"true"`
	SrtePolicy        *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy `path:"srte-policy" module:"nokia-conf" yangPresence:"true"`
	VprnTarget        *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget `path:"vprn-target" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) IsYANGGoStruct() {}

// GetOrCreateEsiL2 retrieves the value of the EsiL2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateEsiL2() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2 {
	if t.EsiL2 != nil {
		return t.EsiL2
	}
	t.EsiL2 = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2{}
	return t.EsiL2
}

// GetOrCreateEsiL3 retrieves the value of the EsiL3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateEsiL3() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3 {
	if t.EsiL3 != nil {
		return t.EsiL3
	}
	t.EsiL3 = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3{}
	return t.EsiL3
}

// GetOrCreateMplsPolicy retrieves the value of the MplsPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateMplsPolicy() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy {
	if t.MplsPolicy != nil {
		return t.MplsPolicy
	}
	t.MplsPolicy = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy{}
	return t.MplsPolicy
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateNextHop() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop{}
	return t.NextHop
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateSap() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateSdp() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp{}
	return t.Sdp
}

// GetOrCreateSrtePolicy retrieves the value of the SrtePolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateSrtePolicy() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy {
	if t.SrtePolicy != nil {
		return t.SrtePolicy
	}
	t.SrtePolicy = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy{}
	return t.SrtePolicy
}

// GetOrCreateVprnTarget retrieves the value of the VprnTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetOrCreateVprnTarget() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget {
	if t.VprnTarget != nil {
		return t.VprnTarget
	}
	t.VprnTarget = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget{}
	return t.VprnTarget
}

// GetEsiL2 returns the value of the EsiL2 struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field EsiL2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetEsiL2() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2 {
	if t != nil && t.EsiL2 != nil {
		return t.EsiL2
	}
	return nil
}

// GetEsiL3 returns the value of the EsiL3 struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field EsiL3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetEsiL3() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3 {
	if t != nil && t.EsiL3 != nil {
		return t.EsiL3
	}
	return nil
}

// GetMplsPolicy returns the value of the MplsPolicy struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field MplsPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetMplsPolicy() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy {
	if t != nil && t.MplsPolicy != nil {
		return t.MplsPolicy
	}
	return nil
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetNextHop() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetSap() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetSdp() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// GetSrtePolicy returns the value of the SrtePolicy struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field SrtePolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetSrtePolicy() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy {
	if t != nil && t.SrtePolicy != nil {
		return t.SrtePolicy
	}
	return nil
}

// GetVprnTarget returns the value of the VprnTarget struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field VprnTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetVprnTarget() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget {
	if t != nil && t.VprnTarget != nil {
		return t.VprnTarget
	}
	return nil
}

// GetBondingConnection retrieves the value of the leaf BondingConnection from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BondingConnection is set, it can
// safely use t.GetBondingConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BondingConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetBondingConnection() uint32 {
	if t == nil || t.BondingConnection == nil {
		return 0
	}
	return *t.BondingConnection
}

// GetGreTunnel retrieves the value of the leaf GreTunnel from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTunnel is set, it can
// safely use t.GetGreTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetGreTunnel() string {
	if t == nil || t.GreTunnel == nil {
		return ""
	}
	return *t.GreTunnel
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetRedirectPolicy retrieves the value of the leaf RedirectPolicy from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectPolicy is set, it can
// safely use t.GetRedirectPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetRedirectPolicy() string {
	if t == nil || t.RedirectPolicy == nil {
		return ""
	}
	return *t.RedirectPolicy
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EsiL2.PopulateDefaults()
	t.EsiL3.PopulateDefaults()
	t.MplsPolicy.PopulateDefaults()
	t.NextHop.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
	t.SrtePolicy.PopulateDefaults()
	t.VprnTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2 represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/esi-l2 YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2 struct {
	EsiValue *string `path:"esi-value" module:"nokia-conf"`
	Vpls     *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) IsYANGGoStruct() {}

// GetEsiValue retrieves the value of the leaf EsiValue from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiValue is set, it can
// safely use t.GetEsiValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) GetEsiValue() string {
	if t == nil || t.EsiValue == nil {
		return ""
	}
	return *t.EsiValue
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3 represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/esi-l3 YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3 struct {
	EsiValue     *string `path:"esi-value" module:"nokia-conf"`
	SfIp         *string `path:"sf-ip" module:"nokia-conf"`
	VasInterface *string `path:"vas-interface" module:"nokia-conf"`
	Vprn         *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) IsYANGGoStruct() {}

// GetEsiValue retrieves the value of the leaf EsiValue from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiValue is set, it can
// safely use t.GetEsiValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetEsiValue() string {
	if t == nil || t.EsiValue == nil {
		return ""
	}
	return *t.EsiValue
}

// GetSfIp retrieves the value of the leaf SfIp from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfIp is set, it can
// safely use t.GetSfIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetSfIp() string {
	if t == nil || t.SfIp == nil {
		return ""
	}
	return *t.SfIp
}

// GetVasInterface retrieves the value of the leaf VasInterface from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasInterface is set, it can
// safely use t.GetVasInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetVasInterface() string {
	if t == nil || t.VasInterface == nil {
		return ""
	}
	return *t.VasInterface
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_EsiL3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/mpls-policy YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy struct {
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) IsYANGGoStruct() {}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/next-hop YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop struct {
	InterfaceName *string                                                                   `path:"interface-name" module:"nokia-conf"`
	NhIp          *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp    `path:"nh-ip" module:"nokia-conf" yangPresence:"true"`
	NhIpVrf       *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf `path:"nh-ip-vrf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) IsYANGGoStruct() {}

// GetOrCreateNhIp retrieves the value of the NhIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) GetOrCreateNhIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp {
	if t.NhIp != nil {
		return t.NhIp
	}
	t.NhIp = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp{}
	return t.NhIp
}

// GetOrCreateNhIpVrf retrieves the value of the NhIpVrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) GetOrCreateNhIpVrf() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf {
	if t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	t.NhIpVrf = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf{}
	return t.NhIpVrf
}

// GetNhIp returns the value of the NhIp struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop. If the receiver or the field NhIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) GetNhIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp {
	if t != nil && t.NhIp != nil {
		return t.NhIp
	}
	return nil
}

// GetNhIpVrf returns the value of the NhIpVrf struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop. If the receiver or the field NhIpVrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) GetNhIpVrf() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf {
	if t != nil && t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	return nil
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NhIp.PopulateDefaults()
	t.NhIpVrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/next-hop/nh-ip YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp struct {
	Address  *string `path:"address" module:"nokia-conf"`
	Indirect *bool   `path:"indirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/next-hop/nh-ip-vrf YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Indirect       *bool   `path:"indirect" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/sap YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) IsYANGGoStruct() {}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/sdp YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) IsYANGGoStruct() {}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/srte-policy YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy struct {
	Color    *int64  `path:"color" module:"nokia-conf"`
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) IsYANGGoStruct() {}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget represents the /nokia-conf/configure/filter/ip-filter/entry/action/forward/vprn-target YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget struct {
	AdvPrefix *string `path:"adv-prefix" module:"nokia-conf"`
	BgpNh     *string `path:"bgp-nh" module:"nokia-conf"`
	Lsp       *string `path:"lsp" module:"nokia-conf"`
	Vprn      *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) IsYANGGoStruct() {}

// GetAdvPrefix retrieves the value of the leaf AdvPrefix from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvPrefix is set, it can
// safely use t.GetAdvPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetAdvPrefix() string {
	if t == nil || t.AdvPrefix == nil {
		return ""
	}
	return *t.AdvPrefix
}

// GetBgpNh retrieves the value of the leaf BgpNh from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpNh is set, it can
// safely use t.GetBgpNh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpNh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetBgpNh() string {
	if t == nil || t.BgpNh == nil {
		return ""
	}
	return *t.BgpNh
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Forward_VprnTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect represents the /nokia-conf/configure/filter/ip-filter/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect struct {
	AllowOverride *bool                                                                   `path:"allow-override" module:"nokia-conf"`
	Url           NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect_Url_Union `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) IsYANGGoStruct() {}

// GetAllowOverride retrieves the value of the leaf AllowOverride from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOverride is set, it can
// safely use t.GetAllowOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) GetAllowOverride() bool {
	if t == nil || t.AllowOverride == nil {
		return false
	}
	return *t.AllowOverride
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) GetUrl() NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect_Url_Union {
	if t == nil || t.Url == nil {
		return nil
	}
	return t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowOverride == nil {
		var v bool = false
		t.AllowOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat represents the /nokia-conf/configure/filter/ip-filter/entry/action/nat YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat struct {
	NatPolicy *string `path:"nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat) IsYANGGoStruct() {}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit represents the /nokia-conf/configure/filter/ip-filter/entry/action/rate-limit YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit struct {
	ExtractedTraffic YANGEmpty                                                                `path:"extracted-traffic" module:"nokia-conf"`
	PacketLength     *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength `path:"packet-length" module:"nokia-conf" yangPresence:"true"`
	Pattern          *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern      `path:"pattern" module:"nokia-conf" yangPresence:"true"`
	Pir              NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pir_Union     `path:"pir" module:"nokia-conf"`
	Ttl              *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl          `path:"ttl" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) IsYANGGoStruct() {}

// GetOrCreatePacketLength retrieves the value of the PacketLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetOrCreatePacketLength() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength {
	if t.PacketLength != nil {
		return t.PacketLength
	}
	t.PacketLength = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength{}
	return t.PacketLength
}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetOrCreatePattern() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern{}
	return t.Pattern
}

// GetOrCreateTtl retrieves the value of the Ttl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetOrCreateTtl() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl {
	if t.Ttl != nil {
		return t.Ttl
	}
	t.Ttl = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl{}
	return t.Ttl
}

// GetPacketLength returns the value of the PacketLength struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit. If the receiver or the field PacketLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetPacketLength() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength {
	if t != nil && t.PacketLength != nil {
		return t.PacketLength
	}
	return nil
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetPattern() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// GetTtl returns the value of the Ttl struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit. If the receiver or the field Ttl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetTtl() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl {
	if t != nil && t.Ttl != nil {
		return t.Ttl
	}
	return nil
}

// GetExtractedTraffic retrieves the value of the leaf ExtractedTraffic from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtractedTraffic is set, it can
// safely use t.GetExtractedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtractedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetExtractedTraffic() YANGEmpty {
	if t == nil || t.ExtractedTraffic == false {
		return false
	}
	return t.ExtractedTraffic
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) GetPir() NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketLength.PopulateDefaults()
	t.Pattern.PopulateDefaults()
	t.Ttl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength represents the /nokia-conf/configure/filter/ip-filter/entry/action/rate-limit/packet-length YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength struct {
	Eq    *int32                                                                         `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                         `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                         `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range represents the /nokia-conf/configure/filter/ip-filter/entry/action/rate-limit/packet-length/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern represents the /nokia-conf/configure/filter/ip-filter/entry/action/rate-limit/pattern YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern struct {
	Expression  *string                                                                         `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                         `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                          `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) IsYANGGoStruct() {}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetOffsetType() E_NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl represents the /nokia-conf/configure/filter/ip-filter/entry/action/rate-limit/ttl YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl struct {
	Eq    *int32                                                                `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range represents the /nokia-conf/configure/filter/ip-filter/entry/action/rate-limit/ttl/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark represents the /nokia-conf/configure/filter/ip-filter/entry/action/remark YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Forward            *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward `path:"forward" module:"nokia-conf"`
	Remark             *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark  `path:"remark" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) GetOrCreateForward() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward{}
	return t.Forward
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) GetOrCreateRemark() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark{}
	return t.Remark
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) GetForward() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) GetRemark() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Forward.PopulateDefaults()
	t.Remark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary/forward YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward struct {
	NextHop    *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop    `path:"next-hop" module:"nokia-conf" yangPresence:"true"`
	Sap        *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap        `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp        *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp        `path:"sdp" module:"nokia-conf" yangPresence:"true"`
	VprnTarget *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget `path:"vprn-target" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) IsYANGGoStruct() {}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateNextHop() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop{}
	return t.NextHop
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateSap() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateSdp() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp{}
	return t.Sdp
}

// GetOrCreateVprnTarget retrieves the value of the VprnTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateVprnTarget() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget {
	if t.VprnTarget != nil {
		return t.VprnTarget
	}
	t.VprnTarget = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget{}
	return t.VprnTarget
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetNextHop() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetSap() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetSdp() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// GetVprnTarget returns the value of the VprnTarget struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field VprnTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) GetVprnTarget() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget {
	if t != nil && t.VprnTarget != nil {
		return t.VprnTarget
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NextHop.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
	t.VprnTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary/forward/next-hop YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop struct {
	NhIpVrf *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf `path:"nh-ip-vrf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) IsYANGGoStruct() {}

// GetOrCreateNhIpVrf retrieves the value of the NhIpVrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) GetOrCreateNhIpVrf() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf {
	if t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	t.NhIpVrf = &NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf{}
	return t.NhIpVrf
}

// GetNhIpVrf returns the value of the NhIpVrf struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop. If the receiver or the field NhIpVrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) GetNhIpVrf() *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf {
	if t != nil && t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NhIpVrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary/forward/next-hop/nh-ip-vrf YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Indirect       *bool   `path:"indirect" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary/forward/sap YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) IsYANGGoStruct() {}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary/forward/sdp YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) IsYANGGoStruct() {}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary/forward/vprn-target YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget struct {
	AdvPrefix *string `path:"adv-prefix" module:"nokia-conf"`
	BgpNh     *string `path:"bgp-nh" module:"nokia-conf"`
	Lsp       *string `path:"lsp" module:"nokia-conf"`
	Vprn      *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) IsYANGGoStruct() {
}

// GetAdvPrefix retrieves the value of the leaf AdvPrefix from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvPrefix is set, it can
// safely use t.GetAdvPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetAdvPrefix() string {
	if t == nil || t.AdvPrefix == nil {
		return ""
	}
	return *t.AdvPrefix
}

// GetBgpNh retrieves the value of the leaf BgpNh from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpNh is set, it can
// safely use t.GetBgpNh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpNh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetBgpNh() string {
	if t == nil || t.BgpNh == nil {
		return ""
	}
	return *t.BgpNh
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark represents the /nokia-conf/configure/filter/ip-filter/entry/action/secondary/remark YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Action_Secondary_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match represents the /nokia-conf/configure/filter/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match struct {
	DestinationClass *uint32                                                        `path:"destination-class" module:"nokia-conf"`
	Dscp             E_NokiaTypesQos_DscpName                                       `path:"dscp" module:"nokia-conf"`
	DstIp            *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort          *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment         E_NokiaConf_Configure_Filter_IpFilter_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Icmp             *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	Ip               *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip            `path:"ip" module:"nokia-conf"`
	IpOption         *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption      `path:"ip-option" module:"nokia-conf" yangPresence:"true"`
	MultipleOption   *bool                                                          `path:"multiple-option" module:"nokia-conf"`
	OptionPresent    *bool                                                          `path:"option-present" module:"nokia-conf"`
	PacketLength     *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength  `path:"packet-length" module:"nokia-conf" yangPresence:"true"`
	Port             *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port          `path:"port" module:"nokia-conf"`
	Protocol         NokiaConf_Configure_Filter_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	ProtocolList     *string                                                        `path:"protocol-list" module:"nokia-conf"`
	SrcIp            *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcMac           *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac        `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
	SrcPort          *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	SrcRouteOption   *bool                                                          `path:"src-route-option" module:"nokia-conf"`
	TcpFlags         *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags      `path:"tcp-flags" module:"nokia-conf"`
	Ttl              *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl           `path:"ttl" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateIp retrieves the value of the Ip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip {
	if t.Ip != nil {
		return t.Ip
	}
	t.Ip = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip{}
	return t.Ip
}

// GetOrCreateIpOption retrieves the value of the IpOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateIpOption() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption {
	if t.IpOption != nil {
		return t.IpOption
	}
	t.IpOption = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption{}
	return t.IpOption
}

// GetOrCreatePacketLength retrieves the value of the PacketLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreatePacketLength() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength {
	if t.PacketLength != nil {
		return t.PacketLength
	}
	t.PacketLength = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength{}
	return t.PacketLength
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetOrCreateTtl retrieves the value of the Ttl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOrCreateTtl() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl {
	if t.Ttl != nil {
		return t.Ttl
	}
	t.Ttl = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl{}
	return t.Ttl
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetDstIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetIcmp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIp returns the value of the Ip struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field Ip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip {
	if t != nil && t.Ip != nil {
		return t.Ip
	}
	return nil
}

// GetIpOption returns the value of the IpOption struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field IpOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetIpOption() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption {
	if t != nil && t.IpOption != nil {
		return t.IpOption
	}
	return nil
}

// GetPacketLength returns the value of the PacketLength struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field PacketLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetPacketLength() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength {
	if t != nil && t.PacketLength != nil {
		return t.PacketLength
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetPort() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetSrcMac() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetTtl returns the value of the Ttl struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match. If the receiver or the field Ttl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetTtl() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl {
	if t != nil && t.Ttl != nil {
		return t.Ttl
	}
	return nil
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetFragment() E_NokiaConf_Configure_Filter_IpFilter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetMultipleOption retrieves the value of the leaf MultipleOption from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipleOption is set, it can
// safely use t.GetMultipleOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipleOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetMultipleOption() bool {
	if t == nil || t.MultipleOption == nil {
		return false
	}
	return *t.MultipleOption
}

// GetOptionPresent retrieves the value of the leaf OptionPresent from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionPresent is set, it can
// safely use t.GetOptionPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionPresent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetOptionPresent() bool {
	if t == nil || t.OptionPresent == nil {
		return false
	}
	return *t.OptionPresent
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_Filter_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetProtocolList retrieves the value of the leaf ProtocolList from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolList is set, it can
// safely use t.GetProtocolList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetProtocolList() string {
	if t == nil || t.ProtocolList == nil {
		return ""
	}
	return *t.ProtocolList
}

// GetSrcRouteOption retrieves the value of the leaf SrcRouteOption from the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcRouteOption is set, it can
// safely use t.GetSrcRouteOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcRouteOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) GetSrcRouteOption() bool {
	if t == nil || t.SrcRouteOption == nil {
		return false
	}
	return *t.SrcRouteOption
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.Ip.PopulateDefaults()
	t.IpOption.PopulateDefaults()
	t.PacketLength.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
	t.Ttl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp represents the /nokia-conf/configure/filter/ip-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/filter/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort struct {
	Eq       *uint16                                                        `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                        `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                        `path:"lt" module:"nokia-conf"`
	PortList *string                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/filter/ip-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp represents the /nokia-conf/configure/filter/ip-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip represents the /nokia-conf/configure/filter/ip-filter/entry/match/ip YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption represents the /nokia-conf/configure/filter/ip-filter/entry/match/ip-option YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_IpOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength represents the /nokia-conf/configure/filter/ip-filter/entry/match/packet-length YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength struct {
	Eq    *int32                                                              `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                              `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                              `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range represents the /nokia-conf/configure/filter/ip-filter/entry/match/packet-length/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_PacketLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port represents the /nokia-conf/configure/filter/ip-filter/entry/match/port YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port struct {
	Eq       *uint16                                                     `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                     `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                     `path:"lt" module:"nokia-conf"`
	PortList *string                                                     `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range represents the /nokia-conf/configure/filter/ip-filter/entry/match/port/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/filter/ip-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac represents the /nokia-conf/configure/filter/ip-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/filter/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort struct {
	Eq       *uint16                                                        `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                        `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                        `path:"lt" module:"nokia-conf"`
	PortList *string                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/filter/ip-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags represents the /nokia-conf/configure/filter/ip-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Cwr *bool `path:"cwr" module:"nokia-conf"`
	Ece *bool `path:"ece" module:"nokia-conf"`
	Fin *bool `path:"fin" module:"nokia-conf"`
	Ns  *bool `path:"ns" module:"nokia-conf"`
	Psh *bool `path:"psh" module:"nokia-conf"`
	Rst *bool `path:"rst" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
	Urg *bool `path:"urg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) IsYANGGoStruct() {}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetCwr retrieves the value of the leaf Cwr from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cwr is set, it can
// safely use t.GetCwr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cwr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetCwr() bool {
	if t == nil || t.Cwr == nil {
		return false
	}
	return *t.Cwr
}

// GetEce retrieves the value of the leaf Ece from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ece is set, it can
// safely use t.GetEce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ece == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetEce() bool {
	if t == nil || t.Ece == nil {
		return false
	}
	return *t.Ece
}

// GetFin retrieves the value of the leaf Fin from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fin is set, it can
// safely use t.GetFin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetFin() bool {
	if t == nil || t.Fin == nil {
		return false
	}
	return *t.Fin
}

// GetNs retrieves the value of the leaf Ns from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ns is set, it can
// safely use t.GetNs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetNs() bool {
	if t == nil || t.Ns == nil {
		return false
	}
	return *t.Ns
}

// GetPsh retrieves the value of the leaf Psh from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Psh is set, it can
// safely use t.GetPsh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Psh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetPsh() bool {
	if t == nil || t.Psh == nil {
		return false
	}
	return *t.Psh
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetRst() bool {
	if t == nil || t.Rst == nil {
		return false
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// GetUrg retrieves the value of the leaf Urg from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Urg is set, it can
// safely use t.GetUrg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Urg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) GetUrg() bool {
	if t == nil || t.Urg == nil {
		return false
	}
	return *t.Urg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl represents the /nokia-conf/configure/filter/ip-filter/entry/match/ttl YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl struct {
	Eq    *int32                                                     `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                     `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                     `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) GetRange() *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range represents the /nokia-conf/configure/filter/ip-filter/entry/match/ttl/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range.
func (*NokiaConf_Configure_Filter_IpFilter_Entry_Match_Ttl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt struct {
	HostSpecificEntry *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry `path:"host-specific-entry" module:"nokia-conf"`
	SharedEntry       *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry       `path:"shared-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateHostSpecificEntry retrieves the value of the HostSpecificEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) GetOrCreateHostSpecificEntry() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry {
	if t.HostSpecificEntry != nil {
		return t.HostSpecificEntry
	}
	t.HostSpecificEntry = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry{}
	return t.HostSpecificEntry
}

// GetOrCreateSharedEntry retrieves the value of the SharedEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) GetOrCreateSharedEntry() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry {
	if t.SharedEntry != nil {
		return t.SharedEntry
	}
	t.SharedEntry = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry{}
	return t.SharedEntry
}

// GetHostSpecificEntry returns the value of the HostSpecificEntry struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt. If the receiver or the field HostSpecificEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) GetHostSpecificEntry() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry {
	if t != nil && t.HostSpecificEntry != nil {
		return t.HostSpecificEntry
	}
	return nil
}

// GetSharedEntry returns the value of the SharedEntry struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt. If the receiver or the field SharedEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) GetSharedEntry() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry {
	if t != nil && t.SharedEntry != nil {
		return t.SharedEntry
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HostSpecificEntry.PopulateDefaults()
	t.SharedEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/host-specific-entry YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry struct {
	CreditControl *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl `path:"credit-control" module:"nokia-conf"`
	FilterRule    *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule    `path:"filter-rule" module:"nokia-conf"`
	Watermark     *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark     `path:"watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) IsYANGGoStruct() {}

// GetOrCreateCreditControl retrieves the value of the CreditControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetOrCreateCreditControl() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl {
	if t.CreditControl != nil {
		return t.CreditControl
	}
	t.CreditControl = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl{}
	return t.CreditControl
}

// GetOrCreateFilterRule retrieves the value of the FilterRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetOrCreateFilterRule() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule {
	if t.FilterRule != nil {
		return t.FilterRule
	}
	t.FilterRule = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule{}
	return t.FilterRule
}

// GetOrCreateWatermark retrieves the value of the Watermark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetOrCreateWatermark() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark {
	if t.Watermark != nil {
		return t.Watermark
	}
	t.Watermark = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark{}
	return t.Watermark
}

// GetCreditControl returns the value of the CreditControl struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field CreditControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetCreditControl() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl {
	if t != nil && t.CreditControl != nil {
		return t.CreditControl
	}
	return nil
}

// GetFilterRule returns the value of the FilterRule struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field FilterRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetFilterRule() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule {
	if t != nil && t.FilterRule != nil {
		return t.FilterRule
	}
	return nil
}

// GetWatermark returns the value of the Watermark struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field Watermark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetWatermark() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark {
	if t != nil && t.Watermark != nil {
		return t.Watermark
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CreditControl.PopulateDefaults()
	t.FilterRule.PopulateDefaults()
	t.Watermark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/host-specific-entry/credit-control YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl struct {
	Range *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) GetRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/host-specific-entry/credit-control/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/host-specific-entry/filter-rule YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule struct {
	Range *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) GetRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/host-specific-entry/filter-rule/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/host-specific-entry/watermark YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark struct {
	High *int32 `path:"high" module:"nokia-conf"`
	Low  *int32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) GetHigh() int32 {
	if t == nil || t.High == nil {
		return 95
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) GetLow() int32 {
	if t == nil || t.Low == nil {
		return 90
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.High == nil {
		var v int32 = 95
		t.High = &v
	}
	if t.Low == nil {
		var v int32 = 90
		t.Low = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/shared-entry YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry struct {
	FilterRule *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule `path:"filter-rule" module:"nokia-conf"`
	PccRule    *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule    `path:"pcc-rule" module:"nokia-conf"`
	Watermark  *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark  `path:"watermark" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) IsYANGGoStruct() {}

// GetOrCreateFilterRule retrieves the value of the FilterRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetOrCreateFilterRule() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule {
	if t.FilterRule != nil {
		return t.FilterRule
	}
	t.FilterRule = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule{}
	return t.FilterRule
}

// GetOrCreatePccRule retrieves the value of the PccRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetOrCreatePccRule() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule {
	if t.PccRule != nil {
		return t.PccRule
	}
	t.PccRule = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule{}
	return t.PccRule
}

// GetOrCreateWatermark retrieves the value of the Watermark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetOrCreateWatermark() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark {
	if t.Watermark != nil {
		return t.Watermark
	}
	t.Watermark = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark{}
	return t.Watermark
}

// GetFilterRule returns the value of the FilterRule struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry. If the receiver or the field FilterRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetFilterRule() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule {
	if t != nil && t.FilterRule != nil {
		return t.FilterRule
	}
	return nil
}

// GetPccRule returns the value of the PccRule struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry. If the receiver or the field PccRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetPccRule() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule {
	if t != nil && t.PccRule != nil {
		return t.PccRule
	}
	return nil
}

// GetWatermark returns the value of the Watermark struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry. If the receiver or the field Watermark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetWatermark() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark {
	if t != nil && t.Watermark != nil {
		return t.Watermark
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FilterRule.PopulateDefaults()
	t.PccRule.PopulateDefaults()
	t.Watermark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/shared-entry/filter-rule YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule struct {
	Range *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) GetRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/shared-entry/filter-rule/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/shared-entry/pcc-rule YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule struct {
	Range *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) GetOrCreateRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) GetRange() *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/shared-entry/pcc-rule/range YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark represents the /nokia-conf/configure/filter/ip-filter/subscriber-mgmt/shared-entry/watermark YANG schema element.
type NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark struct {
	High *int32 `path:"high" module:"nokia-conf"`
	Low  *int32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) GetHigh() int32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) GetLow() int32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark.
func (*NokiaConf_Configure_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception represents the /nokia-conf/configure/filter/ipv6-exception YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                    `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Filter_Ipv6Exception_Entry `path:"entry" module:"nokia-conf"`
	FilterId           *uint32                                                    `path:"filter-id" module:"nokia-conf"`
	FilterName         *string                                                    `path:"filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Filter_Ipv6Exception struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) NewEntry(EntryId uint32) (*NokiaConf_Configure_Filter_Ipv6Exception_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_Ipv6Exception_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Filter_Ipv6Exception_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Filter_Ipv6Exception struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Exception. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Filter_Ipv6Exception_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Filter_Ipv6Exception. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) GetEntry(EntryId uint32) *NokiaConf_Configure_Filter_Ipv6Exception_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Exception. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Filter_Ipv6Exception_Entry struct to the
// list Entry of NokiaConf_Configure_Filter_Ipv6Exception. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Ipv6Exception_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) AppendEntry(v *NokiaConf_Configure_Filter_Ipv6Exception_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_Ipv6Exception_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Ipv6Exception struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception.
func (*NokiaConf_Configure_Filter_Ipv6Exception) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry represents the /nokia-conf/configure/filter/ipv6-exception/entry YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                               `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                               `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) GetOrCreateMatch() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) GetMatch() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Exception_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Exception_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_Ipv6Exception_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Filter_Ipv6Exception_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Ipv6Exception_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match represents the /nokia-conf/configure/filter/ipv6-exception/entry/match YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match struct {
	DstIp      *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Icmp       *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp            `path:"icmp" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	Port       *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port            `path:"port" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetDstIp() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetDstPort() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetIcmp() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetPort() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetSrcIp() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetSrcPort() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) GetNextHeader() NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort struct {
	Eq       *uint16                                                             `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                             `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                             `path:"lt" module:"nokia-conf"`
	PortList *string                                                             `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/port YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port struct {
	Eq       *uint16                                                          `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                          `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                          `path:"lt" module:"nokia-conf"`
	PortList *string                                                          `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) GetRange() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/port/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort struct {
	Eq       *uint16                                                             `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                             `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                             `path:"lt" module:"nokia-conf"`
	PortList *string                                                             `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/filter/ipv6-exception/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Filter_Ipv6Exception_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter represents the /nokia-conf/configure/filter/ipv6-filter YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter struct {
	ApplyGroups         []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	ChainToSystemFilter *bool                                                   `path:"chain-to-system-filter" module:"nokia-conf"`
	DefaultAction       E_NokiaTypesFilter_FilterDefaultAction                  `path:"default-action" module:"nokia-conf"`
	Description         *string                                                 `path:"description" module:"nokia-conf"`
	Embed               *NokiaConf_Configure_Filter_Ipv6Filter_Embed            `path:"embed" module:"nokia-conf"`
	Entry               map[uint32]*NokiaConf_Configure_Filter_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
	FilterId            *uint32                                                 `path:"filter-id" module:"nokia-conf"`
	FilterName          *string                                                 `path:"filter-name" module:"nokia-conf"`
	Scope               E_NokiaTypesFilter_FilterScope                          `path:"scope" module:"nokia-conf"`
	SubscriberMgmt      *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt   `path:"subscriber-mgmt" module:"nokia-conf"`
	Type                E_NokiaConf_Configure_Filter_Ipv6Filter_Type            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Filter_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Filter_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_Ipv6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Filter_Ipv6Filter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Filter_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Filter_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetEntry(EntryId uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Filter_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Filter_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_Filter_Ipv6Filter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateEmbed retrieves the value of the Embed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetOrCreateEmbed() *NokiaConf_Configure_Filter_Ipv6Filter_Embed {
	if t.Embed != nil {
		return t.Embed
	}
	t.Embed = &NokiaConf_Configure_Filter_Ipv6Filter_Embed{}
	return t.Embed
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetEmbed returns the value of the Embed struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter. If the receiver or the field Embed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetEmbed() *NokiaConf_Configure_Filter_Ipv6Filter_Embed {
	if t != nil && t.Embed != nil {
		return t.Embed
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetSubscriberMgmt() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChainToSystemFilter retrieves the value of the leaf ChainToSystemFilter from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChainToSystemFilter is set, it can
// safely use t.GetChainToSystemFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChainToSystemFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetChainToSystemFilter() bool {
	if t == nil || t.ChainToSystemFilter == nil {
		return false
	}
	return *t.ChainToSystemFilter
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetDefaultAction() E_NokiaTypesFilter_FilterDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_FilterDefaultAction_drop
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetScope() E_NokiaTypesFilter_FilterScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesFilter_FilterScope_template
	}
	return t.Scope
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) GetType() E_NokiaConf_Configure_Filter_Ipv6Filter_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Filter_Ipv6Filter_Type_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ChainToSystemFilter == nil {
		var v bool = false
		t.ChainToSystemFilter = &v
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_FilterDefaultAction_drop
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesFilter_FilterScope_template
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Filter_Ipv6Filter_Type_normal
	}
	t.Embed.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Ipv6Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter.
func (*NokiaConf_Configure_Filter_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Embed represents the /nokia-conf/configure/filter/ipv6-filter/embed YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Embed struct {
	Filter   map[NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter     `path:"filter" module:"nokia-conf"`
	Flowspec map[uint32]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec                                                   `path:"flowspec" module:"nokia-conf"`
	Openflow map[NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow `path:"openflow" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Embed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed) IsYANGGoStruct() {}

// NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key represents the key for list Filter of element /nokia-conf/configure/filter/ipv6-filter/embed.
type NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key struct {
	Name   string `path:"name"`
	Offset uint32 `path:"offset"`
}

// NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key represents the key for list Openflow of element /nokia-conf/configure/filter/ipv6-filter/embed.
type NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key struct {
	OfSwitch string `path:"of-switch"`
	Offset   uint32 `path:"offset"`
}

// NewFilter creates a new entry in the Filter list of the
// NokiaConf_Configure_Filter_Ipv6Filter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) NewFilter(Name string, Offset uint32) (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter)
	}

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Filter", key)
	}

	t.Filter[key] = &NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter{
		Name:   &Name,
		Offset: &Offset,
	}

	return t.Filter[key], nil
}

// RenameFilter renames an entry in the list Filter within
// the NokiaConf_Configure_Filter_Ipv6Filter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) RenameFilter(oldK, newK NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key) error {
	if _, ok := t.Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Filter", newK)
	}

	e, ok := t.Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Filter", oldK)
	}
	e.Name = &newK.Name
	e.Offset = &newK.Offset

	t.Filter[newK] = e
	delete(t.Filter, oldK)
	return nil
}

// GetOrCreateFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) GetOrCreateFilter(Name string, Offset uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter {

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	if v, ok := t.Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFilter(Name, Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFilter got unexpected error: %v", err))
	}
	return v
}

// GetFilter retrieves the value with the specified key from
// the Filter map field of NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) GetFilter(Name string, Offset uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	if lm, ok := t.Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) DeleteFilter(Name string, Offset uint32) {
	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	delete(t.Filter, key)
}

// AppendFilter appends the supplied NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter struct to the
// list Filter of NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) AppendFilter(v *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	if v.Offset == nil {
		return fmt.Errorf("invalid nil key for Offset")
	}

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key{
		Name:   *v.Name,
		Offset: *v.Offset,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter_Key]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter)
	}

	if _, ok := t.Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Filter %v", key)
	}

	t.Filter[key] = v
	return nil
}

// NewFlowspec creates a new entry in the Flowspec list of the
// NokiaConf_Configure_Filter_Ipv6Filter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) NewFlowspec(Offset uint32) (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowspec == nil {
		t.Flowspec = make(map[uint32]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec)
	}

	key := Offset

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flowspec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flowspec", key)
	}

	t.Flowspec[key] = &NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec{
		Offset: &Offset,
	}

	return t.Flowspec[key], nil
}

// RenameFlowspec renames an entry in the list Flowspec within
// the NokiaConf_Configure_Filter_Ipv6Filter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) RenameFlowspec(oldK, newK uint32) error {
	if _, ok := t.Flowspec[newK]; ok {
		return fmt.Errorf("key %v already exists in Flowspec", newK)
	}

	e, ok := t.Flowspec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flowspec", oldK)
	}
	e.Offset = &newK

	t.Flowspec[newK] = e
	delete(t.Flowspec, oldK)
	return nil
}

// GetOrCreateFlowspec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) GetOrCreateFlowspec(Offset uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec {

	key := Offset

	if v, ok := t.Flowspec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowspec(Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowspec got unexpected error: %v", err))
	}
	return v
}

// GetFlowspec retrieves the value with the specified key from
// the Flowspec map field of NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) GetFlowspec(Offset uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec {

	if t == nil {
		return nil
	}

	key := Offset

	if lm, ok := t.Flowspec[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowspec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) DeleteFlowspec(Offset uint32) {
	key := Offset

	delete(t.Flowspec, key)
}

// AppendFlowspec appends the supplied NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec struct to the
// list Flowspec of NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) AppendFlowspec(v *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) error {
	if v.Offset == nil {
		return fmt.Errorf("invalid nil key received for Offset")
	}

	key := *v.Offset

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowspec == nil {
		t.Flowspec = make(map[uint32]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec)
	}

	if _, ok := t.Flowspec[key]; ok {
		return fmt.Errorf("duplicate key for list Flowspec %v", key)
	}

	t.Flowspec[key] = v
	return nil
}

// NewOpenflow creates a new entry in the Openflow list of the
// NokiaConf_Configure_Filter_Ipv6Filter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) NewOpenflow(OfSwitch string, Offset uint32) (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Openflow == nil {
		t.Openflow = make(map[NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow)
	}

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Openflow[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Openflow", key)
	}

	t.Openflow[key] = &NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow{
		OfSwitch: &OfSwitch,
		Offset:   &Offset,
	}

	return t.Openflow[key], nil
}

// RenameOpenflow renames an entry in the list Openflow within
// the NokiaConf_Configure_Filter_Ipv6Filter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) RenameOpenflow(oldK, newK NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key) error {
	if _, ok := t.Openflow[newK]; ok {
		return fmt.Errorf("key %v already exists in Openflow", newK)
	}

	e, ok := t.Openflow[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Openflow", oldK)
	}
	e.OfSwitch = &newK.OfSwitch
	e.Offset = &newK.Offset

	t.Openflow[newK] = e
	delete(t.Openflow, oldK)
	return nil
}

// GetOrCreateOpenflow retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) GetOrCreateOpenflow(OfSwitch string, Offset uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow {

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	if v, ok := t.Openflow[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpenflow(OfSwitch, Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpenflow got unexpected error: %v", err))
	}
	return v
}

// GetOpenflow retrieves the value with the specified key from
// the Openflow map field of NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) GetOpenflow(OfSwitch string, Offset uint32) *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	if lm, ok := t.Openflow[key]; ok {
		return lm
	}
	return nil
}

// DeleteOpenflow deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_Ipv6Filter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) DeleteOpenflow(OfSwitch string, Offset uint32) {
	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	delete(t.Openflow, key)
}

// AppendOpenflow appends the supplied NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow struct to the
// list Openflow of NokiaConf_Configure_Filter_Ipv6Filter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) AppendOpenflow(v *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) error {
	if v.OfSwitch == nil {
		return fmt.Errorf("invalid nil key for OfSwitch")
	}

	if v.Offset == nil {
		return fmt.Errorf("invalid nil key for Offset")
	}

	key := NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key{
		OfSwitch: *v.OfSwitch,
		Offset:   *v.Offset,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Openflow == nil {
		t.Openflow = make(map[NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow_Key]*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow)
	}

	if _, ok := t.Openflow[key]; ok {
		return fmt.Errorf("duplicate key for list Openflow %v", key)
	}

	t.Openflow[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Embed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.Flowspec {
		e.PopulateDefaults()
	}
	for _, e := range t.Openflow {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Embed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Embed.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter represents the /nokia-conf/configure/filter/ipv6-filter/embed/filter YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string                     `path:"name" module:"nokia-conf"`
	Offset             *uint32                     `path:"offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.Offset == nil {
		return nil, fmt.Errorf("nil value for key Offset")
	}

	return map[string]interface{}{
		"name":   *t.Name,
		"offset": *t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec represents the /nokia-conf/configure/filter/ipv6-filter/embed/flowspec YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Group              *uint32                     `path:"group" module:"nokia-conf"`
	Offset             *uint32                     `path:"offset" module:"nokia-conf"`
	RouterInstance     *string                     `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) GetGroup() uint32 {
	if t == nil || t.Group == nil {
		return 0
	}
	return *t.Group
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Offset == nil {
		return nil, fmt.Errorf("nil value for key Offset")
	}

	return map[string]interface{}{
		"offset": *t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow represents the /nokia-conf/configure/filter/ipv6-filter/embed/openflow YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Grt                YANGEmpty                   `path:"grt" module:"nokia-conf"`
	OfSwitch           *string                     `path:"of-switch" module:"nokia-conf"`
	Offset             *uint32                     `path:"offset" module:"nokia-conf"`
	Sap                *string                     `path:"sap" module:"nokia-conf"`
	System             YANGEmpty                   `path:"system" module:"nokia-conf"`
	Vpls               *string                     `path:"vpls" module:"nokia-conf"`
	Vprn               *string                     `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGrt retrieves the value of the leaf Grt from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grt is set, it can
// safely use t.GetGrt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetGrt() YANGEmpty {
	if t == nil || t.Grt == false {
		return false
	}
	return t.Grt
}

// GetOfSwitch retrieves the value of the leaf OfSwitch from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfSwitch is set, it can
// safely use t.GetOfSwitch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfSwitch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetOfSwitch() string {
	if t == nil || t.OfSwitch == nil {
		return ""
	}
	return *t.OfSwitch
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetSystem retrieves the value of the leaf System from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if System is set, it can
// safely use t.GetSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.System == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetSystem() YANGEmpty {
	if t == nil || t.System == false {
		return false
	}
	return t.System
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OfSwitch == nil {
		return nil, fmt.Errorf("nil value for key OfSwitch")
	}

	if t.Offset == nil {
		return nil, fmt.Errorf("nil value for key Offset")
	}

	return map[string]interface{}{
		"of-switch": *t.OfSwitch,
		"offset":    *t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Embed_Openflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry represents the /nokia-conf/configure/filter/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry struct {
	Action                *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action          `path:"action" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups           []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats          *bool                                                        `path:"collect-stats" module:"nokia-conf"`
	Description           *string                                                      `path:"description" module:"nokia-conf"`
	EgressPbr             E_NokiaTypesFilter_FilterEgressPbr                           `path:"egress-pbr" module:"nokia-conf"`
	EntryId               *uint32                                                      `path:"entry-id" module:"nokia-conf"`
	FilterSample          *bool                                                        `path:"filter-sample" module:"nokia-conf"`
	InterfaceSample       *bool                                                        `path:"interface-sample" module:"nokia-conf"`
	Log                   *uint32                                                      `path:"log" module:"nokia-conf"`
	Match                 *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match           `path:"match" module:"nokia-conf"`
	PbrDownActionOverride E_NokiaTypesFilter_FilterPbrDownActionOvr                    `path:"pbr-down-action-override" module:"nokia-conf"`
	SampleProfile         *uint32                                                      `path:"sample-profile" module:"nokia-conf"`
	StickyDest            NokiaConf_Configure_Filter_Ipv6Filter_Entry_StickyDest_Union `path:"sticky-dest" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetOrCreateAction() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetAction() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetMatch() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressPbr retrieves the value of the leaf EgressPbr from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPbr is set, it can
// safely use t.GetEgressPbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetEgressPbr() E_NokiaTypesFilter_FilterEgressPbr {
	if t == nil || t.EgressPbr == 0 {
		return 0
	}
	return t.EgressPbr
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetFilterSample retrieves the value of the leaf FilterSample from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterSample is set, it can
// safely use t.GetFilterSample() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterSample == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetFilterSample() bool {
	if t == nil || t.FilterSample == nil {
		return false
	}
	return *t.FilterSample
}

// GetInterfaceSample retrieves the value of the leaf InterfaceSample from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSample is set, it can
// safely use t.GetInterfaceSample() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSample == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetInterfaceSample() bool {
	if t == nil || t.InterfaceSample == nil {
		return true
	}
	return *t.InterfaceSample
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// GetPbrDownActionOverride retrieves the value of the leaf PbrDownActionOverride from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbrDownActionOverride is set, it can
// safely use t.GetPbrDownActionOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbrDownActionOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetPbrDownActionOverride() E_NokiaTypesFilter_FilterPbrDownActionOvr {
	if t == nil || t.PbrDownActionOverride == 0 {
		return 0
	}
	return t.PbrDownActionOverride
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetSampleProfile() uint32 {
	if t == nil || t.SampleProfile == nil {
		return 0
	}
	return *t.SampleProfile
}

// GetStickyDest retrieves the value of the leaf StickyDest from the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyDest is set, it can
// safely use t.GetStickyDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyDest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) GetStickyDest() NokiaConf_Configure_Filter_Ipv6Filter_Entry_StickyDest_Union {
	if t == nil || t.StickyDest == nil {
		return nil
	}
	return t.StickyDest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.FilterSample == nil {
		var v bool = false
		t.FilterSample = &v
	}
	if t.InterfaceSample == nil {
		var v bool = true
		t.InterfaceSample = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action represents the /nokia-conf/configure/filter/ipv6-filter/entry/action YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action struct {
	Accept             YANGEmpty                                                        `path:"accept" module:"nokia-conf"`
	AcceptWhen         *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen   `path:"accept-when" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Drop               YANGEmpty                                                        `path:"drop" module:"nokia-conf"`
	DropWhen           *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen     `path:"drop-when" module:"nokia-conf" yangPresence:"true"`
	Fc                 E_NokiaTypesSros_FcName                                          `path:"fc" module:"nokia-conf"`
	Forward            *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward      `path:"forward" module:"nokia-conf"`
	HttpRedirect       *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
	IgnoreMatch        YANGEmpty                                                        `path:"ignore-match" module:"nokia-conf"`
	Nat                *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat          `path:"nat" module:"nokia-conf" yangPresence:"true"`
	RateLimit          *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit    `path:"rate-limit" module:"nokia-conf" yangPresence:"true"`
	Remark             *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark       `path:"remark" module:"nokia-conf" yangPresence:"true"`
	Secondary          *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary    `path:"secondary" module:"nokia-conf" yangPresence:"true"`
	TcpMssAdjust       YANGEmpty                                                        `path:"tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAcceptWhen retrieves the value of the AcceptWhen field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateAcceptWhen() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen {
	if t.AcceptWhen != nil {
		return t.AcceptWhen
	}
	t.AcceptWhen = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen{}
	return t.AcceptWhen
}

// GetOrCreateDropWhen retrieves the value of the DropWhen field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateDropWhen() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen {
	if t.DropWhen != nil {
		return t.DropWhen
	}
	t.DropWhen = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen{}
	return t.DropWhen
}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateForward() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward{}
	return t.Forward
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateNat() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat{}
	return t.Nat
}

// GetOrCreateRateLimit retrieves the value of the RateLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateRateLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit {
	if t.RateLimit != nil {
		return t.RateLimit
	}
	t.RateLimit = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit{}
	return t.RateLimit
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateRemark() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark{}
	return t.Remark
}

// GetOrCreateSecondary retrieves the value of the Secondary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetOrCreateSecondary() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary {
	if t.Secondary != nil {
		return t.Secondary
	}
	t.Secondary = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary{}
	return t.Secondary
}

// GetAcceptWhen returns the value of the AcceptWhen struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field AcceptWhen is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetAcceptWhen() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen {
	if t != nil && t.AcceptWhen != nil {
		return t.AcceptWhen
	}
	return nil
}

// GetDropWhen returns the value of the DropWhen struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field DropWhen is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetDropWhen() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen {
	if t != nil && t.DropWhen != nil {
		return t.DropWhen
	}
	return nil
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetForward() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetNat() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetRateLimit returns the value of the RateLimit struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field RateLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetRateLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit {
	if t != nil && t.RateLimit != nil {
		return t.RateLimit
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetRemark() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetSecondary returns the value of the Secondary struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action. If the receiver or the field Secondary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetSecondary() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary {
	if t != nil && t.Secondary != nil {
		return t.Secondary
	}
	return nil
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetIgnoreMatch retrieves the value of the leaf IgnoreMatch from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMatch is set, it can
// safely use t.GetIgnoreMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetIgnoreMatch() YANGEmpty {
	if t == nil || t.IgnoreMatch == false {
		return false
	}
	return t.IgnoreMatch
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) GetTcpMssAdjust() YANGEmpty {
	if t == nil || t.TcpMssAdjust == false {
		return false
	}
	return t.TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcceptWhen.PopulateDefaults()
	t.DropWhen.PopulateDefaults()
	t.Forward.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.RateLimit.PopulateDefaults()
	t.Remark.PopulateDefaults()
	t.Secondary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/accept-when YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen struct {
	Pattern *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern `path:"pattern" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) IsYANGGoStruct() {}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) GetOrCreatePattern() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern{}
	return t.Pattern
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) GetPattern() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Pattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/accept-when/pattern YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern struct {
	Expression  *string                                                                            `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                            `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                             `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) IsYANGGoStruct() {}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) GetOffsetType() E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_AcceptWhen_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/drop-when YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen struct {
	ExtractedTraffic YANGEmpty                                                                  `path:"extracted-traffic" module:"nokia-conf"`
	HopLimit         *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit      `path:"hop-limit" module:"nokia-conf" yangPresence:"true"`
	Pattern          *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern       `path:"pattern" module:"nokia-conf" yangPresence:"true"`
	PayloadLength    *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength `path:"payload-length" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) IsYANGGoStruct() {}

// GetOrCreateHopLimit retrieves the value of the HopLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) GetOrCreateHopLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit {
	if t.HopLimit != nil {
		return t.HopLimit
	}
	t.HopLimit = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit{}
	return t.HopLimit
}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) GetOrCreatePattern() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern{}
	return t.Pattern
}

// GetOrCreatePayloadLength retrieves the value of the PayloadLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) GetOrCreatePayloadLength() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength {
	if t.PayloadLength != nil {
		return t.PayloadLength
	}
	t.PayloadLength = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength{}
	return t.PayloadLength
}

// GetHopLimit returns the value of the HopLimit struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen. If the receiver or the field HopLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) GetHopLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit {
	if t != nil && t.HopLimit != nil {
		return t.HopLimit
	}
	return nil
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) GetPattern() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// GetPayloadLength returns the value of the PayloadLength struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen. If the receiver or the field PayloadLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) GetPayloadLength() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength {
	if t != nil && t.PayloadLength != nil {
		return t.PayloadLength
	}
	return nil
}

// GetExtractedTraffic retrieves the value of the leaf ExtractedTraffic from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtractedTraffic is set, it can
// safely use t.GetExtractedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtractedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) GetExtractedTraffic() YANGEmpty {
	if t == nil || t.ExtractedTraffic == false {
		return false
	}
	return t.ExtractedTraffic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HopLimit.PopulateDefaults()
	t.Pattern.PopulateDefaults()
	t.PayloadLength.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/drop-when/hop-limit YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit struct {
	Eq    *int32                                                                      `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                      `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                      `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/drop-when/hop-limit/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_HopLimit_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/drop-when/pattern YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern struct {
	Expression  *string                                                                          `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                          `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                           `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) IsYANGGoStruct() {}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) GetOffsetType() E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/drop-when/payload-length YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength struct {
	Eq    *int32                                                                           `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                           `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                           `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/drop-when/payload-length/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_DropWhen_PayloadLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward struct {
	BondingConnection *uint32                                                                `path:"bonding-connection" module:"nokia-conf"`
	EsiL2             *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2      `path:"esi-l2" module:"nokia-conf" yangPresence:"true"`
	EsiL3             *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3      `path:"esi-l3" module:"nokia-conf" yangPresence:"true"`
	GreTunnel         *string                                                                `path:"gre-tunnel" module:"nokia-conf"`
	Lsp               *string                                                                `path:"lsp" module:"nokia-conf"`
	MplsPolicy        *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy `path:"mpls-policy" module:"nokia-conf" yangPresence:"true"`
	NextHop           *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop    `path:"next-hop" module:"nokia-conf" yangPresence:"true"`
	RedirectPolicy    *string                                                                `path:"redirect-policy" module:"nokia-conf"`
	RouterInstance    *string                                                                `path:"router-instance" module:"nokia-conf"`
	Sap               *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap        `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp               *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp        `path:"sdp" module:"nokia-conf" yangPresence:"true"`
	SrtePolicy        *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy `path:"srte-policy" module:"nokia-conf" yangPresence:"true"`
	VprnTarget        *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget `path:"vprn-target" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) IsYANGGoStruct() {}

// GetOrCreateEsiL2 retrieves the value of the EsiL2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateEsiL2() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2 {
	if t.EsiL2 != nil {
		return t.EsiL2
	}
	t.EsiL2 = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2{}
	return t.EsiL2
}

// GetOrCreateEsiL3 retrieves the value of the EsiL3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateEsiL3() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3 {
	if t.EsiL3 != nil {
		return t.EsiL3
	}
	t.EsiL3 = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3{}
	return t.EsiL3
}

// GetOrCreateMplsPolicy retrieves the value of the MplsPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateMplsPolicy() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy {
	if t.MplsPolicy != nil {
		return t.MplsPolicy
	}
	t.MplsPolicy = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy{}
	return t.MplsPolicy
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateNextHop() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop{}
	return t.NextHop
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateSap() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateSdp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp{}
	return t.Sdp
}

// GetOrCreateSrtePolicy retrieves the value of the SrtePolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateSrtePolicy() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy {
	if t.SrtePolicy != nil {
		return t.SrtePolicy
	}
	t.SrtePolicy = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy{}
	return t.SrtePolicy
}

// GetOrCreateVprnTarget retrieves the value of the VprnTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetOrCreateVprnTarget() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget {
	if t.VprnTarget != nil {
		return t.VprnTarget
	}
	t.VprnTarget = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget{}
	return t.VprnTarget
}

// GetEsiL2 returns the value of the EsiL2 struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field EsiL2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetEsiL2() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2 {
	if t != nil && t.EsiL2 != nil {
		return t.EsiL2
	}
	return nil
}

// GetEsiL3 returns the value of the EsiL3 struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field EsiL3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetEsiL3() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3 {
	if t != nil && t.EsiL3 != nil {
		return t.EsiL3
	}
	return nil
}

// GetMplsPolicy returns the value of the MplsPolicy struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field MplsPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetMplsPolicy() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy {
	if t != nil && t.MplsPolicy != nil {
		return t.MplsPolicy
	}
	return nil
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetNextHop() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetSap() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetSdp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// GetSrtePolicy returns the value of the SrtePolicy struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field SrtePolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetSrtePolicy() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy {
	if t != nil && t.SrtePolicy != nil {
		return t.SrtePolicy
	}
	return nil
}

// GetVprnTarget returns the value of the VprnTarget struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward. If the receiver or the field VprnTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetVprnTarget() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget {
	if t != nil && t.VprnTarget != nil {
		return t.VprnTarget
	}
	return nil
}

// GetBondingConnection retrieves the value of the leaf BondingConnection from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BondingConnection is set, it can
// safely use t.GetBondingConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BondingConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetBondingConnection() uint32 {
	if t == nil || t.BondingConnection == nil {
		return 0
	}
	return *t.BondingConnection
}

// GetGreTunnel retrieves the value of the leaf GreTunnel from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTunnel is set, it can
// safely use t.GetGreTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetGreTunnel() string {
	if t == nil || t.GreTunnel == nil {
		return ""
	}
	return *t.GreTunnel
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetRedirectPolicy retrieves the value of the leaf RedirectPolicy from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectPolicy is set, it can
// safely use t.GetRedirectPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetRedirectPolicy() string {
	if t == nil || t.RedirectPolicy == nil {
		return ""
	}
	return *t.RedirectPolicy
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EsiL2.PopulateDefaults()
	t.EsiL3.PopulateDefaults()
	t.MplsPolicy.PopulateDefaults()
	t.NextHop.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
	t.SrtePolicy.PopulateDefaults()
	t.VprnTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2 represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/esi-l2 YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2 struct {
	EsiValue *string `path:"esi-value" module:"nokia-conf"`
	Vpls     *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) IsYANGGoStruct() {}

// GetEsiValue retrieves the value of the leaf EsiValue from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiValue is set, it can
// safely use t.GetEsiValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) GetEsiValue() string {
	if t == nil || t.EsiValue == nil {
		return ""
	}
	return *t.EsiValue
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3 represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/esi-l3 YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3 struct {
	EsiValue     *string `path:"esi-value" module:"nokia-conf"`
	SfIp         *string `path:"sf-ip" module:"nokia-conf"`
	VasInterface *string `path:"vas-interface" module:"nokia-conf"`
	Vprn         *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) IsYANGGoStruct() {}

// GetEsiValue retrieves the value of the leaf EsiValue from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiValue is set, it can
// safely use t.GetEsiValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) GetEsiValue() string {
	if t == nil || t.EsiValue == nil {
		return ""
	}
	return *t.EsiValue
}

// GetSfIp retrieves the value of the leaf SfIp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfIp is set, it can
// safely use t.GetSfIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) GetSfIp() string {
	if t == nil || t.SfIp == nil {
		return ""
	}
	return *t.SfIp
}

// GetVasInterface retrieves the value of the leaf VasInterface from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasInterface is set, it can
// safely use t.GetVasInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) GetVasInterface() string {
	if t == nil || t.VasInterface == nil {
		return ""
	}
	return *t.VasInterface
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_EsiL3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/mpls-policy YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy struct {
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy) IsYANGGoStruct() {}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_MplsPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/next-hop YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop struct {
	NhIp    *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp    `path:"nh-ip" module:"nokia-conf" yangPresence:"true"`
	NhIpVrf *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf `path:"nh-ip-vrf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) IsYANGGoStruct() {}

// GetOrCreateNhIp retrieves the value of the NhIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) GetOrCreateNhIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp {
	if t.NhIp != nil {
		return t.NhIp
	}
	t.NhIp = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp{}
	return t.NhIp
}

// GetOrCreateNhIpVrf retrieves the value of the NhIpVrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) GetOrCreateNhIpVrf() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf {
	if t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	t.NhIpVrf = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf{}
	return t.NhIpVrf
}

// GetNhIp returns the value of the NhIp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop. If the receiver or the field NhIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) GetNhIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp {
	if t != nil && t.NhIp != nil {
		return t.NhIp
	}
	return nil
}

// GetNhIpVrf returns the value of the NhIpVrf struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop. If the receiver or the field NhIpVrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) GetNhIpVrf() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf {
	if t != nil && t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NhIp.PopulateDefaults()
	t.NhIpVrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/next-hop/nh-ip YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp struct {
	Address  *string `path:"address" module:"nokia-conf"`
	Indirect *bool   `path:"indirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/next-hop/nh-ip-vrf YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Indirect       *bool   `path:"indirect" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_NextHop_NhIpVrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/sap YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) IsYANGGoStruct() {}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/sdp YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) IsYANGGoStruct() {}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/srte-policy YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy struct {
	Color    *int64  `path:"color" module:"nokia-conf"`
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) IsYANGGoStruct() {}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_SrtePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/forward/vprn-target YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget struct {
	AdvPrefix *string `path:"adv-prefix" module:"nokia-conf"`
	BgpNh     *string `path:"bgp-nh" module:"nokia-conf"`
	Lsp       *string `path:"lsp" module:"nokia-conf"`
	Vprn      *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) IsYANGGoStruct() {}

// GetAdvPrefix retrieves the value of the leaf AdvPrefix from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvPrefix is set, it can
// safely use t.GetAdvPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) GetAdvPrefix() string {
	if t == nil || t.AdvPrefix == nil {
		return ""
	}
	return *t.AdvPrefix
}

// GetBgpNh retrieves the value of the leaf BgpNh from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpNh is set, it can
// safely use t.GetBgpNh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpNh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) GetBgpNh() string {
	if t == nil || t.BgpNh == nil {
		return ""
	}
	return *t.BgpNh
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Forward_VprnTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect struct {
	AllowOverride *bool                                                                     `path:"allow-override" module:"nokia-conf"`
	Url           NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect_Url_Union `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) IsYANGGoStruct() {}

// GetAllowOverride retrieves the value of the leaf AllowOverride from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOverride is set, it can
// safely use t.GetAllowOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) GetAllowOverride() bool {
	if t == nil || t.AllowOverride == nil {
		return false
	}
	return *t.AllowOverride
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) GetUrl() NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect_Url_Union {
	if t == nil || t.Url == nil {
		return nil
	}
	return t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowOverride == nil {
		var v bool = false
		t.AllowOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/nat YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat struct {
	NatPolicy *string                    `path:"nat-policy" module:"nokia-conf"`
	NatType   E_NokiaTypesFilter_NatType `path:"nat-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) IsYANGGoStruct() {}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetNatType retrieves the value of the leaf NatType from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatType is set, it can
// safely use t.GetNatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) GetNatType() E_NokiaTypesFilter_NatType {
	if t == nil || t.NatType == 0 {
		return 0
	}
	return t.NatType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/rate-limit YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit struct {
	ExtractedTraffic YANGEmpty                                                                   `path:"extracted-traffic" module:"nokia-conf"`
	HopLimit         *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit      `path:"hop-limit" module:"nokia-conf" yangPresence:"true"`
	Pattern          *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern       `path:"pattern" module:"nokia-conf" yangPresence:"true"`
	PayloadLength    *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength `path:"payload-length" module:"nokia-conf" yangPresence:"true"`
	Pir              NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pir_Union      `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) IsYANGGoStruct() {}

// GetOrCreateHopLimit retrieves the value of the HopLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetOrCreateHopLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit {
	if t.HopLimit != nil {
		return t.HopLimit
	}
	t.HopLimit = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit{}
	return t.HopLimit
}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetOrCreatePattern() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern{}
	return t.Pattern
}

// GetOrCreatePayloadLength retrieves the value of the PayloadLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetOrCreatePayloadLength() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength {
	if t.PayloadLength != nil {
		return t.PayloadLength
	}
	t.PayloadLength = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength{}
	return t.PayloadLength
}

// GetHopLimit returns the value of the HopLimit struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit. If the receiver or the field HopLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetHopLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit {
	if t != nil && t.HopLimit != nil {
		return t.HopLimit
	}
	return nil
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetPattern() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// GetPayloadLength returns the value of the PayloadLength struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit. If the receiver or the field PayloadLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetPayloadLength() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength {
	if t != nil && t.PayloadLength != nil {
		return t.PayloadLength
	}
	return nil
}

// GetExtractedTraffic retrieves the value of the leaf ExtractedTraffic from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtractedTraffic is set, it can
// safely use t.GetExtractedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtractedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetExtractedTraffic() YANGEmpty {
	if t == nil || t.ExtractedTraffic == false {
		return false
	}
	return t.ExtractedTraffic
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) GetPir() NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HopLimit.PopulateDefaults()
	t.Pattern.PopulateDefaults()
	t.PayloadLength.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/rate-limit/hop-limit YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit struct {
	Eq    *int32                                                                       `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                       `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                       `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/rate-limit/hop-limit/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_HopLimit_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/rate-limit/pattern YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern struct {
	Expression  *string                                                                           `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                           `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                            `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) IsYANGGoStruct() {}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) GetOffsetType() E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/rate-limit/payload-length YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength struct {
	Eq    *int32                                                                            `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                            `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                            `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/rate-limit/payload-length/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_RateLimit_PayloadLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/remark YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Forward            *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward `path:"forward" module:"nokia-conf"`
	Remark             *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark  `path:"remark" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) GetOrCreateForward() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward{}
	return t.Forward
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) GetOrCreateRemark() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark{}
	return t.Remark
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) GetForward() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) GetRemark() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Forward.PopulateDefaults()
	t.Remark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary/forward YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward struct {
	NextHop    *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop    `path:"next-hop" module:"nokia-conf" yangPresence:"true"`
	Sap        *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap        `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp        *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp        `path:"sdp" module:"nokia-conf" yangPresence:"true"`
	VprnTarget *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget `path:"vprn-target" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) IsYANGGoStruct() {}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetOrCreateNextHop() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop{}
	return t.NextHop
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetOrCreateSap() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetOrCreateSdp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp{}
	return t.Sdp
}

// GetOrCreateVprnTarget retrieves the value of the VprnTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetOrCreateVprnTarget() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget {
	if t.VprnTarget != nil {
		return t.VprnTarget
	}
	t.VprnTarget = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget{}
	return t.VprnTarget
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetNextHop() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetSap() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetSdp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// GetVprnTarget returns the value of the VprnTarget struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward. If the receiver or the field VprnTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) GetVprnTarget() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget {
	if t != nil && t.VprnTarget != nil {
		return t.VprnTarget
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NextHop.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
	t.VprnTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary/forward/next-hop YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop struct {
	NhIpVrf *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf `path:"nh-ip-vrf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) IsYANGGoStruct() {
}

// GetOrCreateNhIpVrf retrieves the value of the NhIpVrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) GetOrCreateNhIpVrf() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf {
	if t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	t.NhIpVrf = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf{}
	return t.NhIpVrf
}

// GetNhIpVrf returns the value of the NhIpVrf struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop. If the receiver or the field NhIpVrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) GetNhIpVrf() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf {
	if t != nil && t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NhIpVrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary/forward/next-hop/nh-ip-vrf YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Indirect       *bool   `path:"indirect" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary/forward/sap YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) IsYANGGoStruct() {}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary/forward/sdp YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) IsYANGGoStruct() {}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary/forward/vprn-target YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget struct {
	AdvPrefix *string `path:"adv-prefix" module:"nokia-conf"`
	BgpNh     *string `path:"bgp-nh" module:"nokia-conf"`
	Lsp       *string `path:"lsp" module:"nokia-conf"`
	Vprn      *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) IsYANGGoStruct() {
}

// GetAdvPrefix retrieves the value of the leaf AdvPrefix from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvPrefix is set, it can
// safely use t.GetAdvPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) GetAdvPrefix() string {
	if t == nil || t.AdvPrefix == nil {
		return ""
	}
	return *t.AdvPrefix
}

// GetBgpNh retrieves the value of the leaf BgpNh from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpNh is set, it can
// safely use t.GetBgpNh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpNh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) GetBgpNh() string {
	if t == nil || t.BgpNh == nil {
		return ""
	}
	return *t.BgpNh
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Forward_VprnTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark represents the /nokia-conf/configure/filter/ipv6-filter/entry/action/secondary/remark YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Action_Secondary_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match represents the /nokia-conf/configure/filter/ipv6-filter/entry/match YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match struct {
	DestinationClass *uint32                                                            `path:"destination-class" module:"nokia-conf"`
	Dscp             E_NokiaTypesQos_DscpName                                           `path:"dscp" module:"nokia-conf"`
	DstIp            *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort          *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	ExtensionHeader  *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader `path:"extension-header" module:"nokia-conf"`
	FlowLabel        *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel       `path:"flow-label" module:"nokia-conf" yangPresence:"true"`
	Fragment         E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	HopLimit         *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit        `path:"hop-limit" module:"nokia-conf" yangPresence:"true"`
	Icmp             *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp            `path:"icmp" module:"nokia-conf"`
	Ip               *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip              `path:"ip" module:"nokia-conf"`
	NextHeader       NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	NextHeaderList   *string                                                            `path:"next-header-list" module:"nokia-conf"`
	PacketLength     *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength    `path:"packet-length" module:"nokia-conf" yangPresence:"true"`
	Port             *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port            `path:"port" module:"nokia-conf"`
	SrcIp            *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcMac           *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac          `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
	SrcPort          *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
	TcpFlags         *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags        `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateExtensionHeader retrieves the value of the ExtensionHeader field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateExtensionHeader() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader {
	if t.ExtensionHeader != nil {
		return t.ExtensionHeader
	}
	t.ExtensionHeader = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader{}
	return t.ExtensionHeader
}

// GetOrCreateFlowLabel retrieves the value of the FlowLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateFlowLabel() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel {
	if t.FlowLabel != nil {
		return t.FlowLabel
	}
	t.FlowLabel = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel{}
	return t.FlowLabel
}

// GetOrCreateHopLimit retrieves the value of the HopLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateHopLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit {
	if t.HopLimit != nil {
		return t.HopLimit
	}
	t.HopLimit = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit{}
	return t.HopLimit
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateIp retrieves the value of the Ip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip {
	if t.Ip != nil {
		return t.Ip
	}
	t.Ip = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip{}
	return t.Ip
}

// GetOrCreatePacketLength retrieves the value of the PacketLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreatePacketLength() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength {
	if t.PacketLength != nil {
		return t.PacketLength
	}
	t.PacketLength = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength{}
	return t.PacketLength
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetDstIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetDstPort() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetExtensionHeader returns the value of the ExtensionHeader struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field ExtensionHeader is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetExtensionHeader() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader {
	if t != nil && t.ExtensionHeader != nil {
		return t.ExtensionHeader
	}
	return nil
}

// GetFlowLabel returns the value of the FlowLabel struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field FlowLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetFlowLabel() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel {
	if t != nil && t.FlowLabel != nil {
		return t.FlowLabel
	}
	return nil
}

// GetHopLimit returns the value of the HopLimit struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field HopLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetHopLimit() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit {
	if t != nil && t.HopLimit != nil {
		return t.HopLimit
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetIcmp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIp returns the value of the Ip struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field Ip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip {
	if t != nil && t.Ip != nil {
		return t.Ip
	}
	return nil
}

// GetPacketLength returns the value of the PacketLength struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field PacketLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetPacketLength() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength {
	if t != nil && t.PacketLength != nil {
		return t.PacketLength
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetPort() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetSrcMac() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetFragment() E_NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetNextHeader() NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetNextHeaderList retrieves the value of the leaf NextHeaderList from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeaderList is set, it can
// safely use t.GetNextHeaderList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeaderList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) GetNextHeaderList() string {
	if t == nil || t.NextHeaderList == nil {
		return ""
	}
	return *t.NextHeaderList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.ExtensionHeader.PopulateDefaults()
	t.FlowLabel.PopulateDefaults()
	t.HopLimit.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.Ip.PopulateDefaults()
	t.PacketLength.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort struct {
	Eq       *uint16                                                          `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                          `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                          `path:"lt" module:"nokia-conf"`
	PortList *string                                                          `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/extension-header YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader struct {
	Ah           *bool `path:"ah" module:"nokia-conf"`
	Esp          *bool `path:"esp" module:"nokia-conf"`
	HopByHop     *bool `path:"hop-by-hop" module:"nokia-conf"`
	RoutingType0 *bool `path:"routing-type0" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) IsYANGGoStruct() {}

// GetAh retrieves the value of the leaf Ah from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ah is set, it can
// safely use t.GetAh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ah == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) GetAh() bool {
	if t == nil || t.Ah == nil {
		return false
	}
	return *t.Ah
}

// GetEsp retrieves the value of the leaf Esp from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esp is set, it can
// safely use t.GetEsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) GetEsp() bool {
	if t == nil || t.Esp == nil {
		return false
	}
	return *t.Esp
}

// GetHopByHop retrieves the value of the leaf HopByHop from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopByHop is set, it can
// safely use t.GetHopByHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopByHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) GetHopByHop() bool {
	if t == nil || t.HopByHop == nil {
		return false
	}
	return *t.HopByHop
}

// GetRoutingType0 retrieves the value of the leaf RoutingType0 from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutingType0 is set, it can
// safely use t.GetRoutingType0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutingType0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) GetRoutingType0() bool {
	if t == nil || t.RoutingType0 == nil {
		return false
	}
	return *t.RoutingType0
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/flow-label YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel struct {
	Mask  *int32 `path:"mask" module:"nokia-conf"`
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 1048575
	}
	return *t.Mask
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 1048575
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_FlowLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/hop-limit YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit struct {
	Eq    *int32                                                            `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                            `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                            `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/hop-limit/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_HopLimit_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/ip YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/packet-length YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength struct {
	Eq    *int32                                                                `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/packet-length/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_PacketLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/port YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port struct {
	Eq       *uint16                                                       `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                       `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                       `path:"lt" module:"nokia-conf"`
	PortList *string                                                       `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/port/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort struct {
	Eq       *uint16                                                          `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                          `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                          `path:"lt" module:"nokia-conf"`
	PortList *string                                                          `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags represents the /nokia-conf/configure/filter/ipv6-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Cwr *bool `path:"cwr" module:"nokia-conf"`
	Ece *bool `path:"ece" module:"nokia-conf"`
	Fin *bool `path:"fin" module:"nokia-conf"`
	Ns  *bool `path:"ns" module:"nokia-conf"`
	Psh *bool `path:"psh" module:"nokia-conf"`
	Rst *bool `path:"rst" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
	Urg *bool `path:"urg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) IsYANGGoStruct() {}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetCwr retrieves the value of the leaf Cwr from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cwr is set, it can
// safely use t.GetCwr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cwr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetCwr() bool {
	if t == nil || t.Cwr == nil {
		return false
	}
	return *t.Cwr
}

// GetEce retrieves the value of the leaf Ece from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ece is set, it can
// safely use t.GetEce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ece == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetEce() bool {
	if t == nil || t.Ece == nil {
		return false
	}
	return *t.Ece
}

// GetFin retrieves the value of the leaf Fin from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fin is set, it can
// safely use t.GetFin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetFin() bool {
	if t == nil || t.Fin == nil {
		return false
	}
	return *t.Fin
}

// GetNs retrieves the value of the leaf Ns from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ns is set, it can
// safely use t.GetNs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetNs() bool {
	if t == nil || t.Ns == nil {
		return false
	}
	return *t.Ns
}

// GetPsh retrieves the value of the leaf Psh from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Psh is set, it can
// safely use t.GetPsh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Psh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetPsh() bool {
	if t == nil || t.Psh == nil {
		return false
	}
	return *t.Psh
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetRst() bool {
	if t == nil || t.Rst == nil {
		return false
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// GetUrg retrieves the value of the leaf Urg from the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Urg is set, it can
// safely use t.GetUrg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Urg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) GetUrg() bool {
	if t == nil || t.Urg == nil {
		return false
	}
	return *t.Urg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Filter_Ipv6Filter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt struct {
	HostSpecificEntry *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry `path:"host-specific-entry" module:"nokia-conf"`
	SharedEntry       *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry       `path:"shared-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateHostSpecificEntry retrieves the value of the HostSpecificEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) GetOrCreateHostSpecificEntry() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry {
	if t.HostSpecificEntry != nil {
		return t.HostSpecificEntry
	}
	t.HostSpecificEntry = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry{}
	return t.HostSpecificEntry
}

// GetOrCreateSharedEntry retrieves the value of the SharedEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) GetOrCreateSharedEntry() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry {
	if t.SharedEntry != nil {
		return t.SharedEntry
	}
	t.SharedEntry = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry{}
	return t.SharedEntry
}

// GetHostSpecificEntry returns the value of the HostSpecificEntry struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt. If the receiver or the field HostSpecificEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) GetHostSpecificEntry() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry {
	if t != nil && t.HostSpecificEntry != nil {
		return t.HostSpecificEntry
	}
	return nil
}

// GetSharedEntry returns the value of the SharedEntry struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt. If the receiver or the field SharedEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) GetSharedEntry() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry {
	if t != nil && t.SharedEntry != nil {
		return t.SharedEntry
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HostSpecificEntry.PopulateDefaults()
	t.SharedEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/host-specific-entry YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry struct {
	CreditControl *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl `path:"credit-control" module:"nokia-conf"`
	FilterRule    *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule    `path:"filter-rule" module:"nokia-conf"`
	Watermark     *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark     `path:"watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) IsYANGGoStruct() {}

// GetOrCreateCreditControl retrieves the value of the CreditControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) GetOrCreateCreditControl() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl {
	if t.CreditControl != nil {
		return t.CreditControl
	}
	t.CreditControl = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl{}
	return t.CreditControl
}

// GetOrCreateFilterRule retrieves the value of the FilterRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) GetOrCreateFilterRule() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule {
	if t.FilterRule != nil {
		return t.FilterRule
	}
	t.FilterRule = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule{}
	return t.FilterRule
}

// GetOrCreateWatermark retrieves the value of the Watermark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) GetOrCreateWatermark() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark {
	if t.Watermark != nil {
		return t.Watermark
	}
	t.Watermark = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark{}
	return t.Watermark
}

// GetCreditControl returns the value of the CreditControl struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field CreditControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) GetCreditControl() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl {
	if t != nil && t.CreditControl != nil {
		return t.CreditControl
	}
	return nil
}

// GetFilterRule returns the value of the FilterRule struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field FilterRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) GetFilterRule() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule {
	if t != nil && t.FilterRule != nil {
		return t.FilterRule
	}
	return nil
}

// GetWatermark returns the value of the Watermark struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field Watermark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) GetWatermark() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark {
	if t != nil && t.Watermark != nil {
		return t.Watermark
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CreditControl.PopulateDefaults()
	t.FilterRule.PopulateDefaults()
	t.Watermark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/host-specific-entry/credit-control YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl struct {
	Range *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/host-specific-entry/credit-control/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/host-specific-entry/filter-rule YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule struct {
	Range *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/host-specific-entry/filter-rule/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/host-specific-entry/watermark YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark struct {
	High *int32 `path:"high" module:"nokia-conf"`
	Low  *int32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) GetHigh() int32 {
	if t == nil || t.High == nil {
		return 95
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) GetLow() int32 {
	if t == nil || t.Low == nil {
		return 90
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.High == nil {
		var v int32 = 95
		t.High = &v
	}
	if t.Low == nil {
		var v int32 = 90
		t.Low = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/shared-entry YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry struct {
	FilterRule *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule `path:"filter-rule" module:"nokia-conf"`
	PccRule    *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule    `path:"pcc-rule" module:"nokia-conf"`
	Watermark  *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark  `path:"watermark" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) IsYANGGoStruct() {}

// GetOrCreateFilterRule retrieves the value of the FilterRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) GetOrCreateFilterRule() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule {
	if t.FilterRule != nil {
		return t.FilterRule
	}
	t.FilterRule = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule{}
	return t.FilterRule
}

// GetOrCreatePccRule retrieves the value of the PccRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) GetOrCreatePccRule() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule {
	if t.PccRule != nil {
		return t.PccRule
	}
	t.PccRule = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule{}
	return t.PccRule
}

// GetOrCreateWatermark retrieves the value of the Watermark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) GetOrCreateWatermark() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark {
	if t.Watermark != nil {
		return t.Watermark
	}
	t.Watermark = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark{}
	return t.Watermark
}

// GetFilterRule returns the value of the FilterRule struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry. If the receiver or the field FilterRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) GetFilterRule() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule {
	if t != nil && t.FilterRule != nil {
		return t.FilterRule
	}
	return nil
}

// GetPccRule returns the value of the PccRule struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry. If the receiver or the field PccRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) GetPccRule() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule {
	if t != nil && t.PccRule != nil {
		return t.PccRule
	}
	return nil
}

// GetWatermark returns the value of the Watermark struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry. If the receiver or the field Watermark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) GetWatermark() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark {
	if t != nil && t.Watermark != nil {
		return t.Watermark
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FilterRule.PopulateDefaults()
	t.PccRule.PopulateDefaults()
	t.Watermark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/shared-entry/filter-rule YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule struct {
	Range *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/shared-entry/filter-rule/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/shared-entry/pcc-rule YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule struct {
	Range *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) GetOrCreateRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) GetRange() *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/shared-entry/pcc-rule/range YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark represents the /nokia-conf/configure/filter/ipv6-filter/subscriber-mgmt/shared-entry/watermark YANG schema element.
type NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark struct {
	High *int32 `path:"high" module:"nokia-conf"`
	Low  *int32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) GetHigh() int32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) GetLow() int32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark.
func (*NokiaConf_Configure_Filter_Ipv6Filter_SubscriberMgmt_SharedEntry_Watermark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Log represents the /nokia-conf/configure/filter/log YANG schema element.
type NokiaConf_Configure_Filter_Log struct {
	AdminState         E_NokiaTypesSros_AdminState                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                     `path:"description" module:"nokia-conf"`
	Destination        *NokiaConf_Configure_Filter_Log_Destination `path:"destination" module:"nokia-conf"`
	LogId              *uint32                                     `path:"log-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Log) IsYANGGoStruct() {}

// GetOrCreateDestination retrieves the value of the Destination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Log) GetOrCreateDestination() *NokiaConf_Configure_Filter_Log_Destination {
	if t.Destination != nil {
		return t.Destination
	}
	t.Destination = &NokiaConf_Configure_Filter_Log_Destination{}
	return t.Destination
}

// GetDestination returns the value of the Destination struct pointer
// from NokiaConf_Configure_Filter_Log. If the receiver or the field Destination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Log) GetDestination() *NokiaConf_Configure_Filter_Log_Destination {
	if t != nil && t.Destination != nil {
		return t.Destination
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLogId retrieves the value of the leaf LogId from the NokiaConf_Configure_Filter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogId is set, it can
// safely use t.GetLogId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log) GetLogId() uint32 {
	if t == nil || t.LogId == nil {
		return 0
	}
	return *t.LogId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Destination.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_Log struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_Log) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LogId == nil {
		return nil, fmt.Errorf("nil value for key LogId")
	}

	return map[string]interface{}{
		"log-id": *t.LogId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Log.
func (*NokiaConf_Configure_Filter_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Log_Destination represents the /nokia-conf/configure/filter/log/destination YANG schema element.
type NokiaConf_Configure_Filter_Log_Destination struct {
	Memory *NokiaConf_Configure_Filter_Log_Destination_Memory `path:"memory" module:"nokia-conf"`
	Syslog *NokiaConf_Configure_Filter_Log_Destination_Syslog `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Log_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Log_Destination) IsYANGGoStruct() {}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Log_Destination) GetOrCreateMemory() *NokiaConf_Configure_Filter_Log_Destination_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &NokiaConf_Configure_Filter_Log_Destination_Memory{}
	return t.Memory
}

// GetOrCreateSyslog retrieves the value of the Syslog field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Log_Destination) GetOrCreateSyslog() *NokiaConf_Configure_Filter_Log_Destination_Syslog {
	if t.Syslog != nil {
		return t.Syslog
	}
	t.Syslog = &NokiaConf_Configure_Filter_Log_Destination_Syslog{}
	return t.Syslog
}

// GetMemory returns the value of the Memory struct pointer
// from NokiaConf_Configure_Filter_Log_Destination. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Log_Destination) GetMemory() *NokiaConf_Configure_Filter_Log_Destination_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetSyslog returns the value of the Syslog struct pointer
// from NokiaConf_Configure_Filter_Log_Destination. If the receiver or the field Syslog is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Log_Destination) GetSyslog() *NokiaConf_Configure_Filter_Log_Destination_Syslog {
	if t != nil && t.Syslog != nil {
		return t.Syslog
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Log_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Log_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Memory.PopulateDefaults()
	t.Syslog.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Log_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Log_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Log_Destination.
func (*NokiaConf_Configure_Filter_Log_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Log_Destination_Memory represents the /nokia-conf/configure/filter/log/destination/memory YANG schema element.
type NokiaConf_Configure_Filter_Log_Destination_Memory struct {
	MaxEntries *uint32 `path:"max-entries" module:"nokia-conf"`
	StopOnFull *bool   `path:"stop-on-full" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Log_Destination_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Log_Destination_Memory) IsYANGGoStruct() {}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Filter_Log_Destination_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log_Destination_Memory) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 1000
	}
	return *t.MaxEntries
}

// GetStopOnFull retrieves the value of the leaf StopOnFull from the NokiaConf_Configure_Filter_Log_Destination_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StopOnFull is set, it can
// safely use t.GetStopOnFull() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StopOnFull == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log_Destination_Memory) GetStopOnFull() bool {
	if t == nil || t.StopOnFull == nil {
		return false
	}
	return *t.StopOnFull
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Log_Destination_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Log_Destination_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxEntries == nil {
		var v uint32 = 1000
		t.MaxEntries = &v
	}
	if t.StopOnFull == nil {
		var v bool = false
		t.StopOnFull = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Log_Destination_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination_Memory) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Log_Destination_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Log_Destination_Memory.
func (*NokiaConf_Configure_Filter_Log_Destination_Memory) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Log_Destination_Syslog represents the /nokia-conf/configure/filter/log/destination/syslog YANG schema element.
type NokiaConf_Configure_Filter_Log_Destination_Syslog struct {
	Name     *string                                                    `path:"name" module:"nokia-conf"`
	Summary  *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary `path:"summary" module:"nokia-conf"`
	SyslogId *string                                                    `path:"syslog-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Log_Destination_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Log_Destination_Syslog) IsYANGGoStruct() {}

// GetOrCreateSummary retrieves the value of the Summary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) GetOrCreateSummary() *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary {
	if t.Summary != nil {
		return t.Summary
	}
	t.Summary = &NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary{}
	return t.Summary
}

// GetSummary returns the value of the Summary struct pointer
// from NokiaConf_Configure_Filter_Log_Destination_Syslog. If the receiver or the field Summary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) GetSummary() *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary {
	if t != nil && t.Summary != nil {
		return t.Summary
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Filter_Log_Destination_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSyslogId retrieves the value of the leaf SyslogId from the NokiaConf_Configure_Filter_Log_Destination_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyslogId is set, it can
// safely use t.GetSyslogId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyslogId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) GetSyslogId() string {
	if t == nil || t.SyslogId == nil {
		return ""
	}
	return *t.SyslogId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Log_Destination_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Summary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Log_Destination_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Log_Destination_Syslog.
func (*NokiaConf_Configure_Filter_Log_Destination_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary represents the /nokia-conf/configure/filter/log/destination/syslog/summary YANG schema element.
type NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary struct {
	AdminState  E_NokiaTypesSros_AdminState                  `path:"admin-state" module:"nokia-conf"`
	SummaryCrit E_NokiaTypesFilter_FilterLogSummaryCriterion `path:"summary-crit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetSummaryCrit retrieves the value of the leaf SummaryCrit from the NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummaryCrit is set, it can
// safely use t.GetSummaryCrit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummaryCrit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) GetSummaryCrit() E_NokiaTypesFilter_FilterLogSummaryCriterion {
	if t == nil || t.SummaryCrit == 0 {
		return NokiaTypesFilter_FilterLogSummaryCriterion_src_addr
	}
	return t.SummaryCrit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SummaryCrit == 0 {
		t.SummaryCrit = NokiaTypesFilter_FilterLogSummaryCriterion_src_addr
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary.
func (*NokiaConf_Configure_Filter_Log_Destination_Syslog_Summary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter represents the /nokia-conf/configure/filter/mac-filter YANG schema element.
type NokiaConf_Configure_Filter_MacFilter struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      E_NokiaTypesFilter_FilterDefaultAction                 `path:"default-action" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	Embed              *NokiaConf_Configure_Filter_MacFilter_Embed            `path:"embed" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Filter_MacFilter_Entry `path:"entry" module:"nokia-conf"`
	FilterId           *uint32                                                `path:"filter-id" module:"nokia-conf"`
	FilterName         *string                                                `path:"filter-name" module:"nokia-conf"`
	Scope              E_NokiaTypesFilter_FilterScope                         `path:"scope" module:"nokia-conf"`
	Type               E_NokiaTypesQos_MacFilterType                          `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Filter_MacFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MacFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Filter_MacFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_MacFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Filter_MacFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Filter_MacFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MacFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MacFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MacFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Filter_MacFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Filter_MacFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_Filter_MacFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MacFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MacFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Filter_MacFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Filter_MacFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MacFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MacFilter) AppendEntry(v *NokiaConf_Configure_Filter_MacFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Filter_MacFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateEmbed retrieves the value of the Embed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter) GetOrCreateEmbed() *NokiaConf_Configure_Filter_MacFilter_Embed {
	if t.Embed != nil {
		return t.Embed
	}
	t.Embed = &NokiaConf_Configure_Filter_MacFilter_Embed{}
	return t.Embed
}

// GetEmbed returns the value of the Embed struct pointer
// from NokiaConf_Configure_Filter_MacFilter. If the receiver or the field Embed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter) GetEmbed() *NokiaConf_Configure_Filter_MacFilter_Embed {
	if t != nil && t.Embed != nil {
		return t.Embed
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetDefaultAction() E_NokiaTypesFilter_FilterDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_FilterDefaultAction_drop
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetScope() E_NokiaTypesFilter_FilterScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesFilter_FilterScope_template
	}
	return t.Scope
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Filter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter) GetType() E_NokiaTypesQos_MacFilterType {
	if t == nil || t.Type == 0 {
		return NokiaTypesQos_MacFilterType_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_FilterDefaultAction_drop
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesFilter_FilterScope_template
	}
	if t.Type == 0 {
		t.Type = NokiaTypesQos_MacFilterType_normal
	}
	t.Embed.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MacFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MacFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter.
func (*NokiaConf_Configure_Filter_MacFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Embed represents the /nokia-conf/configure/filter/mac-filter/embed YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Embed struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Embed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Embed) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Embed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Embed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Embed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Embed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Embed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Embed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Embed.
func (*NokiaConf_Configure_Filter_MacFilter_Embed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry represents the /nokia-conf/configure/filter/mac-filter/entry YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry struct {
	Action                *NokiaConf_Configure_Filter_MacFilter_Entry_Action          `path:"action" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups           []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats          *bool                                                       `path:"collect-stats" module:"nokia-conf"`
	Description           *string                                                     `path:"description" module:"nokia-conf"`
	EntryId               *uint32                                                     `path:"entry-id" module:"nokia-conf"`
	Log                   *uint32                                                     `path:"log" module:"nokia-conf"`
	Match                 *NokiaConf_Configure_Filter_MacFilter_Entry_Match           `path:"match" module:"nokia-conf"`
	PbrDownActionOverride E_NokiaTypesFilter_FilterPbrDownActionOvr                   `path:"pbr-down-action-override" module:"nokia-conf"`
	StickyDest            NokiaConf_Configure_Filter_MacFilter_Entry_StickyDest_Union `path:"sticky-dest" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Filter_MacFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Filter_MacFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Filter_MacFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Filter_MacFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetAction() *NokiaConf_Configure_Filter_MacFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetMatch() *NokiaConf_Configure_Filter_MacFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// GetPbrDownActionOverride retrieves the value of the leaf PbrDownActionOverride from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbrDownActionOverride is set, it can
// safely use t.GetPbrDownActionOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbrDownActionOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetPbrDownActionOverride() E_NokiaTypesFilter_FilterPbrDownActionOvr {
	if t == nil || t.PbrDownActionOverride == 0 {
		return 0
	}
	return t.PbrDownActionOverride
}

// GetStickyDest retrieves the value of the leaf StickyDest from the NokiaConf_Configure_Filter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyDest is set, it can
// safely use t.GetStickyDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyDest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) GetStickyDest() NokiaConf_Configure_Filter_MacFilter_Entry_StickyDest_Union {
	if t == nil || t.StickyDest == nil {
		return nil
	}
	return t.StickyDest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MacFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry.
func (*NokiaConf_Configure_Filter_MacFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action represents the /nokia-conf/configure/filter/mac-filter/entry/action YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action struct {
	Accept             YANGEmpty                                                       `path:"accept" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Drop               YANGEmpty                                                       `path:"drop" module:"nokia-conf"`
	Fc                 E_NokiaTypesSros_FcName                                         `path:"fc" module:"nokia-conf"`
	Forward            *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward      `path:"forward" module:"nokia-conf"`
	HttpRedirect       *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
	IgnoreMatch        YANGEmpty                                                       `path:"ignore-match" module:"nokia-conf"`
	RateLimit          *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit    `path:"rate-limit" module:"nokia-conf" yangPresence:"true"`
	Secondary          *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary    `path:"secondary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetOrCreateForward() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward{}
	return t.Forward
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateRateLimit retrieves the value of the RateLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetOrCreateRateLimit() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit {
	if t.RateLimit != nil {
		return t.RateLimit
	}
	t.RateLimit = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit{}
	return t.RateLimit
}

// GetOrCreateSecondary retrieves the value of the Secondary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetOrCreateSecondary() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary {
	if t.Secondary != nil {
		return t.Secondary
	}
	t.Secondary = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary{}
	return t.Secondary
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetForward() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetRateLimit returns the value of the RateLimit struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action. If the receiver or the field RateLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetRateLimit() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit {
	if t != nil && t.RateLimit != nil {
		return t.RateLimit
	}
	return nil
}

// GetSecondary returns the value of the Secondary struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action. If the receiver or the field Secondary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetSecondary() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary {
	if t != nil && t.Secondary != nil {
		return t.Secondary
	}
	return nil
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Filter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Filter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Filter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetIgnoreMatch retrieves the value of the leaf IgnoreMatch from the NokiaConf_Configure_Filter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMatch is set, it can
// safely use t.GetIgnoreMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) GetIgnoreMatch() YANGEmpty {
	if t == nil || t.IgnoreMatch == false {
		return false
	}
	return t.IgnoreMatch
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Forward.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.RateLimit.PopulateDefaults()
	t.Secondary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward represents the /nokia-conf/configure/filter/mac-filter/entry/action/forward YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward struct {
	EsiL2 *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2 `path:"esi-l2" module:"nokia-conf" yangPresence:"true"`
	Sap   *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap   `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp   *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp   `path:"sdp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) IsYANGGoStruct() {}

// GetOrCreateEsiL2 retrieves the value of the EsiL2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) GetOrCreateEsiL2() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2 {
	if t.EsiL2 != nil {
		return t.EsiL2
	}
	t.EsiL2 = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2{}
	return t.EsiL2
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) GetOrCreateSap() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) GetOrCreateSdp() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp{}
	return t.Sdp
}

// GetEsiL2 returns the value of the EsiL2 struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward. If the receiver or the field EsiL2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) GetEsiL2() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2 {
	if t != nil && t.EsiL2 != nil {
		return t.EsiL2
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) GetSap() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) GetSdp() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EsiL2.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2 represents the /nokia-conf/configure/filter/mac-filter/entry/action/forward/esi-l2 YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2 struct {
	EsiValue *string `path:"esi-value" module:"nokia-conf"`
	Vpls     *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) IsYANGGoStruct() {}

// GetEsiValue retrieves the value of the leaf EsiValue from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiValue is set, it can
// safely use t.GetEsiValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) GetEsiValue() string {
	if t == nil || t.EsiValue == nil {
		return ""
	}
	return *t.EsiValue
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_EsiL2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap represents the /nokia-conf/configure/filter/mac-filter/entry/action/forward/sap YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) IsYANGGoStruct() {}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp represents the /nokia-conf/configure/filter/mac-filter/entry/action/forward/sdp YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) IsYANGGoStruct() {}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect represents the /nokia-conf/configure/filter/mac-filter/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect struct {
	Url *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect) IsYANGGoStruct() {}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit represents the /nokia-conf/configure/filter/mac-filter/entry/action/rate-limit YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit struct {
	Pir NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit) IsYANGGoStruct() {}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit) GetPir() NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_RateLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary represents the /nokia-conf/configure/filter/mac-filter/entry/action/secondary YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Forward            *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward `path:"forward" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) GetOrCreateForward() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward{}
	return t.Forward
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) GetForward() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Forward.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward represents the /nokia-conf/configure/filter/mac-filter/entry/action/secondary/forward YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward struct {
	Sap *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp `path:"sdp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) IsYANGGoStruct() {}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) GetOrCreateSap() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) GetOrCreateSdp() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp{}
	return t.Sdp
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) GetSap() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) GetSdp() *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap represents the /nokia-conf/configure/filter/mac-filter/entry/action/secondary/forward/sap YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) IsYANGGoStruct() {}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp represents the /nokia-conf/configure/filter/mac-filter/entry/action/secondary/forward/sdp YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) IsYANGGoStruct() {}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Action_Secondary_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match represents the /nokia-conf/configure/filter/mac-filter/entry/match YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match struct {
	Dot1P     *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P    `path:"dot1p" module:"nokia-conf" yangPresence:"true"`
	DstMac    *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac   `path:"dst-mac" module:"nokia-conf" yangPresence:"true"`
	Etype     *string                                                    `path:"etype" module:"nokia-conf"`
	FrameType E_NokiaTypesFilter_MacFrameType                            `path:"frame-type" module:"nokia-conf"`
	InnerTag  *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag `path:"inner-tag" module:"nokia-conf" yangPresence:"true"`
	Isid      *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid     `path:"isid" module:"nokia-conf"`
	LlcDsap   *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap  `path:"llc-dsap" module:"nokia-conf" yangPresence:"true"`
	LlcSsap   *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap  `path:"llc-ssap" module:"nokia-conf" yangPresence:"true"`
	OuterTag  *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag `path:"outer-tag" module:"nokia-conf" yangPresence:"true"`
	SnapOui   E_NokiaConf_Configure_Filter_MacFilter_Entry_Match_SnapOui `path:"snap-oui" module:"nokia-conf"`
	SnapPid   *int32                                                     `path:"snap-pid" module:"nokia-conf"`
	SrcMac    *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac   `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateDot1P() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDstMac retrieves the value of the DstMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateDstMac() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac {
	if t.DstMac != nil {
		return t.DstMac
	}
	t.DstMac = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac{}
	return t.DstMac
}

// GetOrCreateInnerTag retrieves the value of the InnerTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateInnerTag() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag {
	if t.InnerTag != nil {
		return t.InnerTag
	}
	t.InnerTag = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag{}
	return t.InnerTag
}

// GetOrCreateIsid retrieves the value of the Isid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateIsid() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid {
	if t.Isid != nil {
		return t.Isid
	}
	t.Isid = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid{}
	return t.Isid
}

// GetOrCreateLlcDsap retrieves the value of the LlcDsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateLlcDsap() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap {
	if t.LlcDsap != nil {
		return t.LlcDsap
	}
	t.LlcDsap = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap{}
	return t.LlcDsap
}

// GetOrCreateLlcSsap retrieves the value of the LlcSsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateLlcSsap() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap {
	if t.LlcSsap != nil {
		return t.LlcSsap
	}
	t.LlcSsap = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap{}
	return t.LlcSsap
}

// GetOrCreateOuterTag retrieves the value of the OuterTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateOuterTag() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag {
	if t.OuterTag != nil {
		return t.OuterTag
	}
	t.OuterTag = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag{}
	return t.OuterTag
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetDot1P() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDstMac returns the value of the DstMac struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field DstMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetDstMac() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac {
	if t != nil && t.DstMac != nil {
		return t.DstMac
	}
	return nil
}

// GetInnerTag returns the value of the InnerTag struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field InnerTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetInnerTag() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag {
	if t != nil && t.InnerTag != nil {
		return t.InnerTag
	}
	return nil
}

// GetIsid returns the value of the Isid struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field Isid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetIsid() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid {
	if t != nil && t.Isid != nil {
		return t.Isid
	}
	return nil
}

// GetLlcDsap returns the value of the LlcDsap struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field LlcDsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetLlcDsap() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap {
	if t != nil && t.LlcDsap != nil {
		return t.LlcDsap
	}
	return nil
}

// GetLlcSsap returns the value of the LlcSsap struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field LlcSsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetLlcSsap() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap {
	if t != nil && t.LlcSsap != nil {
		return t.LlcSsap
	}
	return nil
}

// GetOuterTag returns the value of the OuterTag struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field OuterTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetOuterTag() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag {
	if t != nil && t.OuterTag != nil {
		return t.OuterTag
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetSrcMac() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetEtype retrieves the value of the leaf Etype from the NokiaConf_Configure_Filter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etype is set, it can
// safely use t.GetEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetEtype() string {
	if t == nil || t.Etype == nil {
		return ""
	}
	return *t.Etype
}

// GetFrameType retrieves the value of the leaf FrameType from the NokiaConf_Configure_Filter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameType is set, it can
// safely use t.GetFrameType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetFrameType() E_NokiaTypesFilter_MacFrameType {
	if t == nil || t.FrameType == 0 {
		return 0
	}
	return t.FrameType
}

// GetSnapOui retrieves the value of the leaf SnapOui from the NokiaConf_Configure_Filter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapOui is set, it can
// safely use t.GetSnapOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapOui == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetSnapOui() E_NokiaConf_Configure_Filter_MacFilter_Entry_Match_SnapOui {
	if t == nil || t.SnapOui == 0 {
		return 0
	}
	return t.SnapOui
}

// GetSnapPid retrieves the value of the leaf SnapPid from the NokiaConf_Configure_Filter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapPid is set, it can
// safely use t.GetSnapPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapPid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) GetSnapPid() int32 {
	if t == nil || t.SnapPid == nil {
		return 0
	}
	return *t.SnapPid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1P.PopulateDefaults()
	t.DstMac.PopulateDefaults()
	t.InnerTag.PopulateDefaults()
	t.Isid.PopulateDefaults()
	t.LlcDsap.PopulateDefaults()
	t.LlcSsap.PopulateDefaults()
	t.OuterTag.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P represents the /nokia-conf/configure/filter/mac-filter/entry/match/dot1p YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P struct {
	Mask     *int32 `path:"mask" module:"nokia-conf"`
	Priority *int32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 7
	}
	return *t.Mask
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 7
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac represents the /nokia-conf/configure/filter/mac-filter/entry/match/dst-mac YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_DstMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag represents the /nokia-conf/configure/filter/mac-filter/entry/match/inner-tag YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag struct {
	Mask *uint32 `path:"mask" module:"nokia-conf"`
	Tag  *int32  `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) GetMask() uint32 {
	if t == nil || t.Mask == nil {
		return 4095
	}
	return *t.Mask
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) GetTag() int32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint32 = 4095
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_InnerTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid represents the /nokia-conf/configure/filter/mac-filter/entry/match/isid YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid struct {
	Range *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
	Value *int32                                                       `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) GetOrCreateRange() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) GetRange() *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range represents the /nokia-conf/configure/filter/mac-filter/entry/match/isid/range YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_Isid_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap represents the /nokia-conf/configure/filter/mac-filter/entry/match/llc-dsap YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap struct {
	Dsap *int32 `path:"dsap" module:"nokia-conf"`
	Mask *int32 `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) IsYANGGoStruct() {}

// GetDsap retrieves the value of the leaf Dsap from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsap is set, it can
// safely use t.GetDsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) GetDsap() int32 {
	if t == nil || t.Dsap == nil {
		return 0
	}
	return *t.Dsap
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcDsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap represents the /nokia-conf/configure/filter/mac-filter/entry/match/llc-ssap YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Ssap *int32 `path:"ssap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetSsap retrieves the value of the leaf Ssap from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ssap is set, it can
// safely use t.GetSsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ssap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) GetSsap() int32 {
	if t == nil || t.Ssap == nil {
		return 0
	}
	return *t.Ssap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_LlcSsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag represents the /nokia-conf/configure/filter/mac-filter/entry/match/outer-tag YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag struct {
	Mask *uint32 `path:"mask" module:"nokia-conf"`
	Tag  *int32  `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) GetMask() uint32 {
	if t == nil || t.Mask == nil {
		return 4095
	}
	return *t.Mask
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) GetTag() int32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint32 = 4095
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_OuterTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac represents the /nokia-conf/configure/filter/mac-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Filter_MacFilter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList represents the /nokia-conf/configure/filter/match-list YANG schema element.
type NokiaConf_Configure_Filter_MatchList struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefixList       map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList   `path:"ip-prefix-list" module:"nokia-conf"`
	Ipv6PrefixList     map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList `path:"ipv6-prefix-list" module:"nokia-conf"`
	PortList           map[string]*NokiaConf_Configure_Filter_MatchList_PortList       `path:"port-list" module:"nokia-conf"`
	ProtocolList       map[string]*NokiaConf_Configure_Filter_MatchList_ProtocolList   `path:"protocol-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList) IsYANGGoStruct() {}

// NewIpPrefixList creates a new entry in the IpPrefixList list of the
// NokiaConf_Configure_Filter_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList) NewIpPrefixList(PrefixListName string) (*NokiaConf_Configure_Filter_MatchList_IpPrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList)
	}

	key := PrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpPrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpPrefixList", key)
	}

	t.IpPrefixList[key] = &NokiaConf_Configure_Filter_MatchList_IpPrefixList{
		PrefixListName: &PrefixListName,
	}

	return t.IpPrefixList[key], nil
}

// RenameIpPrefixList renames an entry in the list IpPrefixList within
// the NokiaConf_Configure_Filter_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList) RenameIpPrefixList(oldK, newK string) error {
	if _, ok := t.IpPrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in IpPrefixList", newK)
	}

	e, ok := t.IpPrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpPrefixList", oldK)
	}
	e.PrefixListName = &newK

	t.IpPrefixList[newK] = e
	delete(t.IpPrefixList, oldK)
	return nil
}

// GetOrCreateIpPrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList) GetOrCreateIpPrefixList(PrefixListName string) *NokiaConf_Configure_Filter_MatchList_IpPrefixList {

	key := PrefixListName

	if v, ok := t.IpPrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpPrefixList(PrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpPrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpPrefixList retrieves the value with the specified key from
// the IpPrefixList map field of NokiaConf_Configure_Filter_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList) GetIpPrefixList(PrefixListName string) *NokiaConf_Configure_Filter_MatchList_IpPrefixList {

	if t == nil {
		return nil
	}

	key := PrefixListName

	if lm, ok := t.IpPrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpPrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList) DeleteIpPrefixList(PrefixListName string) {
	key := PrefixListName

	delete(t.IpPrefixList, key)
}

// AppendIpPrefixList appends the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList struct to the
// list IpPrefixList of NokiaConf_Configure_Filter_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList) AppendIpPrefixList(v *NokiaConf_Configure_Filter_MatchList_IpPrefixList) error {
	if v.PrefixListName == nil {
		return fmt.Errorf("invalid nil key received for PrefixListName")
	}

	key := *v.PrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList)
	}

	if _, ok := t.IpPrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list IpPrefixList %v", key)
	}

	t.IpPrefixList[key] = v
	return nil
}

// NewIpv6PrefixList creates a new entry in the Ipv6PrefixList list of the
// NokiaConf_Configure_Filter_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList) NewIpv6PrefixList(PrefixListName string) (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixList == nil {
		t.Ipv6PrefixList = make(map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList)
	}

	key := PrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6PrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6PrefixList", key)
	}

	t.Ipv6PrefixList[key] = &NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList{
		PrefixListName: &PrefixListName,
	}

	return t.Ipv6PrefixList[key], nil
}

// RenameIpv6PrefixList renames an entry in the list Ipv6PrefixList within
// the NokiaConf_Configure_Filter_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList) RenameIpv6PrefixList(oldK, newK string) error {
	if _, ok := t.Ipv6PrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6PrefixList", newK)
	}

	e, ok := t.Ipv6PrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6PrefixList", oldK)
	}
	e.PrefixListName = &newK

	t.Ipv6PrefixList[newK] = e
	delete(t.Ipv6PrefixList, oldK)
	return nil
}

// GetOrCreateIpv6PrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList) GetOrCreateIpv6PrefixList(PrefixListName string) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList {

	key := PrefixListName

	if v, ok := t.Ipv6PrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6PrefixList(PrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6PrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpv6PrefixList retrieves the value with the specified key from
// the Ipv6PrefixList map field of NokiaConf_Configure_Filter_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList) GetIpv6PrefixList(PrefixListName string) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList {

	if t == nil {
		return nil
	}

	key := PrefixListName

	if lm, ok := t.Ipv6PrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6PrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList) DeleteIpv6PrefixList(PrefixListName string) {
	key := PrefixListName

	delete(t.Ipv6PrefixList, key)
}

// AppendIpv6PrefixList appends the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList struct to the
// list Ipv6PrefixList of NokiaConf_Configure_Filter_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList) AppendIpv6PrefixList(v *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) error {
	if v.PrefixListName == nil {
		return fmt.Errorf("invalid nil key received for PrefixListName")
	}

	key := *v.PrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixList == nil {
		t.Ipv6PrefixList = make(map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList)
	}

	if _, ok := t.Ipv6PrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6PrefixList %v", key)
	}

	t.Ipv6PrefixList[key] = v
	return nil
}

// NewPortList creates a new entry in the PortList list of the
// NokiaConf_Configure_Filter_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList) NewPortList(PortListName string) (*NokiaConf_Configure_Filter_MatchList_PortList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Filter_MatchList_PortList)
	}

	key := PortListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortList", key)
	}

	t.PortList[key] = &NokiaConf_Configure_Filter_MatchList_PortList{
		PortListName: &PortListName,
	}

	return t.PortList[key], nil
}

// RenamePortList renames an entry in the list PortList within
// the NokiaConf_Configure_Filter_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList) RenamePortList(oldK, newK string) error {
	if _, ok := t.PortList[newK]; ok {
		return fmt.Errorf("key %v already exists in PortList", newK)
	}

	e, ok := t.PortList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortList", oldK)
	}
	e.PortListName = &newK

	t.PortList[newK] = e
	delete(t.PortList, oldK)
	return nil
}

// GetOrCreatePortList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList) GetOrCreatePortList(PortListName string) *NokiaConf_Configure_Filter_MatchList_PortList {

	key := PortListName

	if v, ok := t.PortList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortList(PortListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortList got unexpected error: %v", err))
	}
	return v
}

// GetPortList retrieves the value with the specified key from
// the PortList map field of NokiaConf_Configure_Filter_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList) GetPortList(PortListName string) *NokiaConf_Configure_Filter_MatchList_PortList {

	if t == nil {
		return nil
	}

	key := PortListName

	if lm, ok := t.PortList[key]; ok {
		return lm
	}
	return nil
}

// DeletePortList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList) DeletePortList(PortListName string) {
	key := PortListName

	delete(t.PortList, key)
}

// AppendPortList appends the supplied NokiaConf_Configure_Filter_MatchList_PortList struct to the
// list PortList of NokiaConf_Configure_Filter_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_PortList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList) AppendPortList(v *NokiaConf_Configure_Filter_MatchList_PortList) error {
	if v.PortListName == nil {
		return fmt.Errorf("invalid nil key received for PortListName")
	}

	key := *v.PortListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Filter_MatchList_PortList)
	}

	if _, ok := t.PortList[key]; ok {
		return fmt.Errorf("duplicate key for list PortList %v", key)
	}

	t.PortList[key] = v
	return nil
}

// NewProtocolList creates a new entry in the ProtocolList list of the
// NokiaConf_Configure_Filter_MatchList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList) NewProtocolList(ProtocolListName string) (*NokiaConf_Configure_Filter_MatchList_ProtocolList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ProtocolList == nil {
		t.ProtocolList = make(map[string]*NokiaConf_Configure_Filter_MatchList_ProtocolList)
	}

	key := ProtocolListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ProtocolList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ProtocolList", key)
	}

	t.ProtocolList[key] = &NokiaConf_Configure_Filter_MatchList_ProtocolList{
		ProtocolListName: &ProtocolListName,
	}

	return t.ProtocolList[key], nil
}

// RenameProtocolList renames an entry in the list ProtocolList within
// the NokiaConf_Configure_Filter_MatchList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList) RenameProtocolList(oldK, newK string) error {
	if _, ok := t.ProtocolList[newK]; ok {
		return fmt.Errorf("key %v already exists in ProtocolList", newK)
	}

	e, ok := t.ProtocolList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ProtocolList", oldK)
	}
	e.ProtocolListName = &newK

	t.ProtocolList[newK] = e
	delete(t.ProtocolList, oldK)
	return nil
}

// GetOrCreateProtocolList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList) GetOrCreateProtocolList(ProtocolListName string) *NokiaConf_Configure_Filter_MatchList_ProtocolList {

	key := ProtocolListName

	if v, ok := t.ProtocolList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocolList(ProtocolListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocolList got unexpected error: %v", err))
	}
	return v
}

// GetProtocolList retrieves the value with the specified key from
// the ProtocolList map field of NokiaConf_Configure_Filter_MatchList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList) GetProtocolList(ProtocolListName string) *NokiaConf_Configure_Filter_MatchList_ProtocolList {

	if t == nil {
		return nil
	}

	key := ProtocolListName

	if lm, ok := t.ProtocolList[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocolList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList) DeleteProtocolList(ProtocolListName string) {
	key := ProtocolListName

	delete(t.ProtocolList, key)
}

// AppendProtocolList appends the supplied NokiaConf_Configure_Filter_MatchList_ProtocolList struct to the
// list ProtocolList of NokiaConf_Configure_Filter_MatchList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_ProtocolList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList) AppendProtocolList(v *NokiaConf_Configure_Filter_MatchList_ProtocolList) error {
	if v.ProtocolListName == nil {
		return fmt.Errorf("invalid nil key received for ProtocolListName")
	}

	key := *v.ProtocolListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ProtocolList == nil {
		t.ProtocolList = make(map[string]*NokiaConf_Configure_Filter_MatchList_ProtocolList)
	}

	if _, ok := t.ProtocolList[key]; ok {
		return fmt.Errorf("duplicate key for list ProtocolList %v", key)
	}

	t.ProtocolList[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MatchList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MatchList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpPrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6PrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.PortList {
		e.PopulateDefaults()
	}
	for _, e := range t.ProtocolList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList.
func (*NokiaConf_Configure_Filter_MatchList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_IpPrefixList represents the /nokia-conf/configure/filter/match-list/ip-prefix-list YANG schema element.
type NokiaConf_Configure_Filter_MatchList_IpPrefixList struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ApplyPath          *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath                `path:"apply-path" module:"nokia-conf"`
	Description        *string                                                                     `path:"description" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix        `path:"prefix" module:"nokia-conf"`
	PrefixExclude      map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude `path:"prefix-exclude" module:"nokia-conf"`
	PrefixListName     *string                                                                     `path:"prefix-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_IpPrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Filter_MatchList_IpPrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Filter_MatchList_IpPrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_IpPrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Filter_MatchList_IpPrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetPrefix(IpPrefix string) *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_IpPrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Filter_MatchList_IpPrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) AppendPrefix(v *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// NewPrefixExclude creates a new entry in the PrefixExclude list of the
// NokiaConf_Configure_Filter_MatchList_IpPrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) NewPrefixExclude(IpPrefix string) (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixExclude == nil {
		t.PrefixExclude = make(map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixExclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixExclude", key)
	}

	t.PrefixExclude[key] = &NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude{
		IpPrefix: &IpPrefix,
	}

	return t.PrefixExclude[key], nil
}

// RenamePrefixExclude renames an entry in the list PrefixExclude within
// the NokiaConf_Configure_Filter_MatchList_IpPrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) RenamePrefixExclude(oldK, newK string) error {
	if _, ok := t.PrefixExclude[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixExclude", newK)
	}

	e, ok := t.PrefixExclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixExclude", oldK)
	}
	e.IpPrefix = &newK

	t.PrefixExclude[newK] = e
	delete(t.PrefixExclude, oldK)
	return nil
}

// GetOrCreatePrefixExclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_IpPrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetOrCreatePrefixExclude(IpPrefix string) *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude {

	key := IpPrefix

	if v, ok := t.PrefixExclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixExclude(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixExclude got unexpected error: %v", err))
	}
	return v
}

// GetPrefixExclude retrieves the value with the specified key from
// the PrefixExclude map field of NokiaConf_Configure_Filter_MatchList_IpPrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetPrefixExclude(IpPrefix string) *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.PrefixExclude[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixExclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_IpPrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) DeletePrefixExclude(IpPrefix string) {
	key := IpPrefix

	delete(t.PrefixExclude, key)
}

// AppendPrefixExclude appends the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude struct to the
// list PrefixExclude of NokiaConf_Configure_Filter_MatchList_IpPrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) AppendPrefixExclude(v *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixExclude == nil {
		t.PrefixExclude = make(map[string]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude)
	}

	if _, ok := t.PrefixExclude[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixExclude %v", key)
	}

	t.PrefixExclude[key] = v
	return nil
}

// GetOrCreateApplyPath retrieves the value of the ApplyPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetOrCreateApplyPath() *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath {
	if t.ApplyPath != nil {
		return t.ApplyPath
	}
	t.ApplyPath = &NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath{}
	return t.ApplyPath
}

// GetApplyPath returns the value of the ApplyPath struct pointer
// from NokiaConf_Configure_Filter_MatchList_IpPrefixList. If the receiver or the field ApplyPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetApplyPath() *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath {
	if t != nil && t.ApplyPath != nil {
		return t.ApplyPath
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixListName retrieves the value of the leaf PrefixListName from the NokiaConf_Configure_Filter_MatchList_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixListName is set, it can
// safely use t.GetPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) GetPrefixListName() string {
	if t == nil || t.PrefixListName == nil {
		return ""
	}
	return *t.PrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_IpPrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ApplyPath.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixExclude {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_IpPrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixListName == nil {
		return nil, fmt.Errorf("nil value for key PrefixListName")
	}

	return map[string]interface{}{
		"prefix-list-name": *t.PrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_IpPrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_IpPrefixList.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath represents the /nokia-conf/configure/filter/match-list/ip-prefix-list/apply-path YANG schema element.
type NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath struct {
	BgpPeers map[uint32]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers `path:"bgp-peers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) IsYANGGoStruct() {}

// NewBgpPeers creates a new entry in the BgpPeers list of the
// NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) NewBgpPeers(CriterionIndex uint32) (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeers == nil {
		t.BgpPeers = make(map[uint32]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers)
	}

	key := CriterionIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpPeers[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpPeers", key)
	}

	t.BgpPeers[key] = &NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers{
		CriterionIndex: &CriterionIndex,
	}

	return t.BgpPeers[key], nil
}

// RenameBgpPeers renames an entry in the list BgpPeers within
// the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) RenameBgpPeers(oldK, newK uint32) error {
	if _, ok := t.BgpPeers[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpPeers", newK)
	}

	e, ok := t.BgpPeers[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpPeers", oldK)
	}
	e.CriterionIndex = &newK

	t.BgpPeers[newK] = e
	delete(t.BgpPeers, oldK)
	return nil
}

// GetOrCreateBgpPeers retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) GetOrCreateBgpPeers(CriterionIndex uint32) *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers {

	key := CriterionIndex

	if v, ok := t.BgpPeers[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpPeers(CriterionIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpPeers got unexpected error: %v", err))
	}
	return v
}

// GetBgpPeers retrieves the value with the specified key from
// the BgpPeers map field of NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) GetBgpPeers(CriterionIndex uint32) *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers {

	if t == nil {
		return nil
	}

	key := CriterionIndex

	if lm, ok := t.BgpPeers[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpPeers deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) DeleteBgpPeers(CriterionIndex uint32) {
	key := CriterionIndex

	delete(t.BgpPeers, key)
}

// AppendBgpPeers appends the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers struct to the
// list BgpPeers of NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) AppendBgpPeers(v *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) error {
	if v.CriterionIndex == nil {
		return fmt.Errorf("invalid nil key received for CriterionIndex")
	}

	key := *v.CriterionIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeers == nil {
		t.BgpPeers = make(map[uint32]*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers)
	}

	if _, ok := t.BgpPeers[key]; ok {
		return fmt.Errorf("duplicate key for list BgpPeers %v", key)
	}

	t.BgpPeers[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpPeers {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers represents the /nokia-conf/configure/filter/match-list/ip-prefix-list/apply-path/bgp-peers YANG schema element.
type NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CriterionIndex     *uint32  `path:"criterion-index" module:"nokia-conf"`
	Group              *string  `path:"group" module:"nokia-conf"`
	Neighbor           *string  `path:"neighbor" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCriterionIndex retrieves the value of the leaf CriterionIndex from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriterionIndex is set, it can
// safely use t.GetCriterionIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriterionIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) GetCriterionIndex() uint32 {
	if t == nil || t.CriterionIndex == nil {
		return 0
	}
	return *t.CriterionIndex
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetNeighbor retrieves the value of the leaf Neighbor from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neighbor is set, it can
// safely use t.GetNeighbor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neighbor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) GetNeighbor() string {
	if t == nil || t.Neighbor == nil {
		return ""
	}
	return *t.Neighbor
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CriterionIndex == nil {
		return nil, fmt.Errorf("nil value for key CriterionIndex")
	}

	return map[string]interface{}{
		"criterion-index": *t.CriterionIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_ApplyPath_BgpPeers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix represents the /nokia-conf/configure/filter/match-list/ip-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude represents the /nokia-conf/configure/filter/match-list/ip-prefix-list/prefix-exclude YANG schema element.
type NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude.
func (*NokiaConf_Configure_Filter_MatchList_IpPrefixList_PrefixExclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList represents the /nokia-conf/configure/filter/match-list/ipv6-prefix-list YANG schema element.
type NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	ApplyPath          *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath                `path:"apply-path" module:"nokia-conf"`
	Description        *string                                                                       `path:"description" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix        `path:"prefix" module:"nokia-conf"`
	PrefixExclude      map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude `path:"prefix-exclude" module:"nokia-conf"`
	PrefixListName     *string                                                                       `path:"prefix-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) AppendPrefix(v *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// NewPrefixExclude creates a new entry in the PrefixExclude list of the
// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) NewPrefixExclude(Ipv6Prefix string) (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixExclude == nil {
		t.PrefixExclude = make(map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixExclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixExclude", key)
	}

	t.PrefixExclude[key] = &NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.PrefixExclude[key], nil
}

// RenamePrefixExclude renames an entry in the list PrefixExclude within
// the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) RenamePrefixExclude(oldK, newK string) error {
	if _, ok := t.PrefixExclude[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixExclude", newK)
	}

	e, ok := t.PrefixExclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixExclude", oldK)
	}
	e.Ipv6Prefix = &newK

	t.PrefixExclude[newK] = e
	delete(t.PrefixExclude, oldK)
	return nil
}

// GetOrCreatePrefixExclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetOrCreatePrefixExclude(Ipv6Prefix string) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude {

	key := Ipv6Prefix

	if v, ok := t.PrefixExclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixExclude(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixExclude got unexpected error: %v", err))
	}
	return v
}

// GetPrefixExclude retrieves the value with the specified key from
// the PrefixExclude map field of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetPrefixExclude(Ipv6Prefix string) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.PrefixExclude[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixExclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) DeletePrefixExclude(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.PrefixExclude, key)
}

// AppendPrefixExclude appends the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude struct to the
// list PrefixExclude of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) AppendPrefixExclude(v *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixExclude == nil {
		t.PrefixExclude = make(map[string]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude)
	}

	if _, ok := t.PrefixExclude[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixExclude %v", key)
	}

	t.PrefixExclude[key] = v
	return nil
}

// GetOrCreateApplyPath retrieves the value of the ApplyPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetOrCreateApplyPath() *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath {
	if t.ApplyPath != nil {
		return t.ApplyPath
	}
	t.ApplyPath = &NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath{}
	return t.ApplyPath
}

// GetApplyPath returns the value of the ApplyPath struct pointer
// from NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList. If the receiver or the field ApplyPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetApplyPath() *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath {
	if t != nil && t.ApplyPath != nil {
		return t.ApplyPath
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixListName retrieves the value of the leaf PrefixListName from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixListName is set, it can
// safely use t.GetPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) GetPrefixListName() string {
	if t == nil || t.PrefixListName == nil {
		return ""
	}
	return *t.PrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ApplyPath.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixExclude {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixListName == nil {
		return nil, fmt.Errorf("nil value for key PrefixListName")
	}

	return map[string]interface{}{
		"prefix-list-name": *t.PrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath represents the /nokia-conf/configure/filter/match-list/ipv6-prefix-list/apply-path YANG schema element.
type NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath struct {
	BgpPeers map[uint32]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers `path:"bgp-peers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) IsYANGGoStruct() {}

// NewBgpPeers creates a new entry in the BgpPeers list of the
// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) NewBgpPeers(CriterionIndex uint32) (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeers == nil {
		t.BgpPeers = make(map[uint32]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers)
	}

	key := CriterionIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpPeers[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpPeers", key)
	}

	t.BgpPeers[key] = &NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers{
		CriterionIndex: &CriterionIndex,
	}

	return t.BgpPeers[key], nil
}

// RenameBgpPeers renames an entry in the list BgpPeers within
// the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) RenameBgpPeers(oldK, newK uint32) error {
	if _, ok := t.BgpPeers[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpPeers", newK)
	}

	e, ok := t.BgpPeers[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpPeers", oldK)
	}
	e.CriterionIndex = &newK

	t.BgpPeers[newK] = e
	delete(t.BgpPeers, oldK)
	return nil
}

// GetOrCreateBgpPeers retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) GetOrCreateBgpPeers(CriterionIndex uint32) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers {

	key := CriterionIndex

	if v, ok := t.BgpPeers[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpPeers(CriterionIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpPeers got unexpected error: %v", err))
	}
	return v
}

// GetBgpPeers retrieves the value with the specified key from
// the BgpPeers map field of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) GetBgpPeers(CriterionIndex uint32) *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers {

	if t == nil {
		return nil
	}

	key := CriterionIndex

	if lm, ok := t.BgpPeers[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpPeers deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) DeleteBgpPeers(CriterionIndex uint32) {
	key := CriterionIndex

	delete(t.BgpPeers, key)
}

// AppendBgpPeers appends the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers struct to the
// list BgpPeers of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) AppendBgpPeers(v *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) error {
	if v.CriterionIndex == nil {
		return fmt.Errorf("invalid nil key received for CriterionIndex")
	}

	key := *v.CriterionIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpPeers == nil {
		t.BgpPeers = make(map[uint32]*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers)
	}

	if _, ok := t.BgpPeers[key]; ok {
		return fmt.Errorf("duplicate key for list BgpPeers %v", key)
	}

	t.BgpPeers[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpPeers {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers represents the /nokia-conf/configure/filter/match-list/ipv6-prefix-list/apply-path/bgp-peers YANG schema element.
type NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CriterionIndex     *uint32  `path:"criterion-index" module:"nokia-conf"`
	Group              *string  `path:"group" module:"nokia-conf"`
	Neighbor           *string  `path:"neighbor" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCriterionIndex retrieves the value of the leaf CriterionIndex from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriterionIndex is set, it can
// safely use t.GetCriterionIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriterionIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) GetCriterionIndex() uint32 {
	if t == nil || t.CriterionIndex == nil {
		return 0
	}
	return *t.CriterionIndex
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetNeighbor retrieves the value of the leaf Neighbor from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neighbor is set, it can
// safely use t.GetNeighbor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neighbor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) GetNeighbor() string {
	if t == nil || t.Neighbor == nil {
		return ""
	}
	return *t.Neighbor
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CriterionIndex == nil {
		return nil, fmt.Errorf("nil value for key CriterionIndex")
	}

	return map[string]interface{}{
		"criterion-index": *t.CriterionIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_ApplyPath_BgpPeers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix represents the /nokia-conf/configure/filter/match-list/ipv6-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude represents the /nokia-conf/configure/filter/match-list/ipv6-prefix-list/prefix-exclude YANG schema element.
type NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude.
func (*NokiaConf_Configure_Filter_MatchList_Ipv6PrefixList_PrefixExclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_PortList represents the /nokia-conf/configure/filter/match-list/port-list YANG schema element.
type NokiaConf_Configure_Filter_MatchList_PortList struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                          `path:"description" module:"nokia-conf"`
	Port               map[int32]*NokiaConf_Configure_Filter_MatchList_PortList_Port                                                    `path:"port" module:"nokia-conf"`
	PortListName       *string                                                                                                          `path:"port-list-name" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_Filter_MatchList_PortList_Range_Key]*NokiaConf_Configure_Filter_MatchList_PortList_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_PortList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_PortList) IsYANGGoStruct() {}

// NokiaConf_Configure_Filter_MatchList_PortList_Range_Key represents the key for list Range of element /nokia-conf/configure/filter/match-list/port-list.
type NokiaConf_Configure_Filter_MatchList_PortList_Range_Key struct {
	Start int32 `path:"start"`
	End   int32 `path:"end"`
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Filter_MatchList_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) NewPort(Value int32) (*NokiaConf_Configure_Filter_MatchList_PortList_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[int32]*NokiaConf_Configure_Filter_MatchList_PortList_Port)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Filter_MatchList_PortList_Port{
		Value: &Value,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Filter_MatchList_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) RenamePort(oldK, newK int32) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.Value = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetOrCreatePort(Value int32) *NokiaConf_Configure_Filter_MatchList_PortList_Port {

	key := Value

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Filter_MatchList_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetPort(Value int32) *NokiaConf_Configure_Filter_MatchList_PortList_Port {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) DeletePort(Value int32) {
	key := Value

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Filter_MatchList_PortList_Port struct to the
// list Port of NokiaConf_Configure_Filter_MatchList_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_PortList_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) AppendPort(v *NokiaConf_Configure_Filter_MatchList_PortList_Port) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[int32]*NokiaConf_Configure_Filter_MatchList_PortList_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Filter_MatchList_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) NewRange(Start int32, End int32) (*NokiaConf_Configure_Filter_MatchList_PortList_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Filter_MatchList_PortList_Range_Key]*NokiaConf_Configure_Filter_MatchList_PortList_Range)
	}

	key := NokiaConf_Configure_Filter_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Filter_MatchList_PortList_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Filter_MatchList_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) RenameRange(oldK, newK NokiaConf_Configure_Filter_MatchList_PortList_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetOrCreateRange(Start int32, End int32) *NokiaConf_Configure_Filter_MatchList_PortList_Range {

	key := NokiaConf_Configure_Filter_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Filter_MatchList_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetRange(Start int32, End int32) *NokiaConf_Configure_Filter_MatchList_PortList_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Filter_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) DeleteRange(Start int32, End int32) {
	key := NokiaConf_Configure_Filter_MatchList_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Filter_MatchList_PortList_Range struct to the
// list Range of NokiaConf_Configure_Filter_MatchList_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_PortList_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) AppendRange(v *NokiaConf_Configure_Filter_MatchList_PortList_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Filter_MatchList_PortList_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Filter_MatchList_PortList_Range_Key]*NokiaConf_Configure_Filter_MatchList_PortList_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortListName retrieves the value of the leaf PortListName from the NokiaConf_Configure_Filter_MatchList_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortListName is set, it can
// safely use t.GetPortListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) GetPortListName() string {
	if t == nil || t.PortListName == nil {
		return ""
	}
	return *t.PortListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_PortList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_PortList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortListName == nil {
		return nil, fmt.Errorf("nil value for key PortListName")
	}

	return map[string]interface{}{
		"port-list-name": *t.PortListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_PortList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_PortList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_PortList.
func (*NokiaConf_Configure_Filter_MatchList_PortList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_PortList_Port represents the /nokia-conf/configure/filter/match-list/port-list/port YANG schema element.
type NokiaConf_Configure_Filter_MatchList_PortList_Port struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_PortList_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_PortList_Port) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Filter_MatchList_PortList_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Port) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_PortList_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_PortList_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_PortList_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_PortList_Port.
func (*NokiaConf_Configure_Filter_MatchList_PortList_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_PortList_Range represents the /nokia-conf/configure/filter/match-list/port-list/range YANG schema element.
type NokiaConf_Configure_Filter_MatchList_PortList_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_PortList_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_PortList_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_MatchList_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_MatchList_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_PortList_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_PortList_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_PortList_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_PortList_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_PortList_Range.
func (*NokiaConf_Configure_Filter_MatchList_PortList_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_ProtocolList represents the /nokia-conf/configure/filter/match-list/protocol-list YANG schema element.
type NokiaConf_Configure_Filter_MatchList_ProtocolList struct {
	ApplyGroups        []string                                                                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                                                     `path:"description" module:"nokia-conf"`
	Protocol           map[NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union]*NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol `path:"protocol" module:"nokia-conf"`
	ProtocolListName   *string                                                                                                                                     `path:"protocol-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_ProtocolList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_ProtocolList) IsYANGGoStruct() {}

// NewProtocol creates a new entry in the Protocol list of the
// NokiaConf_Configure_Filter_MatchList_ProtocolList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) NewProtocol(ProtocolId NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union) (*NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union]*NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol)
	}

	key := ProtocolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol{
		ProtocolId: ProtocolId,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the NokiaConf_Configure_Filter_MatchList_ProtocolList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) RenameProtocol(oldK, newK NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolId = newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_ProtocolList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) GetOrCreateProtocol(ProtocolId NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union) *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol {

	key := ProtocolId

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of NokiaConf_Configure_Filter_MatchList_ProtocolList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) GetProtocol(ProtocolId NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union) *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolId

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_MatchList_ProtocolList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) DeleteProtocol(ProtocolId NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union) {
	key := ProtocolId

	delete(t.Protocol, key)
}

// AppendProtocol appends the supplied NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol struct to the
// list Protocol of NokiaConf_Configure_Filter_MatchList_ProtocolList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) AppendProtocol(v *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) error {
	key := v.ProtocolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union]*NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MatchList_ProtocolList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MatchList_ProtocolList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_MatchList_ProtocolList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetProtocolListName retrieves the value of the leaf ProtocolListName from the NokiaConf_Configure_Filter_MatchList_ProtocolList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolListName is set, it can
// safely use t.GetProtocolListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) GetProtocolListName() string {
	if t == nil || t.ProtocolListName == nil {
		return ""
	}
	return *t.ProtocolListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_ProtocolList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Protocol {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_ProtocolList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProtocolListName == nil {
		return nil, fmt.Errorf("nil value for key ProtocolListName")
	}

	return map[string]interface{}{
		"protocol-list-name": *t.ProtocolListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_ProtocolList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_ProtocolList.
func (*NokiaConf_Configure_Filter_MatchList_ProtocolList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol represents the /nokia-conf/configure/filter/match-list/protocol-list/protocol YANG schema element.
type NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol struct {
	ProtocolId NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union `path:"protocol-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) IsYANGGoStruct() {}

// GetProtocolId retrieves the value of the leaf ProtocolId from the NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolId is set, it can
// safely use t.GetProtocolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) GetProtocolId() NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol_ProtocolId_Union {
	if t == nil || t.ProtocolId == nil {
		return nil
	}
	return t.ProtocolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"protocol-id": t.ProtocolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol.
func (*NokiaConf_Configure_Filter_MatchList_ProtocolList_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MdAutoId represents the /nokia-conf/configure/filter/md-auto-id YANG schema element.
type NokiaConf_Configure_Filter_MdAutoId struct {
	FilterIdRange *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange `path:"filter-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MdAutoId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MdAutoId) IsYANGGoStruct() {}

// GetOrCreateFilterIdRange retrieves the value of the FilterIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_MdAutoId) GetOrCreateFilterIdRange() *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange {
	if t.FilterIdRange != nil {
		return t.FilterIdRange
	}
	t.FilterIdRange = &NokiaConf_Configure_Filter_MdAutoId_FilterIdRange{}
	return t.FilterIdRange
}

// GetFilterIdRange returns the value of the FilterIdRange struct pointer
// from NokiaConf_Configure_Filter_MdAutoId. If the receiver or the field FilterIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_MdAutoId) GetFilterIdRange() *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange {
	if t != nil && t.FilterIdRange != nil {
		return t.FilterIdRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MdAutoId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MdAutoId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FilterIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MdAutoId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MdAutoId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MdAutoId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MdAutoId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MdAutoId.
func (*NokiaConf_Configure_Filter_MdAutoId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_MdAutoId_FilterIdRange represents the /nokia-conf/configure/filter/md-auto-id/filter-id-range YANG schema element.
type NokiaConf_Configure_Filter_MdAutoId_FilterIdRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_MdAutoId_FilterIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_MdAutoId_FilterIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_MdAutoId_FilterIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Filter_MdAutoId_FilterIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Filter_MdAutoId_FilterIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_MdAutoId_FilterIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_MdAutoId_FilterIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_MdAutoId_FilterIdRange.
func (*NokiaConf_Configure_Filter_MdAutoId_FilterIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_RedirectPolicy represents the /nokia-conf/configure/filter/redirect-policy YANG schema element.
type NokiaConf_Configure_Filter_RedirectPolicy struct {
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	Destination        map[string]*NokiaConf_Configure_Filter_RedirectPolicy_Destination `path:"destination" module:"nokia-conf"`
	NotifyDestChange   *bool                                                             `path:"notify-dest-change" module:"nokia-conf"`
	RedirectPolicyName *string                                                           `path:"redirect-policy-name" module:"nokia-conf"`
	RouterInstance     *string                                                           `path:"router-instance" module:"nokia-conf"`
	StickyDest         NokiaConf_Configure_Filter_RedirectPolicy_StickyDest_Union        `path:"sticky-dest" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_RedirectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_RedirectPolicy) IsYANGGoStruct() {}

// NewDestination creates a new entry in the Destination list of the
// NokiaConf_Configure_Filter_RedirectPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) NewDestination(DestinationAddress string) (*NokiaConf_Configure_Filter_RedirectPolicy_Destination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicy_Destination)
	}

	key := DestinationAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &NokiaConf_Configure_Filter_RedirectPolicy_Destination{
		DestinationAddress: &DestinationAddress,
	}

	return t.Destination[key], nil
}

// RenameDestination renames an entry in the list Destination within
// the NokiaConf_Configure_Filter_RedirectPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) RenameDestination(oldK, newK string) error {
	if _, ok := t.Destination[newK]; ok {
		return fmt.Errorf("key %v already exists in Destination", newK)
	}

	e, ok := t.Destination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Destination", oldK)
	}
	e.DestinationAddress = &newK

	t.Destination[newK] = e
	delete(t.Destination, oldK)
	return nil
}

// GetOrCreateDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_RedirectPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetOrCreateDestination(DestinationAddress string) *NokiaConf_Configure_Filter_RedirectPolicy_Destination {

	key := DestinationAddress

	if v, ok := t.Destination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestination(DestinationAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestination got unexpected error: %v", err))
	}
	return v
}

// GetDestination retrieves the value with the specified key from
// the Destination map field of NokiaConf_Configure_Filter_RedirectPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetDestination(DestinationAddress string) *NokiaConf_Configure_Filter_RedirectPolicy_Destination {

	if t == nil {
		return nil
	}

	key := DestinationAddress

	if lm, ok := t.Destination[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_RedirectPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) DeleteDestination(DestinationAddress string) {
	key := DestinationAddress

	delete(t.Destination, key)
}

// AppendDestination appends the supplied NokiaConf_Configure_Filter_RedirectPolicy_Destination struct to the
// list Destination of NokiaConf_Configure_Filter_RedirectPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_RedirectPolicy_Destination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) AppendDestination(v *NokiaConf_Configure_Filter_RedirectPolicy_Destination) error {
	if v.DestinationAddress == nil {
		return fmt.Errorf("invalid nil key received for DestinationAddress")
	}

	key := *v.DestinationAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicy_Destination)
	}

	if _, ok := t.Destination[key]; ok {
		return fmt.Errorf("duplicate key for list Destination %v", key)
	}

	t.Destination[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetNotifyDestChange retrieves the value of the leaf NotifyDestChange from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotifyDestChange is set, it can
// safely use t.GetNotifyDestChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotifyDestChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetNotifyDestChange() bool {
	if t == nil || t.NotifyDestChange == nil {
		return false
	}
	return *t.NotifyDestChange
}

// GetRedirectPolicyName retrieves the value of the leaf RedirectPolicyName from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectPolicyName is set, it can
// safely use t.GetRedirectPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetRedirectPolicyName() string {
	if t == nil || t.RedirectPolicyName == nil {
		return ""
	}
	return *t.RedirectPolicyName
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetStickyDest retrieves the value of the leaf StickyDest from the NokiaConf_Configure_Filter_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyDest is set, it can
// safely use t.GetStickyDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyDest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) GetStickyDest() NokiaConf_Configure_Filter_RedirectPolicy_StickyDest_Union {
	if t == nil || t.StickyDest == nil {
		return nil
	}
	return t.StickyDest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_RedirectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NotifyDestChange == nil {
		var v bool = false
		t.NotifyDestChange = &v
	}
	for _, e := range t.Destination {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_RedirectPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RedirectPolicyName == nil {
		return nil, fmt.Errorf("nil value for key RedirectPolicyName")
	}

	return map[string]interface{}{
		"redirect-policy-name": *t.RedirectPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_RedirectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_RedirectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_RedirectPolicy.
func (*NokiaConf_Configure_Filter_RedirectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_RedirectPolicyBinding represents the /nokia-conf/configure/filter/redirect-policy-binding YANG schema element.
type NokiaConf_Configure_Filter_RedirectPolicyBinding struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BindingName        *string                                                                     `path:"binding-name" module:"nokia-conf"`
	BindingOperator    E_NokiaTypesFilter_FilterBindingOperator                                    `path:"binding-operator" module:"nokia-conf"`
	RedirectPolicy     map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy `path:"redirect-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_RedirectPolicyBinding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_RedirectPolicyBinding) IsYANGGoStruct() {}

// NewRedirectPolicy creates a new entry in the RedirectPolicy list of the
// NokiaConf_Configure_Filter_RedirectPolicyBinding struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) NewRedirectPolicy(RedirectPolicyName string) (*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicy == nil {
		t.RedirectPolicy = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy)
	}

	key := RedirectPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedirectPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedirectPolicy", key)
	}

	t.RedirectPolicy[key] = &NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy{
		RedirectPolicyName: &RedirectPolicyName,
	}

	return t.RedirectPolicy[key], nil
}

// RenameRedirectPolicy renames an entry in the list RedirectPolicy within
// the NokiaConf_Configure_Filter_RedirectPolicyBinding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) RenameRedirectPolicy(oldK, newK string) error {
	if _, ok := t.RedirectPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RedirectPolicy", newK)
	}

	e, ok := t.RedirectPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedirectPolicy", oldK)
	}
	e.RedirectPolicyName = &newK

	t.RedirectPolicy[newK] = e
	delete(t.RedirectPolicy, oldK)
	return nil
}

// GetOrCreateRedirectPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_RedirectPolicyBinding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) GetOrCreateRedirectPolicy(RedirectPolicyName string) *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy {

	key := RedirectPolicyName

	if v, ok := t.RedirectPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedirectPolicy(RedirectPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedirectPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRedirectPolicy retrieves the value with the specified key from
// the RedirectPolicy map field of NokiaConf_Configure_Filter_RedirectPolicyBinding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) GetRedirectPolicy(RedirectPolicyName string) *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy {

	if t == nil {
		return nil
	}

	key := RedirectPolicyName

	if lm, ok := t.RedirectPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedirectPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_RedirectPolicyBinding. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) DeleteRedirectPolicy(RedirectPolicyName string) {
	key := RedirectPolicyName

	delete(t.RedirectPolicy, key)
}

// AppendRedirectPolicy appends the supplied NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy struct to the
// list RedirectPolicy of NokiaConf_Configure_Filter_RedirectPolicyBinding. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) AppendRedirectPolicy(v *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) error {
	if v.RedirectPolicyName == nil {
		return fmt.Errorf("invalid nil key received for RedirectPolicyName")
	}

	key := *v.RedirectPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicy == nil {
		t.RedirectPolicy = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy)
	}

	if _, ok := t.RedirectPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RedirectPolicy %v", key)
	}

	t.RedirectPolicy[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_RedirectPolicyBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_RedirectPolicyBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBindingName retrieves the value of the leaf BindingName from the NokiaConf_Configure_Filter_RedirectPolicyBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingName is set, it can
// safely use t.GetBindingName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) GetBindingName() string {
	if t == nil || t.BindingName == nil {
		return ""
	}
	return *t.BindingName
}

// GetBindingOperator retrieves the value of the leaf BindingOperator from the NokiaConf_Configure_Filter_RedirectPolicyBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingOperator is set, it can
// safely use t.GetBindingOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingOperator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) GetBindingOperator() E_NokiaTypesFilter_FilterBindingOperator {
	if t == nil || t.BindingOperator == 0 {
		return NokiaTypesFilter_FilterBindingOperator_and
	}
	return t.BindingOperator
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_RedirectPolicyBinding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BindingOperator == 0 {
		t.BindingOperator = NokiaTypesFilter_FilterBindingOperator_and
	}
	for _, e := range t.RedirectPolicy {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_RedirectPolicyBinding struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BindingName == nil {
		return nil, fmt.Errorf("nil value for key BindingName")
	}

	return map[string]interface{}{
		"binding-name": *t.BindingName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_RedirectPolicyBinding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_RedirectPolicyBinding.
func (*NokiaConf_Configure_Filter_RedirectPolicyBinding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy represents the /nokia-conf/configure/filter/redirect-policy-binding/redirect-policy YANG schema element.
type NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy struct {
	ApplyGroups        []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Destination        map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination `path:"destination" module:"nokia-conf"`
	RedirectPolicyName *string                                                                                 `path:"redirect-policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) IsYANGGoStruct() {}

// NewDestination creates a new entry in the Destination list of the
// NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) NewDestination(DestinationAddress string) (*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination)
	}

	key := DestinationAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination{
		DestinationAddress: &DestinationAddress,
	}

	return t.Destination[key], nil
}

// RenameDestination renames an entry in the list Destination within
// the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) RenameDestination(oldK, newK string) error {
	if _, ok := t.Destination[newK]; ok {
		return fmt.Errorf("key %v already exists in Destination", newK)
	}

	e, ok := t.Destination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Destination", oldK)
	}
	e.DestinationAddress = &newK

	t.Destination[newK] = e
	delete(t.Destination, oldK)
	return nil
}

// GetOrCreateDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) GetOrCreateDestination(DestinationAddress string) *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination {

	key := DestinationAddress

	if v, ok := t.Destination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestination(DestinationAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestination got unexpected error: %v", err))
	}
	return v
}

// GetDestination retrieves the value with the specified key from
// the Destination map field of NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) GetDestination(DestinationAddress string) *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination {

	if t == nil {
		return nil
	}

	key := DestinationAddress

	if lm, ok := t.Destination[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) DeleteDestination(DestinationAddress string) {
	key := DestinationAddress

	delete(t.Destination, key)
}

// AppendDestination appends the supplied NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination struct to the
// list Destination of NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) AppendDestination(v *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) error {
	if v.DestinationAddress == nil {
		return fmt.Errorf("invalid nil key received for DestinationAddress")
	}

	key := *v.DestinationAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[string]*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination)
	}

	if _, ok := t.Destination[key]; ok {
		return fmt.Errorf("duplicate key for list Destination %v", key)
	}

	t.Destination[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRedirectPolicyName retrieves the value of the leaf RedirectPolicyName from the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectPolicyName is set, it can
// safely use t.GetRedirectPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) GetRedirectPolicyName() string {
	if t == nil || t.RedirectPolicyName == nil {
		return ""
	}
	return *t.RedirectPolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Destination {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RedirectPolicyName == nil {
		return nil, fmt.Errorf("nil value for key RedirectPolicyName")
	}

	return map[string]interface{}{
		"redirect-policy-name": *t.RedirectPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy.
func (*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination represents the /nokia-conf/configure/filter/redirect-policy-binding/redirect-policy/destination YANG schema element.
type NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination struct {
	DestinationAddress *string `path:"destination-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) IsYANGGoStruct() {
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination.
func (*NokiaConf_Configure_Filter_RedirectPolicyBinding_RedirectPolicy_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_RedirectPolicy_Destination represents the /nokia-conf/configure/filter/redirect-policy/destination YANG schema element.
type NokiaConf_Configure_Filter_RedirectPolicy_Destination struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                              `path:"description" module:"nokia-conf"`
	DestinationAddress *string                                                              `path:"destination-address" module:"nokia-conf"`
	PingTest           *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest      `path:"ping-test" module:"nokia-conf" yangPresence:"true"`
	Priority           *uint32                                                              `path:"priority" module:"nokia-conf"`
	UnicastRtTest      *NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest `path:"unicast-rt-test" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_RedirectPolicy_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_RedirectPolicy_Destination) IsYANGGoStruct() {}

// GetOrCreatePingTest retrieves the value of the PingTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetOrCreatePingTest() *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest {
	if t.PingTest != nil {
		return t.PingTest
	}
	t.PingTest = &NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest{}
	return t.PingTest
}

// GetOrCreateUnicastRtTest retrieves the value of the UnicastRtTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetOrCreateUnicastRtTest() *NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest {
	if t.UnicastRtTest != nil {
		return t.UnicastRtTest
	}
	t.UnicastRtTest = &NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest{}
	return t.UnicastRtTest
}

// GetPingTest returns the value of the PingTest struct pointer
// from NokiaConf_Configure_Filter_RedirectPolicy_Destination. If the receiver or the field PingTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetPingTest() *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest {
	if t != nil && t.PingTest != nil {
		return t.PingTest
	}
	return nil
}

// GetUnicastRtTest returns the value of the UnicastRtTest struct pointer
// from NokiaConf_Configure_Filter_RedirectPolicy_Destination. If the receiver or the field UnicastRtTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetUnicastRtTest() *NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest {
	if t != nil && t.UnicastRtTest != nil {
		return t.UnicastRtTest
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Filter_RedirectPolicy_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_RedirectPolicy_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_RedirectPolicy_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Filter_RedirectPolicy_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NokiaConf_Configure_Filter_RedirectPolicy_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Filter_RedirectPolicy_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_RedirectPolicy_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Priority == nil {
		var v uint32 = 100
		t.Priority = &v
	}
	t.PingTest.PopulateDefaults()
	t.UnicastRtTest.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_RedirectPolicy_Destination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_RedirectPolicy_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_RedirectPolicy_Destination.
func (*NokiaConf_Configure_Filter_RedirectPolicy_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest represents the /nokia-conf/configure/filter/redirect-policy/destination/ping-test YANG schema element.
type NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DropCount          *uint32  `path:"drop-count" module:"nokia-conf"`
	HoldDown           *uint32  `path:"hold-down" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
	SourceAddress      *string  `path:"source-address" module:"nokia-conf"`
	Timeout            *uint32  `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) GetHoldDown() uint32 {
	if t == nil || t.HoldDown == nil {
		return 0
	}
	return *t.HoldDown
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 1
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.HoldDown == nil {
		var v uint32 = 0
		t.HoldDown = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Timeout == nil {
		var v uint32 = 1
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest.
func (*NokiaConf_Configure_Filter_RedirectPolicy_Destination_PingTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest represents the /nokia-conf/configure/filter/redirect-policy/destination/unicast-rt-test YANG schema element.
type NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest.
func (*NokiaConf_Configure_Filter_RedirectPolicy_Destination_UnicastRtTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_SystemFilter represents the /nokia-conf/configure/filter/system-filter YANG schema element.
type NokiaConf_Configure_Filter_SystemFilter struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Ip                 map[string]*NokiaConf_Configure_Filter_SystemFilter_Ip   `path:"ip" module:"nokia-conf"`
	Ipv6               map[string]*NokiaConf_Configure_Filter_SystemFilter_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_SystemFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_SystemFilter) IsYANGGoStruct() {}

// NewIp creates a new entry in the Ip list of the
// NokiaConf_Configure_Filter_SystemFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_SystemFilter) NewIp(IpFilter string) (*NokiaConf_Configure_Filter_SystemFilter_Ip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ip == nil {
		t.Ip = make(map[string]*NokiaConf_Configure_Filter_SystemFilter_Ip)
	}

	key := IpFilter

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ip", key)
	}

	t.Ip[key] = &NokiaConf_Configure_Filter_SystemFilter_Ip{
		IpFilter: &IpFilter,
	}

	return t.Ip[key], nil
}

// RenameIp renames an entry in the list Ip within
// the NokiaConf_Configure_Filter_SystemFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_SystemFilter) RenameIp(oldK, newK string) error {
	if _, ok := t.Ip[newK]; ok {
		return fmt.Errorf("key %v already exists in Ip", newK)
	}

	e, ok := t.Ip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ip", oldK)
	}
	e.IpFilter = &newK

	t.Ip[newK] = e
	delete(t.Ip, oldK)
	return nil
}

// GetOrCreateIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_SystemFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_SystemFilter) GetOrCreateIp(IpFilter string) *NokiaConf_Configure_Filter_SystemFilter_Ip {

	key := IpFilter

	if v, ok := t.Ip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIp(IpFilter)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIp got unexpected error: %v", err))
	}
	return v
}

// GetIp retrieves the value with the specified key from
// the Ip map field of NokiaConf_Configure_Filter_SystemFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_SystemFilter) GetIp(IpFilter string) *NokiaConf_Configure_Filter_SystemFilter_Ip {

	if t == nil {
		return nil
	}

	key := IpFilter

	if lm, ok := t.Ip[key]; ok {
		return lm
	}
	return nil
}

// DeleteIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_SystemFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_SystemFilter) DeleteIp(IpFilter string) {
	key := IpFilter

	delete(t.Ip, key)
}

// AppendIp appends the supplied NokiaConf_Configure_Filter_SystemFilter_Ip struct to the
// list Ip of NokiaConf_Configure_Filter_SystemFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_SystemFilter_Ip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_SystemFilter) AppendIp(v *NokiaConf_Configure_Filter_SystemFilter_Ip) error {
	if v.IpFilter == nil {
		return fmt.Errorf("invalid nil key received for IpFilter")
	}

	key := *v.IpFilter

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ip == nil {
		t.Ip = make(map[string]*NokiaConf_Configure_Filter_SystemFilter_Ip)
	}

	if _, ok := t.Ip[key]; ok {
		return fmt.Errorf("duplicate key for list Ip %v", key)
	}

	t.Ip[key] = v
	return nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NokiaConf_Configure_Filter_SystemFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Filter_SystemFilter) NewIpv6(Ipv6Filter string) (*NokiaConf_Configure_Filter_SystemFilter_Ipv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[string]*NokiaConf_Configure_Filter_SystemFilter_Ipv6)
	}

	key := Ipv6Filter

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NokiaConf_Configure_Filter_SystemFilter_Ipv6{
		Ipv6Filter: &Ipv6Filter,
	}

	return t.Ipv6[key], nil
}

// RenameIpv6 renames an entry in the list Ipv6 within
// the NokiaConf_Configure_Filter_SystemFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Filter_SystemFilter) RenameIpv6(oldK, newK string) error {
	if _, ok := t.Ipv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6", newK)
	}

	e, ok := t.Ipv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6", oldK)
	}
	e.Ipv6Filter = &newK

	t.Ipv6[newK] = e
	delete(t.Ipv6, oldK)
	return nil
}

// GetOrCreateIpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_SystemFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Filter_SystemFilter) GetOrCreateIpv6(Ipv6Filter string) *NokiaConf_Configure_Filter_SystemFilter_Ipv6 {

	key := Ipv6Filter

	if v, ok := t.Ipv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6(Ipv6Filter)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6 got unexpected error: %v", err))
	}
	return v
}

// GetIpv6 retrieves the value with the specified key from
// the Ipv6 map field of NokiaConf_Configure_Filter_SystemFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Filter_SystemFilter) GetIpv6(Ipv6Filter string) *NokiaConf_Configure_Filter_SystemFilter_Ipv6 {

	if t == nil {
		return nil
	}

	key := Ipv6Filter

	if lm, ok := t.Ipv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Filter_SystemFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Filter_SystemFilter) DeleteIpv6(Ipv6Filter string) {
	key := Ipv6Filter

	delete(t.Ipv6, key)
}

// AppendIpv6 appends the supplied NokiaConf_Configure_Filter_SystemFilter_Ipv6 struct to the
// list Ipv6 of NokiaConf_Configure_Filter_SystemFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Filter_SystemFilter_Ipv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Filter_SystemFilter) AppendIpv6(v *NokiaConf_Configure_Filter_SystemFilter_Ipv6) error {
	if v.Ipv6Filter == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Filter")
	}

	key := *v.Ipv6Filter

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[string]*NokiaConf_Configure_Filter_SystemFilter_Ipv6)
	}

	if _, ok := t.Ipv6[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6 %v", key)
	}

	t.Ipv6[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Filter_SystemFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_SystemFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Filter_SystemFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_SystemFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_SystemFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_SystemFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ip {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_SystemFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_SystemFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_SystemFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_SystemFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_SystemFilter.
func (*NokiaConf_Configure_Filter_SystemFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_SystemFilter_Ip represents the /nokia-conf/configure/filter/system-filter/ip YANG schema element.
type NokiaConf_Configure_Filter_SystemFilter_Ip struct {
	IpFilter *string `path:"ip-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_SystemFilter_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_SystemFilter_Ip) IsYANGGoStruct() {}

// GetIpFilter retrieves the value of the leaf IpFilter from the NokiaConf_Configure_Filter_SystemFilter_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilter is set, it can
// safely use t.GetIpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ip) GetIpFilter() string {
	if t == nil || t.IpFilter == nil {
		return ""
	}
	return *t.IpFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_SystemFilter_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_SystemFilter_Ip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ip) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpFilter == nil {
		return nil, fmt.Errorf("nil value for key IpFilter")
	}

	return map[string]interface{}{
		"ip-filter": *t.IpFilter,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_SystemFilter_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_SystemFilter_Ip.
func (*NokiaConf_Configure_Filter_SystemFilter_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Filter_SystemFilter_Ipv6 represents the /nokia-conf/configure/filter/system-filter/ipv6 YANG schema element.
type NokiaConf_Configure_Filter_SystemFilter_Ipv6 struct {
	Ipv6Filter *string `path:"ipv6-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Filter_SystemFilter_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Filter_SystemFilter_Ipv6) IsYANGGoStruct() {}

// GetIpv6Filter retrieves the value of the leaf Ipv6Filter from the NokiaConf_Configure_Filter_SystemFilter_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Filter is set, it can
// safely use t.GetIpv6Filter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Filter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ipv6) GetIpv6Filter() string {
	if t == nil || t.Ipv6Filter == nil {
		return ""
	}
	return *t.Ipv6Filter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Filter_SystemFilter_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Filter_SystemFilter_Ipv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Filter == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Filter")
	}

	return map[string]interface{}{
		"ipv6-filter": *t.Ipv6Filter,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Filter_SystemFilter_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Filter_SystemFilter_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Filter_SystemFilter_Ipv6.
func (*NokiaConf_Configure_Filter_SystemFilter_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt represents the /nokia-conf/configure/fwd-path-ext YANG schema element.
type NokiaConf_Configure_FwdPathExt struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Fpe                map[uint32]*NokiaConf_Configure_FwdPathExt_Fpe `path:"fpe" module:"nokia-conf"`
	SdpIdRange         *NokiaConf_Configure_FwdPathExt_SdpIdRange     `path:"sdp-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt) IsYANGGoStruct() {}

// NewFpe creates a new entry in the Fpe list of the
// NokiaConf_Configure_FwdPathExt struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_FwdPathExt) NewFpe(FpeId uint32) (*NokiaConf_Configure_FwdPathExt_Fpe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fpe == nil {
		t.Fpe = make(map[uint32]*NokiaConf_Configure_FwdPathExt_Fpe)
	}

	key := FpeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fpe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fpe", key)
	}

	t.Fpe[key] = &NokiaConf_Configure_FwdPathExt_Fpe{
		FpeId: &FpeId,
	}

	return t.Fpe[key], nil
}

// RenameFpe renames an entry in the list Fpe within
// the NokiaConf_Configure_FwdPathExt struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_FwdPathExt) RenameFpe(oldK, newK uint32) error {
	if _, ok := t.Fpe[newK]; ok {
		return fmt.Errorf("key %v already exists in Fpe", newK)
	}

	e, ok := t.Fpe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fpe", oldK)
	}
	e.FpeId = &newK

	t.Fpe[newK] = e
	delete(t.Fpe, oldK)
	return nil
}

// GetOrCreateFpe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_FwdPathExt. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_FwdPathExt) GetOrCreateFpe(FpeId uint32) *NokiaConf_Configure_FwdPathExt_Fpe {

	key := FpeId

	if v, ok := t.Fpe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFpe(FpeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFpe got unexpected error: %v", err))
	}
	return v
}

// GetFpe retrieves the value with the specified key from
// the Fpe map field of NokiaConf_Configure_FwdPathExt. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_FwdPathExt) GetFpe(FpeId uint32) *NokiaConf_Configure_FwdPathExt_Fpe {

	if t == nil {
		return nil
	}

	key := FpeId

	if lm, ok := t.Fpe[key]; ok {
		return lm
	}
	return nil
}

// DeleteFpe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_FwdPathExt. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_FwdPathExt) DeleteFpe(FpeId uint32) {
	key := FpeId

	delete(t.Fpe, key)
}

// AppendFpe appends the supplied NokiaConf_Configure_FwdPathExt_Fpe struct to the
// list Fpe of NokiaConf_Configure_FwdPathExt. If the key value(s) specified in
// the supplied NokiaConf_Configure_FwdPathExt_Fpe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_FwdPathExt) AppendFpe(v *NokiaConf_Configure_FwdPathExt_Fpe) error {
	if v.FpeId == nil {
		return fmt.Errorf("invalid nil key received for FpeId")
	}

	key := *v.FpeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fpe == nil {
		t.Fpe = make(map[uint32]*NokiaConf_Configure_FwdPathExt_Fpe)
	}

	if _, ok := t.Fpe[key]; ok {
		return fmt.Errorf("duplicate key for list Fpe %v", key)
	}

	t.Fpe[key] = v
	return nil
}

// GetOrCreateSdpIdRange retrieves the value of the SdpIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt) GetOrCreateSdpIdRange() *NokiaConf_Configure_FwdPathExt_SdpIdRange {
	if t.SdpIdRange != nil {
		return t.SdpIdRange
	}
	t.SdpIdRange = &NokiaConf_Configure_FwdPathExt_SdpIdRange{}
	return t.SdpIdRange
}

// GetSdpIdRange returns the value of the SdpIdRange struct pointer
// from NokiaConf_Configure_FwdPathExt. If the receiver or the field SdpIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt) GetSdpIdRange() *NokiaConf_Configure_FwdPathExt_SdpIdRange {
	if t != nil && t.SdpIdRange != nil {
		return t.SdpIdRange
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_FwdPathExt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_FwdPathExt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SdpIdRange.PopulateDefaults()
	for _, e := range t.Fpe {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt.
func (*NokiaConf_Configure_FwdPathExt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe represents the /nokia-conf/configure/fwd-path-ext/fpe YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe struct {
	Application        *NokiaConf_Configure_FwdPathExt_Fpe_Application `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                         `path:"description" module:"nokia-conf"`
	FpeId              *uint32                                         `path:"fpe-id" module:"nokia-conf"`
	MultiPath          *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath   `path:"multi-path" module:"nokia-conf" yangPresence:"true"`
	Path               *NokiaConf_Configure_FwdPathExt_Fpe_Path        `path:"path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe) IsYANGGoStruct() {}

// GetOrCreateApplication retrieves the value of the Application field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetOrCreateApplication() *NokiaConf_Configure_FwdPathExt_Fpe_Application {
	if t.Application != nil {
		return t.Application
	}
	t.Application = &NokiaConf_Configure_FwdPathExt_Fpe_Application{}
	return t.Application
}

// GetOrCreateMultiPath retrieves the value of the MultiPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetOrCreateMultiPath() *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath {
	if t.MultiPath != nil {
		return t.MultiPath
	}
	t.MultiPath = &NokiaConf_Configure_FwdPathExt_Fpe_MultiPath{}
	return t.MultiPath
}

// GetOrCreatePath retrieves the value of the Path field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetOrCreatePath() *NokiaConf_Configure_FwdPathExt_Fpe_Path {
	if t.Path != nil {
		return t.Path
	}
	t.Path = &NokiaConf_Configure_FwdPathExt_Fpe_Path{}
	return t.Path
}

// GetApplication returns the value of the Application struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe. If the receiver or the field Application is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetApplication() *NokiaConf_Configure_FwdPathExt_Fpe_Application {
	if t != nil && t.Application != nil {
		return t.Application
	}
	return nil
}

// GetMultiPath returns the value of the MultiPath struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe. If the receiver or the field MultiPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetMultiPath() *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath {
	if t != nil && t.MultiPath != nil {
		return t.MultiPath
	}
	return nil
}

// GetPath returns the value of the Path struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe. If the receiver or the field Path is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetPath() *NokiaConf_Configure_FwdPathExt_Fpe_Path {
	if t != nil && t.Path != nil {
		return t.Path
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_FwdPathExt_Fpe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_FwdPathExt_Fpe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_FwdPathExt_Fpe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_FwdPathExt_Fpe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Application.PopulateDefaults()
	t.MultiPath.PopulateDefaults()
	t.Path.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_FwdPathExt_Fpe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FpeId == nil {
		return nil, fmt.Errorf("nil value for key FpeId")
	}

	return map[string]interface{}{
		"fpe-id": *t.FpeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe.
func (*NokiaConf_Configure_FwdPathExt_Fpe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application represents the /nokia-conf/configure/fwd-path-ext/fpe/application YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application struct {
	PwPort           *bool                                                            `path:"pw-port" module:"nokia-conf"`
	PwPortExtension  *NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension  `path:"pw-port-extension" module:"nokia-conf" yangPresence:"true"`
	Srv6             *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6             `path:"srv6" module:"nokia-conf" yangPresence:"true"`
	SubMgmtExtension *bool                                                            `path:"sub-mgmt-extension" module:"nokia-conf"`
	Vxlan            *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan            `path:"vxlan" module:"nokia-conf" yangPresence:"true"`
	VxlanTermination *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination `path:"vxlan-termination" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application) IsYANGGoStruct() {}

// GetOrCreatePwPortExtension retrieves the value of the PwPortExtension field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetOrCreatePwPortExtension() *NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension {
	if t.PwPortExtension != nil {
		return t.PwPortExtension
	}
	t.PwPortExtension = &NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension{}
	return t.PwPortExtension
}

// GetOrCreateSrv6 retrieves the value of the Srv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetOrCreateSrv6() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6 {
	if t.Srv6 != nil {
		return t.Srv6
	}
	t.Srv6 = &NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6{}
	return t.Srv6
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetOrCreateVxlan() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan{}
	return t.Vxlan
}

// GetOrCreateVxlanTermination retrieves the value of the VxlanTermination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetOrCreateVxlanTermination() *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination {
	if t.VxlanTermination != nil {
		return t.VxlanTermination
	}
	t.VxlanTermination = &NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination{}
	return t.VxlanTermination
}

// GetPwPortExtension returns the value of the PwPortExtension struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application. If the receiver or the field PwPortExtension is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetPwPortExtension() *NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension {
	if t != nil && t.PwPortExtension != nil {
		return t.PwPortExtension
	}
	return nil
}

// GetSrv6 returns the value of the Srv6 struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application. If the receiver or the field Srv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetSrv6() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6 {
	if t != nil && t.Srv6 != nil {
		return t.Srv6
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetVxlan() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetVxlanTermination returns the value of the VxlanTermination struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application. If the receiver or the field VxlanTermination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetVxlanTermination() *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination {
	if t != nil && t.VxlanTermination != nil {
		return t.VxlanTermination
	}
	return nil
}

// GetPwPort retrieves the value of the leaf PwPort from the NokiaConf_Configure_FwdPathExt_Fpe_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwPort is set, it can
// safely use t.GetPwPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetPwPort() bool {
	if t == nil || t.PwPort == nil {
		return false
	}
	return *t.PwPort
}

// GetSubMgmtExtension retrieves the value of the leaf SubMgmtExtension from the NokiaConf_Configure_FwdPathExt_Fpe_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubMgmtExtension is set, it can
// safely use t.GetSubMgmtExtension() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubMgmtExtension == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) GetSubMgmtExtension() bool {
	if t == nil || t.SubMgmtExtension == nil {
		return false
	}
	return *t.SubMgmtExtension
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PwPort == nil {
		var v bool = false
		t.PwPort = &v
	}
	if t.SubMgmtExtension == nil {
		var v bool = false
		t.SubMgmtExtension = &v
	}
	t.PwPortExtension.PopulateDefaults()
	t.Srv6.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
	t.VxlanTermination.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension represents the /nokia-conf/configure/fwd-path-ext/fpe/application/pw-port-extension YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_PwPortExtension) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6 represents the /nokia-conf/configure/fwd-path-ext/fpe/application/srv6 YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6 struct {
	InterfaceA *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA `path:"interface-a" module:"nokia-conf"`
	InterfaceB *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB `path:"interface-b" module:"nokia-conf"`
	Type       E_NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_Type      `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) IsYANGGoStruct() {}

// GetOrCreateInterfaceA retrieves the value of the InterfaceA field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) GetOrCreateInterfaceA() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA {
	if t.InterfaceA != nil {
		return t.InterfaceA
	}
	t.InterfaceA = &NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA{}
	return t.InterfaceA
}

// GetOrCreateInterfaceB retrieves the value of the InterfaceB field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) GetOrCreateInterfaceB() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB {
	if t.InterfaceB != nil {
		return t.InterfaceB
	}
	t.InterfaceB = &NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB{}
	return t.InterfaceB
}

// GetInterfaceA returns the value of the InterfaceA struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6. If the receiver or the field InterfaceA is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) GetInterfaceA() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA {
	if t != nil && t.InterfaceA != nil {
		return t.InterfaceA
	}
	return nil
}

// GetInterfaceB returns the value of the InterfaceB struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6. If the receiver or the field InterfaceB is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) GetInterfaceB() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB {
	if t != nil && t.InterfaceB != nil {
		return t.InterfaceB
	}
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) GetType() E_NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceA.PopulateDefaults()
	t.InterfaceB.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA represents the /nokia-conf/configure/fwd-path-ext/fpe/application/srv6/interface-a YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA struct {
	Qos *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) GetOrCreateQos() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) GetQos() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos represents the /nokia-conf/configure/fwd-path-ext/fpe/application/srv6/interface-a/qos YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos struct {
	NetworkPolicy *string `path:"network-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos) IsYANGGoStruct() {}

// GetNetworkPolicy retrieves the value of the leaf NetworkPolicy from the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkPolicy is set, it can
// safely use t.GetNetworkPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos) GetNetworkPolicy() string {
	if t == nil || t.NetworkPolicy == nil {
		return ""
	}
	return *t.NetworkPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceA_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB represents the /nokia-conf/configure/fwd-path-ext/fpe/application/srv6/interface-b YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB struct {
	Mtu *uint32                                                             `path:"mtu" module:"nokia-conf"`
	Qos *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) GetOrCreateQos() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) GetQos() *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos represents the /nokia-conf/configure/fwd-path-ext/fpe/application/srv6/interface-b/qos YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos struct {
	NetworkPolicy *string `path:"network-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos) IsYANGGoStruct() {}

// GetNetworkPolicy retrieves the value of the leaf NetworkPolicy from the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkPolicy is set, it can
// safely use t.GetNetworkPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos) GetNetworkPolicy() string {
	if t == nil || t.NetworkPolicy == nil {
		return ""
	}
	return *t.NetworkPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Srv6_InterfaceB_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan represents the /nokia-conf/configure/fwd-path-ext/fpe/application/vxlan YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan struct {
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan) IsYANGGoStruct() {}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination represents the /nokia-conf/configure/fwd-path-ext/fpe/application/vxlan-termination YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination struct {
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination) IsYANGGoStruct() {}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Application_VxlanTermination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_MultiPath represents the /nokia-conf/configure/fwd-path-ext/fpe/multi-path YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_MultiPath struct {
	Path map[uint32]*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path `path:"path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_MultiPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) IsYANGGoStruct() {}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_FwdPathExt_Fpe_MultiPath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) NewPath(PathId uint32) (*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[uint32]*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path)
	}

	key := PathId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path{
		PathId: &PathId,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) RenamePath(oldK, newK uint32) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PathId = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_FwdPathExt_Fpe_MultiPath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) GetOrCreatePath(PathId uint32) *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path {

	key := PathId

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_FwdPathExt_Fpe_MultiPath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) GetPath(PathId uint32) *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path {

	if t == nil {
		return nil
	}

	key := PathId

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_FwdPathExt_Fpe_MultiPath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) DeletePath(PathId uint32) {
	key := PathId

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path struct to the
// list Path of NokiaConf_Configure_FwdPathExt_Fpe_MultiPath. If the key value(s) specified in
// the supplied NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) AppendPath(v *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key received for PathId")
	}

	key := *v.PathId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[uint32]*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_MultiPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_MultiPath.
func (*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path represents the /nokia-conf/configure/fwd-path-ext/fpe/multi-path/path YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PathId             *uint32  `path:"path-id" module:"nokia-conf"`
	Pxc                *uint32  `path:"pxc" module:"nokia-conf"`
	XcLagA             *string  `path:"xc-lag-a" module:"nokia-conf"`
	XcLagB             *string  `path:"xc-lag-b" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPathId retrieves the value of the leaf PathId from the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPxc retrieves the value of the leaf Pxc from the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pxc is set, it can
// safely use t.GetPxc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pxc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) GetPxc() uint32 {
	if t == nil || t.Pxc == nil {
		return 0
	}
	return *t.Pxc
}

// GetXcLagA retrieves the value of the leaf XcLagA from the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XcLagA is set, it can
// safely use t.GetXcLagA() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XcLagA == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) GetXcLagA() string {
	if t == nil || t.XcLagA == nil {
		return ""
	}
	return *t.XcLagA
}

// GetXcLagB retrieves the value of the leaf XcLagB from the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XcLagB is set, it can
// safely use t.GetXcLagB() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XcLagB == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) GetXcLagB() string {
	if t == nil || t.XcLagB == nil {
		return ""
	}
	return *t.XcLagB
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path.
func (*NokiaConf_Configure_FwdPathExt_Fpe_MultiPath_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_Fpe_Path represents the /nokia-conf/configure/fwd-path-ext/fpe/path YANG schema element.
type NokiaConf_Configure_FwdPathExt_Fpe_Path struct {
	Pxc    *uint32 `path:"pxc" module:"nokia-conf"`
	XcLagA *string `path:"xc-lag-a" module:"nokia-conf"`
	XcLagB *string `path:"xc-lag-b" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_Fpe_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Path) IsYANGGoStruct() {}

// GetPxc retrieves the value of the leaf Pxc from the NokiaConf_Configure_FwdPathExt_Fpe_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pxc is set, it can
// safely use t.GetPxc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pxc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Path) GetPxc() uint32 {
	if t == nil || t.Pxc == nil {
		return 0
	}
	return *t.Pxc
}

// GetXcLagA retrieves the value of the leaf XcLagA from the NokiaConf_Configure_FwdPathExt_Fpe_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XcLagA is set, it can
// safely use t.GetXcLagA() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XcLagA == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Path) GetXcLagA() string {
	if t == nil || t.XcLagA == nil {
		return ""
	}
	return *t.XcLagA
}

// GetXcLagB retrieves the value of the leaf XcLagB from the NokiaConf_Configure_FwdPathExt_Fpe_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XcLagB is set, it can
// safely use t.GetXcLagB() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XcLagB == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Path) GetXcLagB() string {
	if t == nil || t.XcLagB == nil {
		return ""
	}
	return *t.XcLagB
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_Fpe_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_Fpe_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_Fpe_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_Fpe_Path.
func (*NokiaConf_Configure_FwdPathExt_Fpe_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_FwdPathExt_SdpIdRange represents the /nokia-conf/configure/fwd-path-ext/sdp-id-range YANG schema element.
type NokiaConf_Configure_FwdPathExt_SdpIdRange struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *uint32  `path:"end" module:"nokia-conf"`
	Start              *uint32  `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_FwdPathExt_SdpIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_FwdPathExt_SdpIdRange) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_FwdPathExt_SdpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_FwdPathExt_SdpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_FwdPathExt_SdpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_FwdPathExt_SdpIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_FwdPathExt_SdpIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_FwdPathExt_SdpIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_FwdPathExt_SdpIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_FwdPathExt_SdpIdRange.
func (*NokiaConf_Configure_FwdPathExt_SdpIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_GroupEncryption represents the /nokia-conf/configure/group-encryption YANG schema element.
type NokiaConf_Configure_GroupEncryption struct {
	ApplyGroups          []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	EncryptionKeygroup   map[uint32]*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup `path:"encryption-keygroup" module:"nokia-conf"`
	GroupEncryptionLabel *uint32                                                            `path:"group-encryption-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_GroupEncryption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_GroupEncryption) IsYANGGoStruct() {}

// NewEncryptionKeygroup creates a new entry in the EncryptionKeygroup list of the
// NokiaConf_Configure_GroupEncryption struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_GroupEncryption) NewEncryptionKeygroup(Id uint32) (*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncryptionKeygroup == nil {
		t.EncryptionKeygroup = make(map[uint32]*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EncryptionKeygroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EncryptionKeygroup", key)
	}

	t.EncryptionKeygroup[key] = &NokiaConf_Configure_GroupEncryption_EncryptionKeygroup{
		Id: &Id,
	}

	return t.EncryptionKeygroup[key], nil
}

// RenameEncryptionKeygroup renames an entry in the list EncryptionKeygroup within
// the NokiaConf_Configure_GroupEncryption struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_GroupEncryption) RenameEncryptionKeygroup(oldK, newK uint32) error {
	if _, ok := t.EncryptionKeygroup[newK]; ok {
		return fmt.Errorf("key %v already exists in EncryptionKeygroup", newK)
	}

	e, ok := t.EncryptionKeygroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EncryptionKeygroup", oldK)
	}
	e.Id = &newK

	t.EncryptionKeygroup[newK] = e
	delete(t.EncryptionKeygroup, oldK)
	return nil
}

// GetOrCreateEncryptionKeygroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_GroupEncryption. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_GroupEncryption) GetOrCreateEncryptionKeygroup(Id uint32) *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup {

	key := Id

	if v, ok := t.EncryptionKeygroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEncryptionKeygroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEncryptionKeygroup got unexpected error: %v", err))
	}
	return v
}

// GetEncryptionKeygroup retrieves the value with the specified key from
// the EncryptionKeygroup map field of NokiaConf_Configure_GroupEncryption. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_GroupEncryption) GetEncryptionKeygroup(Id uint32) *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.EncryptionKeygroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteEncryptionKeygroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_GroupEncryption. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_GroupEncryption) DeleteEncryptionKeygroup(Id uint32) {
	key := Id

	delete(t.EncryptionKeygroup, key)
}

// AppendEncryptionKeygroup appends the supplied NokiaConf_Configure_GroupEncryption_EncryptionKeygroup struct to the
// list EncryptionKeygroup of NokiaConf_Configure_GroupEncryption. If the key value(s) specified in
// the supplied NokiaConf_Configure_GroupEncryption_EncryptionKeygroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_GroupEncryption) AppendEncryptionKeygroup(v *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncryptionKeygroup == nil {
		t.EncryptionKeygroup = make(map[uint32]*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup)
	}

	if _, ok := t.EncryptionKeygroup[key]; ok {
		return fmt.Errorf("duplicate key for list EncryptionKeygroup %v", key)
	}

	t.EncryptionKeygroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_GroupEncryption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_GroupEncryption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupEncryptionLabel retrieves the value of the leaf GroupEncryptionLabel from the NokiaConf_Configure_GroupEncryption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupEncryptionLabel is set, it can
// safely use t.GetGroupEncryptionLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupEncryptionLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption) GetGroupEncryptionLabel() uint32 {
	if t == nil || t.GroupEncryptionLabel == nil {
		return 0
	}
	return *t.GroupEncryptionLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_GroupEncryption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_GroupEncryption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EncryptionKeygroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_GroupEncryption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_GroupEncryption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_GroupEncryption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_GroupEncryption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_GroupEncryption.
func (*NokiaConf_Configure_GroupEncryption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_GroupEncryption_EncryptionKeygroup represents the /nokia-conf/configure/group-encryption/encryption-keygroup YANG schema element.
type NokiaConf_Configure_GroupEncryption_EncryptionKeygroup struct {
	ActiveOutboundSecurityAssociation *uint32                                                                                `path:"active-outbound-security-association" module:"nokia-conf"`
	ApplyGroups                       []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude                []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationAlgorithm           E_NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_AuthenticationAlgorithm       `path:"authentication-algorithm" module:"nokia-conf"`
	Description                       *string                                                                                `path:"description" module:"nokia-conf"`
	EncryptionAlgorithm               E_NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_EncryptionAlgorithm           `path:"encryption-algorithm" module:"nokia-conf"`
	Id                                *uint32                                                                                `path:"id" module:"nokia-conf"`
	KeygroupName                      *string                                                                                `path:"keygroup-name" module:"nokia-conf"`
	SecurityAssociation               map[uint32]*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation `path:"security-association" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_GroupEncryption_EncryptionKeygroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) IsYANGGoStruct() {}

// NewSecurityAssociation creates a new entry in the SecurityAssociation list of the
// NokiaConf_Configure_GroupEncryption_EncryptionKeygroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) NewSecurityAssociation(SecurityParameterIndex uint32) (*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityAssociation == nil {
		t.SecurityAssociation = make(map[uint32]*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation)
	}

	key := SecurityParameterIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SecurityAssociation[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SecurityAssociation", key)
	}

	t.SecurityAssociation[key] = &NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation{
		SecurityParameterIndex: &SecurityParameterIndex,
	}

	return t.SecurityAssociation[key], nil
}

// RenameSecurityAssociation renames an entry in the list SecurityAssociation within
// the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) RenameSecurityAssociation(oldK, newK uint32) error {
	if _, ok := t.SecurityAssociation[newK]; ok {
		return fmt.Errorf("key %v already exists in SecurityAssociation", newK)
	}

	e, ok := t.SecurityAssociation[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SecurityAssociation", oldK)
	}
	e.SecurityParameterIndex = &newK

	t.SecurityAssociation[newK] = e
	delete(t.SecurityAssociation, oldK)
	return nil
}

// GetOrCreateSecurityAssociation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_GroupEncryption_EncryptionKeygroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetOrCreateSecurityAssociation(SecurityParameterIndex uint32) *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation {

	key := SecurityParameterIndex

	if v, ok := t.SecurityAssociation[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecurityAssociation(SecurityParameterIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecurityAssociation got unexpected error: %v", err))
	}
	return v
}

// GetSecurityAssociation retrieves the value with the specified key from
// the SecurityAssociation map field of NokiaConf_Configure_GroupEncryption_EncryptionKeygroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetSecurityAssociation(SecurityParameterIndex uint32) *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation {

	if t == nil {
		return nil
	}

	key := SecurityParameterIndex

	if lm, ok := t.SecurityAssociation[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecurityAssociation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_GroupEncryption_EncryptionKeygroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) DeleteSecurityAssociation(SecurityParameterIndex uint32) {
	key := SecurityParameterIndex

	delete(t.SecurityAssociation, key)
}

// AppendSecurityAssociation appends the supplied NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation struct to the
// list SecurityAssociation of NokiaConf_Configure_GroupEncryption_EncryptionKeygroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) AppendSecurityAssociation(v *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) error {
	if v.SecurityParameterIndex == nil {
		return fmt.Errorf("invalid nil key received for SecurityParameterIndex")
	}

	key := *v.SecurityParameterIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityAssociation == nil {
		t.SecurityAssociation = make(map[uint32]*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation)
	}

	if _, ok := t.SecurityAssociation[key]; ok {
		return fmt.Errorf("duplicate key for list SecurityAssociation %v", key)
	}

	t.SecurityAssociation[key] = v
	return nil
}

// GetActiveOutboundSecurityAssociation retrieves the value of the leaf ActiveOutboundSecurityAssociation from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveOutboundSecurityAssociation is set, it can
// safely use t.GetActiveOutboundSecurityAssociation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveOutboundSecurityAssociation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetActiveOutboundSecurityAssociation() uint32 {
	if t == nil || t.ActiveOutboundSecurityAssociation == nil {
		return 0
	}
	return *t.ActiveOutboundSecurityAssociation
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationAlgorithm retrieves the value of the leaf AuthenticationAlgorithm from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationAlgorithm is set, it can
// safely use t.GetAuthenticationAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetAuthenticationAlgorithm() E_NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_AuthenticationAlgorithm {
	if t == nil || t.AuthenticationAlgorithm == 0 {
		return NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_AuthenticationAlgorithm_sha256
	}
	return t.AuthenticationAlgorithm
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEncryptionAlgorithm retrieves the value of the leaf EncryptionAlgorithm from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionAlgorithm is set, it can
// safely use t.GetEncryptionAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetEncryptionAlgorithm() E_NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_EncryptionAlgorithm {
	if t == nil || t.EncryptionAlgorithm == 0 {
		return NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_EncryptionAlgorithm_aes128
	}
	return t.EncryptionAlgorithm
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetKeygroupName retrieves the value of the leaf KeygroupName from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeygroupName is set, it can
// safely use t.GetKeygroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeygroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) GetKeygroupName() string {
	if t == nil || t.KeygroupName == nil {
		return ""
	}
	return *t.KeygroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AuthenticationAlgorithm == 0 {
		t.AuthenticationAlgorithm = NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_AuthenticationAlgorithm_sha256
	}
	if t.EncryptionAlgorithm == 0 {
		t.EncryptionAlgorithm = NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_EncryptionAlgorithm_aes128
	}
	if t.KeygroupName == nil {
		var v string = ""
		t.KeygroupName = &v
	}
	for _, e := range t.SecurityAssociation {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_GroupEncryption_EncryptionKeygroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_GroupEncryption_EncryptionKeygroup.
func (*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation represents the /nokia-conf/configure/group-encryption/encryption-keygroup/security-association YANG schema element.
type NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation struct {
	ApplyGroups            []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey      *string  `path:"authentication-key" module:"nokia-conf"`
	EncryptionKey          *string  `path:"encryption-key" module:"nokia-conf"`
	SecurityParameterIndex *uint32  `path:"security-parameter-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetEncryptionKey retrieves the value of the leaf EncryptionKey from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionKey is set, it can
// safely use t.GetEncryptionKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) GetEncryptionKey() string {
	if t == nil || t.EncryptionKey == nil {
		return ""
	}
	return *t.EncryptionKey
}

// GetSecurityParameterIndex retrieves the value of the leaf SecurityParameterIndex from the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityParameterIndex is set, it can
// safely use t.GetSecurityParameterIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityParameterIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) GetSecurityParameterIndex() uint32 {
	if t == nil || t.SecurityParameterIndex == nil {
		return 0
	}
	return *t.SecurityParameterIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation struct, which is a YANG list entry.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SecurityParameterIndex == nil {
		return nil, fmt.Errorf("nil value for key SecurityParameterIndex")
	}

	return map[string]interface{}{
		"security-parameter-index": *t.SecurityParameterIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation.
func (*NokiaConf_Configure_GroupEncryption_EncryptionKeygroup_SecurityAssociation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups represents the /nokia-conf/configure/groups YANG schema element.
type NokiaConf_Configure_Groups struct {
	Group map[string]*NokiaConf_Configure_Groups_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups) NewGroup(Name string) (*NokiaConf_Configure_Groups_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups) GetOrCreateGroup(Name string) *NokiaConf_Configure_Groups_Group {

	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups) GetGroup(Name string) *NokiaConf_Configure_Groups_Group {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group struct to the
// list Group of NokiaConf_Configure_Groups. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups) AppendGroup(v *NokiaConf_Configure_Groups_Group) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups.
func (*NokiaConf_Configure_Groups) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group represents the /nokia-conf/configure/groups/group YANG schema element.
type NokiaConf_Configure_Groups_Group struct {
	Aaa                  *NokiaConf_Configure_Groups_Group_Aaa                                                                  `path:"aaa" module:"nokia-conf" yangPresence:"true"`
	ApplicationAssurance *NokiaConf_Configure_Groups_Group_ApplicationAssurance                                                 `path:"application-assurance" module:"nokia-conf" yangPresence:"true"`
	Aps                  map[NokiaConf_Configure_Groups_Group_Aps_GroupId_Union]*NokiaConf_Configure_Groups_Group_Aps           `path:"aps" module:"nokia-conf"`
	Bfd                  *NokiaConf_Configure_Groups_Group_Bfd                                                                  `path:"bfd" module:"nokia-conf" yangPresence:"true"`
	Bmp                  *NokiaConf_Configure_Groups_Group_Bmp                                                                  `path:"bmp" module:"nokia-conf" yangPresence:"true"`
	CallTrace            *NokiaConf_Configure_Groups_Group_CallTrace                                                            `path:"call-trace" module:"nokia-conf" yangPresence:"true"`
	Card                 map[NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union]*NokiaConf_Configure_Groups_Group_Card      `path:"card" module:"nokia-conf"`
	Cflowd               *NokiaConf_Configure_Groups_Group_Cflowd                                                               `path:"cflowd" module:"nokia-conf" yangPresence:"true"`
	Chassis              map[NokiaConf_Configure_Groups_Group_Chassis_Key]*NokiaConf_Configure_Groups_Group_Chassis             `path:"chassis" module:"nokia-conf"`
	ConnectionProfile    *NokiaConf_Configure_Groups_Group_ConnectionProfile                                                    `path:"connection-profile" module:"nokia-conf" yangPresence:"true"`
	Esa                  map[NokiaConf_Configure_Groups_Group_Esa_EsaId_Union]*NokiaConf_Configure_Groups_Group_Esa             `path:"esa" module:"nokia-conf"`
	EthCfm               *NokiaConf_Configure_Groups_Group_EthCfm                                                               `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	EthRing              map[NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union]*NokiaConf_Configure_Groups_Group_EthRing `path:"eth-ring" module:"nokia-conf"`
	Filter               *NokiaConf_Configure_Groups_Group_Filter                                                               `path:"filter" module:"nokia-conf" yangPresence:"true"`
	FwdPathExt           *NokiaConf_Configure_Groups_Group_FwdPathExt                                                           `path:"fwd-path-ext" module:"nokia-conf" yangPresence:"true"`
	GroupEncryption      *NokiaConf_Configure_Groups_Group_GroupEncryption                                                      `path:"group-encryption" module:"nokia-conf" yangPresence:"true"`
	Ipsec                *NokiaConf_Configure_Groups_Group_Ipsec                                                                `path:"ipsec" module:"nokia-conf" yangPresence:"true"`
	Isa                  *NokiaConf_Configure_Groups_Group_Isa                                                                  `path:"isa" module:"nokia-conf" yangPresence:"true"`
	Lag                  map[string]*NokiaConf_Configure_Groups_Group_Lag                                                       `path:"lag" module:"nokia-conf"`
	Log                  *NokiaConf_Configure_Groups_Group_Log                                                                  `path:"log" module:"nokia-conf" yangPresence:"true"`
	Macsec               *NokiaConf_Configure_Groups_Group_Macsec                                                               `path:"macsec" module:"nokia-conf" yangPresence:"true"`
	Mcac                 *NokiaConf_Configure_Groups_Group_Mcac                                                                 `path:"mcac" module:"nokia-conf" yangPresence:"true"`
	Mirror               *NokiaConf_Configure_Groups_Group_Mirror                                                               `path:"mirror" module:"nokia-conf" yangPresence:"true"`
	MulticastManagement  *NokiaConf_Configure_Groups_Group_MulticastManagement                                                  `path:"multicast-management" module:"nokia-conf" yangPresence:"true"`
	MultilinkBundle      map[string]*NokiaConf_Configure_Groups_Group_MultilinkBundle                                           `path:"multilink-bundle" module:"nokia-conf"`
	Name                 *string                                                                                                `path:"name" module:"nokia-conf"`
	OamPm                *NokiaConf_Configure_Groups_Group_OamPm                                                                `path:"oam-pm" module:"nokia-conf" yangPresence:"true"`
	Openflow             *NokiaConf_Configure_Groups_Group_Openflow                                                             `path:"openflow" module:"nokia-conf" yangPresence:"true"`
	PolicyOptions        *NokiaConf_Configure_Groups_Group_PolicyOptions                                                        `path:"policy-options" module:"nokia-conf" yangPresence:"true"`
	Port                 map[string]*NokiaConf_Configure_Groups_Group_Port                                                      `path:"port" module:"nokia-conf"`
	PortPolicy           map[string]*NokiaConf_Configure_Groups_Group_PortPolicy                                                `path:"port-policy" module:"nokia-conf"`
	PortXc               *NokiaConf_Configure_Groups_Group_PortXc                                                               `path:"port-xc" module:"nokia-conf" yangPresence:"true"`
	PwPort               map[NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union]*NokiaConf_Configure_Groups_Group_PwPort    `path:"pw-port" module:"nokia-conf"`
	Python               *NokiaConf_Configure_Groups_Group_Python                                                               `path:"python" module:"nokia-conf" yangPresence:"true"`
	Qos                  *NokiaConf_Configure_Groups_Group_Qos                                                                  `path:"qos" module:"nokia-conf" yangPresence:"true"`
	Redundancy           *NokiaConf_Configure_Groups_Group_Redundancy                                                           `path:"redundancy" module:"nokia-conf" yangPresence:"true"`
	Router               map[string]*NokiaConf_Configure_Groups_Group_Router                                                    `path:"router" module:"nokia-conf"`
	RoutingOptions       *NokiaConf_Configure_Groups_Group_RoutingOptions                                                       `path:"routing-options" module:"nokia-conf" yangPresence:"true"`
	Saa                  *NokiaConf_Configure_Groups_Group_Saa                                                                  `path:"saa" module:"nokia-conf" yangPresence:"true"`
	Satellite            *NokiaConf_Configure_Groups_Group_Satellite                                                            `path:"satellite" module:"nokia-conf" yangPresence:"true"`
	Service              *NokiaConf_Configure_Groups_Group_Service                                                              `path:"service" module:"nokia-conf" yangPresence:"true"`
	Sfm                  map[NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union]*NokiaConf_Configure_Groups_Group_Sfm           `path:"sfm" module:"nokia-conf"`
	SubscriberMgmt       *NokiaConf_Configure_Groups_Group_SubscriberMgmt                                                       `path:"subscriber-mgmt" module:"nokia-conf" yangPresence:"true"`
	System               *NokiaConf_Configure_Groups_Group_System                                                               `path:"system" module:"nokia-conf" yangPresence:"true"`
	TestOam              *NokiaConf_Configure_Groups_Group_TestOam                                                              `path:"test-oam" module:"nokia-conf" yangPresence:"true"`
	Vrrp                 *NokiaConf_Configure_Groups_Group_Vrrp                                                                 `path:"vrrp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Chassis_Key represents the key for list Chassis of element /nokia-conf/configure/groups/group.
type NokiaConf_Configure_Groups_Group_Chassis_Key struct {
	ChassisClass  NokiaConf_Configure_Groups_Group_Chassis_ChassisClass_Union  `path:"chassis-class"`
	ChassisNumber NokiaConf_Configure_Groups_Group_Chassis_ChassisNumber_Union `path:"chassis-number"`
}

// NewAps creates a new entry in the Aps list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewAps(GroupId NokiaConf_Configure_Groups_Group_Aps_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Aps, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aps == nil {
		t.Aps = make(map[NokiaConf_Configure_Groups_Group_Aps_GroupId_Union]*NokiaConf_Configure_Groups_Group_Aps)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aps[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aps", key)
	}

	t.Aps[key] = &NokiaConf_Configure_Groups_Group_Aps{
		GroupId: GroupId,
	}

	return t.Aps[key], nil
}

// RenameAps renames an entry in the list Aps within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameAps(oldK, newK NokiaConf_Configure_Groups_Group_Aps_GroupId_Union) error {
	if _, ok := t.Aps[newK]; ok {
		return fmt.Errorf("key %v already exists in Aps", newK)
	}

	e, ok := t.Aps[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aps", oldK)
	}
	e.GroupId = newK

	t.Aps[newK] = e
	delete(t.Aps, oldK)
	return nil
}

// GetOrCreateAps retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateAps(GroupId NokiaConf_Configure_Groups_Group_Aps_GroupId_Union) *NokiaConf_Configure_Groups_Group_Aps {

	key := GroupId

	if v, ok := t.Aps[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAps(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAps got unexpected error: %v", err))
	}
	return v
}

// GetAps retrieves the value with the specified key from
// the Aps map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetAps(GroupId NokiaConf_Configure_Groups_Group_Aps_GroupId_Union) *NokiaConf_Configure_Groups_Group_Aps {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Aps[key]; ok {
		return lm
	}
	return nil
}

// DeleteAps deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteAps(GroupId NokiaConf_Configure_Groups_Group_Aps_GroupId_Union) {
	key := GroupId

	delete(t.Aps, key)
}

// AppendAps appends the supplied NokiaConf_Configure_Groups_Group_Aps struct to the
// list Aps of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aps already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendAps(v *NokiaConf_Configure_Groups_Group_Aps) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aps == nil {
		t.Aps = make(map[NokiaConf_Configure_Groups_Group_Aps_GroupId_Union]*NokiaConf_Configure_Groups_Group_Aps)
	}

	if _, ok := t.Aps[key]; ok {
		return fmt.Errorf("duplicate key for list Aps %v", key)
	}

	t.Aps[key] = v
	return nil
}

// NewCard creates a new entry in the Card list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewCard(SlotNumber NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union) (*NokiaConf_Configure_Groups_Group_Card, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Card == nil {
		t.Card = make(map[NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union]*NokiaConf_Configure_Groups_Group_Card)
	}

	key := SlotNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Card[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Card", key)
	}

	t.Card[key] = &NokiaConf_Configure_Groups_Group_Card{
		SlotNumber: SlotNumber,
	}

	return t.Card[key], nil
}

// RenameCard renames an entry in the list Card within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameCard(oldK, newK NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union) error {
	if _, ok := t.Card[newK]; ok {
		return fmt.Errorf("key %v already exists in Card", newK)
	}

	e, ok := t.Card[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Card", oldK)
	}
	e.SlotNumber = newK

	t.Card[newK] = e
	delete(t.Card, oldK)
	return nil
}

// GetOrCreateCard retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateCard(SlotNumber NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union) *NokiaConf_Configure_Groups_Group_Card {

	key := SlotNumber

	if v, ok := t.Card[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCard(SlotNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCard got unexpected error: %v", err))
	}
	return v
}

// GetCard retrieves the value with the specified key from
// the Card map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetCard(SlotNumber NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union) *NokiaConf_Configure_Groups_Group_Card {

	if t == nil {
		return nil
	}

	key := SlotNumber

	if lm, ok := t.Card[key]; ok {
		return lm
	}
	return nil
}

// DeleteCard deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteCard(SlotNumber NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union) {
	key := SlotNumber

	delete(t.Card, key)
}

// AppendCard appends the supplied NokiaConf_Configure_Groups_Group_Card struct to the
// list Card of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendCard(v *NokiaConf_Configure_Groups_Group_Card) error {
	key := v.SlotNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Card == nil {
		t.Card = make(map[NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union]*NokiaConf_Configure_Groups_Group_Card)
	}

	if _, ok := t.Card[key]; ok {
		return fmt.Errorf("duplicate key for list Card %v", key)
	}

	t.Card[key] = v
	return nil
}

// NewChassis creates a new entry in the Chassis list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewChassis(ChassisClass NokiaConf_Configure_Groups_Group_Chassis_ChassisClass_Union, ChassisNumber NokiaConf_Configure_Groups_Group_Chassis_ChassisNumber_Union) (*NokiaConf_Configure_Groups_Group_Chassis, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Chassis == nil {
		t.Chassis = make(map[NokiaConf_Configure_Groups_Group_Chassis_Key]*NokiaConf_Configure_Groups_Group_Chassis)
	}

	key := NokiaConf_Configure_Groups_Group_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Chassis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Chassis", key)
	}

	t.Chassis[key] = &NokiaConf_Configure_Groups_Group_Chassis{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	return t.Chassis[key], nil
}

// RenameChassis renames an entry in the list Chassis within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameChassis(oldK, newK NokiaConf_Configure_Groups_Group_Chassis_Key) error {
	if _, ok := t.Chassis[newK]; ok {
		return fmt.Errorf("key %v already exists in Chassis", newK)
	}

	e, ok := t.Chassis[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Chassis", oldK)
	}
	e.ChassisClass = newK.ChassisClass
	e.ChassisNumber = newK.ChassisNumber

	t.Chassis[newK] = e
	delete(t.Chassis, oldK)
	return nil
}

// GetOrCreateChassis retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateChassis(ChassisClass NokiaConf_Configure_Groups_Group_Chassis_ChassisClass_Union, ChassisNumber NokiaConf_Configure_Groups_Group_Chassis_ChassisNumber_Union) *NokiaConf_Configure_Groups_Group_Chassis {

	key := NokiaConf_Configure_Groups_Group_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	if v, ok := t.Chassis[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChassis(ChassisClass, ChassisNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChassis got unexpected error: %v", err))
	}
	return v
}

// GetChassis retrieves the value with the specified key from
// the Chassis map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetChassis(ChassisClass NokiaConf_Configure_Groups_Group_Chassis_ChassisClass_Union, ChassisNumber NokiaConf_Configure_Groups_Group_Chassis_ChassisNumber_Union) *NokiaConf_Configure_Groups_Group_Chassis {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	if lm, ok := t.Chassis[key]; ok {
		return lm
	}
	return nil
}

// DeleteChassis deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteChassis(ChassisClass NokiaConf_Configure_Groups_Group_Chassis_ChassisClass_Union, ChassisNumber NokiaConf_Configure_Groups_Group_Chassis_ChassisNumber_Union) {
	key := NokiaConf_Configure_Groups_Group_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	delete(t.Chassis, key)
}

// AppendChassis appends the supplied NokiaConf_Configure_Groups_Group_Chassis struct to the
// list Chassis of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Chassis already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendChassis(v *NokiaConf_Configure_Groups_Group_Chassis) error {
	key := NokiaConf_Configure_Groups_Group_Chassis_Key{
		ChassisClass:  v.ChassisClass,
		ChassisNumber: v.ChassisNumber,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Chassis == nil {
		t.Chassis = make(map[NokiaConf_Configure_Groups_Group_Chassis_Key]*NokiaConf_Configure_Groups_Group_Chassis)
	}

	if _, ok := t.Chassis[key]; ok {
		return fmt.Errorf("duplicate key for list Chassis %v", key)
	}

	t.Chassis[key] = v
	return nil
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewEsa(EsaId NokiaConf_Configure_Groups_Group_Esa_EsaId_Union) (*NokiaConf_Configure_Groups_Group_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Groups_Group_Esa_EsaId_Union]*NokiaConf_Configure_Groups_Group_Esa)
	}

	key := EsaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Groups_Group_Esa{
		EsaId: EsaId,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameEsa(oldK, newK NokiaConf_Configure_Groups_Group_Esa_EsaId_Union) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = newK

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateEsa(EsaId NokiaConf_Configure_Groups_Group_Esa_EsaId_Union) *NokiaConf_Configure_Groups_Group_Esa {

	key := EsaId

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetEsa(EsaId NokiaConf_Configure_Groups_Group_Esa_EsaId_Union) *NokiaConf_Configure_Groups_Group_Esa {

	if t == nil {
		return nil
	}

	key := EsaId

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteEsa(EsaId NokiaConf_Configure_Groups_Group_Esa_EsaId_Union) {
	key := EsaId

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Groups_Group_Esa struct to the
// list Esa of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendEsa(v *NokiaConf_Configure_Groups_Group_Esa) error {
	key := v.EsaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Groups_Group_Esa_EsaId_Union]*NokiaConf_Configure_Groups_Group_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewEthRing creates a new entry in the EthRing list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewEthRing(RingIndex NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union) (*NokiaConf_Configure_Groups_Group_EthRing, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthRing == nil {
		t.EthRing = make(map[NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union]*NokiaConf_Configure_Groups_Group_EthRing)
	}

	key := RingIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthRing[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthRing", key)
	}

	t.EthRing[key] = &NokiaConf_Configure_Groups_Group_EthRing{
		RingIndex: RingIndex,
	}

	return t.EthRing[key], nil
}

// RenameEthRing renames an entry in the list EthRing within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameEthRing(oldK, newK NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union) error {
	if _, ok := t.EthRing[newK]; ok {
		return fmt.Errorf("key %v already exists in EthRing", newK)
	}

	e, ok := t.EthRing[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthRing", oldK)
	}
	e.RingIndex = newK

	t.EthRing[newK] = e
	delete(t.EthRing, oldK)
	return nil
}

// GetOrCreateEthRing retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateEthRing(RingIndex NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union) *NokiaConf_Configure_Groups_Group_EthRing {

	key := RingIndex

	if v, ok := t.EthRing[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthRing(RingIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthRing got unexpected error: %v", err))
	}
	return v
}

// GetEthRing retrieves the value with the specified key from
// the EthRing map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetEthRing(RingIndex NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union) *NokiaConf_Configure_Groups_Group_EthRing {

	if t == nil {
		return nil
	}

	key := RingIndex

	if lm, ok := t.EthRing[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthRing deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteEthRing(RingIndex NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union) {
	key := RingIndex

	delete(t.EthRing, key)
}

// AppendEthRing appends the supplied NokiaConf_Configure_Groups_Group_EthRing struct to the
// list EthRing of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthRing already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendEthRing(v *NokiaConf_Configure_Groups_Group_EthRing) error {
	key := v.RingIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthRing == nil {
		t.EthRing = make(map[NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union]*NokiaConf_Configure_Groups_Group_EthRing)
	}

	if _, ok := t.EthRing[key]; ok {
		return fmt.Errorf("duplicate key for list EthRing %v", key)
	}

	t.EthRing[key] = v
	return nil
}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewLag(LagName string) (*NokiaConf_Configure_Groups_Group_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Groups_Group_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateLag(LagName string) *NokiaConf_Configure_Groups_Group_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetLag(LagName string) *NokiaConf_Configure_Groups_Group_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Groups_Group_Lag struct to the
// list Lag of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendLag(v *NokiaConf_Configure_Groups_Group_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// NewMultilinkBundle creates a new entry in the MultilinkBundle list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewMultilinkBundle(BundleId string) (*NokiaConf_Configure_Groups_Group_MultilinkBundle, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultilinkBundle == nil {
		t.MultilinkBundle = make(map[string]*NokiaConf_Configure_Groups_Group_MultilinkBundle)
	}

	key := BundleId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultilinkBundle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultilinkBundle", key)
	}

	t.MultilinkBundle[key] = &NokiaConf_Configure_Groups_Group_MultilinkBundle{
		BundleId: &BundleId,
	}

	return t.MultilinkBundle[key], nil
}

// RenameMultilinkBundle renames an entry in the list MultilinkBundle within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameMultilinkBundle(oldK, newK string) error {
	if _, ok := t.MultilinkBundle[newK]; ok {
		return fmt.Errorf("key %v already exists in MultilinkBundle", newK)
	}

	e, ok := t.MultilinkBundle[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultilinkBundle", oldK)
	}
	e.BundleId = &newK

	t.MultilinkBundle[newK] = e
	delete(t.MultilinkBundle, oldK)
	return nil
}

// GetOrCreateMultilinkBundle retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateMultilinkBundle(BundleId string) *NokiaConf_Configure_Groups_Group_MultilinkBundle {

	key := BundleId

	if v, ok := t.MultilinkBundle[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultilinkBundle(BundleId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultilinkBundle got unexpected error: %v", err))
	}
	return v
}

// GetMultilinkBundle retrieves the value with the specified key from
// the MultilinkBundle map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetMultilinkBundle(BundleId string) *NokiaConf_Configure_Groups_Group_MultilinkBundle {

	if t == nil {
		return nil
	}

	key := BundleId

	if lm, ok := t.MultilinkBundle[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultilinkBundle deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteMultilinkBundle(BundleId string) {
	key := BundleId

	delete(t.MultilinkBundle, key)
}

// AppendMultilinkBundle appends the supplied NokiaConf_Configure_Groups_Group_MultilinkBundle struct to the
// list MultilinkBundle of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_MultilinkBundle already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendMultilinkBundle(v *NokiaConf_Configure_Groups_Group_MultilinkBundle) error {
	if v.BundleId == nil {
		return fmt.Errorf("invalid nil key received for BundleId")
	}

	key := *v.BundleId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultilinkBundle == nil {
		t.MultilinkBundle = make(map[string]*NokiaConf_Configure_Groups_Group_MultilinkBundle)
	}

	if _, ok := t.MultilinkBundle[key]; ok {
		return fmt.Errorf("duplicate key for list MultilinkBundle %v", key)
	}

	t.MultilinkBundle[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewPort(PortId string) (*NokiaConf_Configure_Groups_Group_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreatePort(PortId string) *NokiaConf_Configure_Groups_Group_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetPort(PortId string) *NokiaConf_Configure_Groups_Group_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendPort(v *NokiaConf_Configure_Groups_Group_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewPortPolicy creates a new entry in the PortPolicy list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewPortPolicy(Name string) (*NokiaConf_Configure_Groups_Group_PortPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortPolicy == nil {
		t.PortPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_PortPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortPolicy", key)
	}

	t.PortPolicy[key] = &NokiaConf_Configure_Groups_Group_PortPolicy{
		Name: &Name,
	}

	return t.PortPolicy[key], nil
}

// RenamePortPolicy renames an entry in the list PortPolicy within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenamePortPolicy(oldK, newK string) error {
	if _, ok := t.PortPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PortPolicy", newK)
	}

	e, ok := t.PortPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortPolicy", oldK)
	}
	e.Name = &newK

	t.PortPolicy[newK] = e
	delete(t.PortPolicy, oldK)
	return nil
}

// GetOrCreatePortPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreatePortPolicy(Name string) *NokiaConf_Configure_Groups_Group_PortPolicy {

	key := Name

	if v, ok := t.PortPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPortPolicy retrieves the value with the specified key from
// the PortPolicy map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetPortPolicy(Name string) *NokiaConf_Configure_Groups_Group_PortPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PortPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePortPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeletePortPolicy(Name string) {
	key := Name

	delete(t.PortPolicy, key)
}

// AppendPortPolicy appends the supplied NokiaConf_Configure_Groups_Group_PortPolicy struct to the
// list PortPolicy of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PortPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendPortPolicy(v *NokiaConf_Configure_Groups_Group_PortPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortPolicy == nil {
		t.PortPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_PortPolicy)
	}

	if _, ok := t.PortPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PortPolicy %v", key)
	}

	t.PortPolicy[key] = v
	return nil
}

// NewPwPort creates a new entry in the PwPort list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewPwPort(PwPortId NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union) (*NokiaConf_Configure_Groups_Group_PwPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union]*NokiaConf_Configure_Groups_Group_PwPort)
	}

	key := PwPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwPort", key)
	}

	t.PwPort[key] = &NokiaConf_Configure_Groups_Group_PwPort{
		PwPortId: PwPortId,
	}

	return t.PwPort[key], nil
}

// RenamePwPort renames an entry in the list PwPort within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenamePwPort(oldK, newK NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union) error {
	if _, ok := t.PwPort[newK]; ok {
		return fmt.Errorf("key %v already exists in PwPort", newK)
	}

	e, ok := t.PwPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwPort", oldK)
	}
	e.PwPortId = newK

	t.PwPort[newK] = e
	delete(t.PwPort, oldK)
	return nil
}

// GetOrCreatePwPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreatePwPort(PwPortId NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union) *NokiaConf_Configure_Groups_Group_PwPort {

	key := PwPortId

	if v, ok := t.PwPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwPort(PwPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwPort got unexpected error: %v", err))
	}
	return v
}

// GetPwPort retrieves the value with the specified key from
// the PwPort map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetPwPort(PwPortId NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union) *NokiaConf_Configure_Groups_Group_PwPort {

	if t == nil {
		return nil
	}

	key := PwPortId

	if lm, ok := t.PwPort[key]; ok {
		return lm
	}
	return nil
}

// DeletePwPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeletePwPort(PwPortId NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union) {
	key := PwPortId

	delete(t.PwPort, key)
}

// AppendPwPort appends the supplied NokiaConf_Configure_Groups_Group_PwPort struct to the
// list PwPort of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_PwPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendPwPort(v *NokiaConf_Configure_Groups_Group_PwPort) error {
	key := v.PwPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[NokiaConf_Configure_Groups_Group_PwPort_PwPortId_Union]*NokiaConf_Configure_Groups_Group_PwPort)
	}

	if _, ok := t.PwPort[key]; ok {
		return fmt.Errorf("duplicate key for list PwPort %v", key)
	}

	t.PwPort[key] = v
	return nil
}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewRouter(RouterName string) (*NokiaConf_Configure_Groups_Group_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Groups_Group_Router)
	}

	key := RouterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_Groups_Group_Router{
		RouterName: &RouterName,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameRouter(oldK, newK string) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterName = &newK

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateRouter(RouterName string) *NokiaConf_Configure_Groups_Group_Router {

	key := RouterName

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetRouter(RouterName string) *NokiaConf_Configure_Groups_Group_Router {

	if t == nil {
		return nil
	}

	key := RouterName

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteRouter(RouterName string) {
	key := RouterName

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_Groups_Group_Router struct to the
// list Router of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendRouter(v *NokiaConf_Configure_Groups_Group_Router) error {
	if v.RouterName == nil {
		return fmt.Errorf("invalid nil key received for RouterName")
	}

	key := *v.RouterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Groups_Group_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// NewSfm creates a new entry in the Sfm list of the
// NokiaConf_Configure_Groups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group) NewSfm(SfmSlot NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union) (*NokiaConf_Configure_Groups_Group_Sfm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sfm == nil {
		t.Sfm = make(map[NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union]*NokiaConf_Configure_Groups_Group_Sfm)
	}

	key := SfmSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sfm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sfm", key)
	}

	t.Sfm[key] = &NokiaConf_Configure_Groups_Group_Sfm{
		SfmSlot: SfmSlot,
	}

	return t.Sfm[key], nil
}

// RenameSfm renames an entry in the list Sfm within
// the NokiaConf_Configure_Groups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group) RenameSfm(oldK, newK NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union) error {
	if _, ok := t.Sfm[newK]; ok {
		return fmt.Errorf("key %v already exists in Sfm", newK)
	}

	e, ok := t.Sfm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sfm", oldK)
	}
	e.SfmSlot = newK

	t.Sfm[newK] = e
	delete(t.Sfm, oldK)
	return nil
}

// GetOrCreateSfm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateSfm(SfmSlot NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union) *NokiaConf_Configure_Groups_Group_Sfm {

	key := SfmSlot

	if v, ok := t.Sfm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSfm(SfmSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSfm got unexpected error: %v", err))
	}
	return v
}

// GetSfm retrieves the value with the specified key from
// the Sfm map field of NokiaConf_Configure_Groups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetSfm(SfmSlot NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union) *NokiaConf_Configure_Groups_Group_Sfm {

	if t == nil {
		return nil
	}

	key := SfmSlot

	if lm, ok := t.Sfm[key]; ok {
		return lm
	}
	return nil
}

// DeleteSfm deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group) DeleteSfm(SfmSlot NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union) {
	key := SfmSlot

	delete(t.Sfm, key)
}

// AppendSfm appends the supplied NokiaConf_Configure_Groups_Group_Sfm struct to the
// list Sfm of NokiaConf_Configure_Groups_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Sfm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group) AppendSfm(v *NokiaConf_Configure_Groups_Group_Sfm) error {
	key := v.SfmSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sfm == nil {
		t.Sfm = make(map[NokiaConf_Configure_Groups_Group_Sfm_SfmSlot_Union]*NokiaConf_Configure_Groups_Group_Sfm)
	}

	if _, ok := t.Sfm[key]; ok {
		return fmt.Errorf("duplicate key for list Sfm %v", key)
	}

	t.Sfm[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateAaa() *NokiaConf_Configure_Groups_Group_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &NokiaConf_Configure_Groups_Group_Aaa{}
	return t.Aaa
}

// GetOrCreateApplicationAssurance retrieves the value of the ApplicationAssurance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateApplicationAssurance() *NokiaConf_Configure_Groups_Group_ApplicationAssurance {
	if t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	t.ApplicationAssurance = &NokiaConf_Configure_Groups_Group_ApplicationAssurance{}
	return t.ApplicationAssurance
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Bfd{}
	return t.Bfd
}

// GetOrCreateBmp retrieves the value of the Bmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateBmp() *NokiaConf_Configure_Groups_Group_Bmp {
	if t.Bmp != nil {
		return t.Bmp
	}
	t.Bmp = &NokiaConf_Configure_Groups_Group_Bmp{}
	return t.Bmp
}

// GetOrCreateCallTrace retrieves the value of the CallTrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateCallTrace() *NokiaConf_Configure_Groups_Group_CallTrace {
	if t.CallTrace != nil {
		return t.CallTrace
	}
	t.CallTrace = &NokiaConf_Configure_Groups_Group_CallTrace{}
	return t.CallTrace
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateCflowd() *NokiaConf_Configure_Groups_Group_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_Groups_Group_Cflowd{}
	return t.Cflowd
}

// GetOrCreateConnectionProfile retrieves the value of the ConnectionProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateConnectionProfile() *NokiaConf_Configure_Groups_Group_ConnectionProfile {
	if t.ConnectionProfile != nil {
		return t.ConnectionProfile
	}
	t.ConnectionProfile = &NokiaConf_Configure_Groups_Group_ConnectionProfile{}
	return t.ConnectionProfile
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Filter{}
	return t.Filter
}

// GetOrCreateFwdPathExt retrieves the value of the FwdPathExt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateFwdPathExt() *NokiaConf_Configure_Groups_Group_FwdPathExt {
	if t.FwdPathExt != nil {
		return t.FwdPathExt
	}
	t.FwdPathExt = &NokiaConf_Configure_Groups_Group_FwdPathExt{}
	return t.FwdPathExt
}

// GetOrCreateGroupEncryption retrieves the value of the GroupEncryption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateGroupEncryption() *NokiaConf_Configure_Groups_Group_GroupEncryption {
	if t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	t.GroupEncryption = &NokiaConf_Configure_Groups_Group_GroupEncryption{}
	return t.GroupEncryption
}

// GetOrCreateIpsec retrieves the value of the Ipsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateIpsec() *NokiaConf_Configure_Groups_Group_Ipsec {
	if t.Ipsec != nil {
		return t.Ipsec
	}
	t.Ipsec = &NokiaConf_Configure_Groups_Group_Ipsec{}
	return t.Ipsec
}

// GetOrCreateIsa retrieves the value of the Isa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateIsa() *NokiaConf_Configure_Groups_Group_Isa {
	if t.Isa != nil {
		return t.Isa
	}
	t.Isa = &NokiaConf_Configure_Groups_Group_Isa{}
	return t.Isa
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateLog() *NokiaConf_Configure_Groups_Group_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Groups_Group_Log{}
	return t.Log
}

// GetOrCreateMacsec retrieves the value of the Macsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateMacsec() *NokiaConf_Configure_Groups_Group_Macsec {
	if t.Macsec != nil {
		return t.Macsec
	}
	t.Macsec = &NokiaConf_Configure_Groups_Group_Macsec{}
	return t.Macsec
}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Mcac{}
	return t.Mcac
}

// GetOrCreateMirror retrieves the value of the Mirror field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateMirror() *NokiaConf_Configure_Groups_Group_Mirror {
	if t.Mirror != nil {
		return t.Mirror
	}
	t.Mirror = &NokiaConf_Configure_Groups_Group_Mirror{}
	return t.Mirror
}

// GetOrCreateMulticastManagement retrieves the value of the MulticastManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateMulticastManagement() *NokiaConf_Configure_Groups_Group_MulticastManagement {
	if t.MulticastManagement != nil {
		return t.MulticastManagement
	}
	t.MulticastManagement = &NokiaConf_Configure_Groups_Group_MulticastManagement{}
	return t.MulticastManagement
}

// GetOrCreateOamPm retrieves the value of the OamPm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateOamPm() *NokiaConf_Configure_Groups_Group_OamPm {
	if t.OamPm != nil {
		return t.OamPm
	}
	t.OamPm = &NokiaConf_Configure_Groups_Group_OamPm{}
	return t.OamPm
}

// GetOrCreateOpenflow retrieves the value of the Openflow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateOpenflow() *NokiaConf_Configure_Groups_Group_Openflow {
	if t.Openflow != nil {
		return t.Openflow
	}
	t.Openflow = &NokiaConf_Configure_Groups_Group_Openflow{}
	return t.Openflow
}

// GetOrCreatePolicyOptions retrieves the value of the PolicyOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreatePolicyOptions() *NokiaConf_Configure_Groups_Group_PolicyOptions {
	if t.PolicyOptions != nil {
		return t.PolicyOptions
	}
	t.PolicyOptions = &NokiaConf_Configure_Groups_Group_PolicyOptions{}
	return t.PolicyOptions
}

// GetOrCreatePortXc retrieves the value of the PortXc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreatePortXc() *NokiaConf_Configure_Groups_Group_PortXc {
	if t.PortXc != nil {
		return t.PortXc
	}
	t.PortXc = &NokiaConf_Configure_Groups_Group_PortXc{}
	return t.PortXc
}

// GetOrCreatePython retrieves the value of the Python field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreatePython() *NokiaConf_Configure_Groups_Group_Python {
	if t.Python != nil {
		return t.Python
	}
	t.Python = &NokiaConf_Configure_Groups_Group_Python{}
	return t.Python
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Qos{}
	return t.Qos
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateRedundancy() *NokiaConf_Configure_Groups_Group_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Groups_Group_Redundancy{}
	return t.Redundancy
}

// GetOrCreateRoutingOptions retrieves the value of the RoutingOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateRoutingOptions() *NokiaConf_Configure_Groups_Group_RoutingOptions {
	if t.RoutingOptions != nil {
		return t.RoutingOptions
	}
	t.RoutingOptions = &NokiaConf_Configure_Groups_Group_RoutingOptions{}
	return t.RoutingOptions
}

// GetOrCreateSaa retrieves the value of the Saa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateSaa() *NokiaConf_Configure_Groups_Group_Saa {
	if t.Saa != nil {
		return t.Saa
	}
	t.Saa = &NokiaConf_Configure_Groups_Group_Saa{}
	return t.Saa
}

// GetOrCreateSatellite retrieves the value of the Satellite field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateSatellite() *NokiaConf_Configure_Groups_Group_Satellite {
	if t.Satellite != nil {
		return t.Satellite
	}
	t.Satellite = &NokiaConf_Configure_Groups_Group_Satellite{}
	return t.Satellite
}

// GetOrCreateService retrieves the value of the Service field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateService() *NokiaConf_Configure_Groups_Group_Service {
	if t.Service != nil {
		return t.Service
	}
	t.Service = &NokiaConf_Configure_Groups_Group_Service{}
	return t.Service
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Groups_Group_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Groups_Group_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateSystem() *NokiaConf_Configure_Groups_Group_System {
	if t.System != nil {
		return t.System
	}
	t.System = &NokiaConf_Configure_Groups_Group_System{}
	return t.System
}

// GetOrCreateTestOam retrieves the value of the TestOam field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateTestOam() *NokiaConf_Configure_Groups_Group_TestOam {
	if t.TestOam != nil {
		return t.TestOam
	}
	t.TestOam = &NokiaConf_Configure_Groups_Group_TestOam{}
	return t.TestOam
}

// GetOrCreateVrrp retrieves the value of the Vrrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group) GetOrCreateVrrp() *NokiaConf_Configure_Groups_Group_Vrrp {
	if t.Vrrp != nil {
		return t.Vrrp
	}
	t.Vrrp = &NokiaConf_Configure_Groups_Group_Vrrp{}
	return t.Vrrp
}

// GetAaa returns the value of the Aaa struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetAaa() *NokiaConf_Configure_Groups_Group_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetApplicationAssurance returns the value of the ApplicationAssurance struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field ApplicationAssurance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetApplicationAssurance() *NokiaConf_Configure_Groups_Group_ApplicationAssurance {
	if t != nil && t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetBfd() *NokiaConf_Configure_Groups_Group_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBmp returns the value of the Bmp struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Bmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetBmp() *NokiaConf_Configure_Groups_Group_Bmp {
	if t != nil && t.Bmp != nil {
		return t.Bmp
	}
	return nil
}

// GetCallTrace returns the value of the CallTrace struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field CallTrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetCallTrace() *NokiaConf_Configure_Groups_Group_CallTrace {
	if t != nil && t.CallTrace != nil {
		return t.CallTrace
	}
	return nil
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetCflowd() *NokiaConf_Configure_Groups_Group_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetConnectionProfile returns the value of the ConnectionProfile struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field ConnectionProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetConnectionProfile() *NokiaConf_Configure_Groups_Group_ConnectionProfile {
	if t != nil && t.ConnectionProfile != nil {
		return t.ConnectionProfile
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetEthCfm() *NokiaConf_Configure_Groups_Group_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetFilter() *NokiaConf_Configure_Groups_Group_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetFwdPathExt returns the value of the FwdPathExt struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field FwdPathExt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetFwdPathExt() *NokiaConf_Configure_Groups_Group_FwdPathExt {
	if t != nil && t.FwdPathExt != nil {
		return t.FwdPathExt
	}
	return nil
}

// GetGroupEncryption returns the value of the GroupEncryption struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field GroupEncryption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetGroupEncryption() *NokiaConf_Configure_Groups_Group_GroupEncryption {
	if t != nil && t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	return nil
}

// GetIpsec returns the value of the Ipsec struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Ipsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetIpsec() *NokiaConf_Configure_Groups_Group_Ipsec {
	if t != nil && t.Ipsec != nil {
		return t.Ipsec
	}
	return nil
}

// GetIsa returns the value of the Isa struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Isa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetIsa() *NokiaConf_Configure_Groups_Group_Isa {
	if t != nil && t.Isa != nil {
		return t.Isa
	}
	return nil
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetLog() *NokiaConf_Configure_Groups_Group_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetMacsec returns the value of the Macsec struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Macsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetMacsec() *NokiaConf_Configure_Groups_Group_Macsec {
	if t != nil && t.Macsec != nil {
		return t.Macsec
	}
	return nil
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetMcac() *NokiaConf_Configure_Groups_Group_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetMirror returns the value of the Mirror struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Mirror is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetMirror() *NokiaConf_Configure_Groups_Group_Mirror {
	if t != nil && t.Mirror != nil {
		return t.Mirror
	}
	return nil
}

// GetMulticastManagement returns the value of the MulticastManagement struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field MulticastManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetMulticastManagement() *NokiaConf_Configure_Groups_Group_MulticastManagement {
	if t != nil && t.MulticastManagement != nil {
		return t.MulticastManagement
	}
	return nil
}

// GetOamPm returns the value of the OamPm struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field OamPm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetOamPm() *NokiaConf_Configure_Groups_Group_OamPm {
	if t != nil && t.OamPm != nil {
		return t.OamPm
	}
	return nil
}

// GetOpenflow returns the value of the Openflow struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Openflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetOpenflow() *NokiaConf_Configure_Groups_Group_Openflow {
	if t != nil && t.Openflow != nil {
		return t.Openflow
	}
	return nil
}

// GetPolicyOptions returns the value of the PolicyOptions struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field PolicyOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetPolicyOptions() *NokiaConf_Configure_Groups_Group_PolicyOptions {
	if t != nil && t.PolicyOptions != nil {
		return t.PolicyOptions
	}
	return nil
}

// GetPortXc returns the value of the PortXc struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field PortXc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetPortXc() *NokiaConf_Configure_Groups_Group_PortXc {
	if t != nil && t.PortXc != nil {
		return t.PortXc
	}
	return nil
}

// GetPython returns the value of the Python struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Python is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetPython() *NokiaConf_Configure_Groups_Group_Python {
	if t != nil && t.Python != nil {
		return t.Python
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetQos() *NokiaConf_Configure_Groups_Group_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetRedundancy() *NokiaConf_Configure_Groups_Group_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetRoutingOptions returns the value of the RoutingOptions struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field RoutingOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetRoutingOptions() *NokiaConf_Configure_Groups_Group_RoutingOptions {
	if t != nil && t.RoutingOptions != nil {
		return t.RoutingOptions
	}
	return nil
}

// GetSaa returns the value of the Saa struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Saa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetSaa() *NokiaConf_Configure_Groups_Group_Saa {
	if t != nil && t.Saa != nil {
		return t.Saa
	}
	return nil
}

// GetSatellite returns the value of the Satellite struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Satellite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetSatellite() *NokiaConf_Configure_Groups_Group_Satellite {
	if t != nil && t.Satellite != nil {
		return t.Satellite
	}
	return nil
}

// GetService returns the value of the Service struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Service is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetService() *NokiaConf_Configure_Groups_Group_Service {
	if t != nil && t.Service != nil {
		return t.Service
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetSubscriberMgmt() *NokiaConf_Configure_Groups_Group_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetSystem() *NokiaConf_Configure_Groups_Group_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// GetTestOam returns the value of the TestOam struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field TestOam is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetTestOam() *NokiaConf_Configure_Groups_Group_TestOam {
	if t != nil && t.TestOam != nil {
		return t.TestOam
	}
	return nil
}

// GetVrrp returns the value of the Vrrp struct pointer
// from NokiaConf_Configure_Groups_Group. If the receiver or the field Vrrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group) GetVrrp() *NokiaConf_Configure_Groups_Group_Vrrp {
	if t != nil && t.Vrrp != nil {
		return t.Vrrp
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aaa.PopulateDefaults()
	t.ApplicationAssurance.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Bmp.PopulateDefaults()
	t.CallTrace.PopulateDefaults()
	t.Cflowd.PopulateDefaults()
	t.ConnectionProfile.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.FwdPathExt.PopulateDefaults()
	t.GroupEncryption.PopulateDefaults()
	t.Ipsec.PopulateDefaults()
	t.Isa.PopulateDefaults()
	t.Log.PopulateDefaults()
	t.Macsec.PopulateDefaults()
	t.Mcac.PopulateDefaults()
	t.Mirror.PopulateDefaults()
	t.MulticastManagement.PopulateDefaults()
	t.OamPm.PopulateDefaults()
	t.Openflow.PopulateDefaults()
	t.PolicyOptions.PopulateDefaults()
	t.PortXc.PopulateDefaults()
	t.Python.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
	t.RoutingOptions.PopulateDefaults()
	t.Saa.PopulateDefaults()
	t.Satellite.PopulateDefaults()
	t.Service.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	t.System.PopulateDefaults()
	t.TestOam.PopulateDefaults()
	t.Vrrp.PopulateDefaults()
	for _, e := range t.Aps {
		e.PopulateDefaults()
	}
	for _, e := range t.Card {
		e.PopulateDefaults()
	}
	for _, e := range t.Chassis {
		e.PopulateDefaults()
	}
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.EthRing {
		e.PopulateDefaults()
	}
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
	for _, e := range t.MultilinkBundle {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.PortPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PwPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
	for _, e := range t.Sfm {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group.
func (*NokiaConf_Configure_Groups_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa represents the /nokia-conf/configure/groups/group/aaa YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa struct {
	Diameter *NokiaConf_Configure_Groups_Group_Aaa_Diameter `path:"diameter" module:"nokia-conf"`
	Radius   *NokiaConf_Configure_Groups_Group_Aaa_Radius   `path:"radius" module:"nokia-conf"`
	Wpp      *NokiaConf_Configure_Groups_Group_Aaa_Wpp      `path:"wpp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa) IsYANGGoStruct() {}

// GetOrCreateDiameter retrieves the value of the Diameter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa) GetOrCreateDiameter() *NokiaConf_Configure_Groups_Group_Aaa_Diameter {
	if t.Diameter != nil {
		return t.Diameter
	}
	t.Diameter = &NokiaConf_Configure_Groups_Group_Aaa_Diameter{}
	return t.Diameter
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa) GetOrCreateRadius() *NokiaConf_Configure_Groups_Group_Aaa_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Groups_Group_Aaa_Radius{}
	return t.Radius
}

// GetOrCreateWpp retrieves the value of the Wpp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa) GetOrCreateWpp() *NokiaConf_Configure_Groups_Group_Aaa_Wpp {
	if t.Wpp != nil {
		return t.Wpp
	}
	t.Wpp = &NokiaConf_Configure_Groups_Group_Aaa_Wpp{}
	return t.Wpp
}

// GetDiameter returns the value of the Diameter struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa. If the receiver or the field Diameter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa) GetDiameter() *NokiaConf_Configure_Groups_Group_Aaa_Diameter {
	if t != nil && t.Diameter != nil {
		return t.Diameter
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa) GetRadius() *NokiaConf_Configure_Groups_Group_Aaa_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetWpp returns the value of the Wpp struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa. If the receiver or the field Wpp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa) GetWpp() *NokiaConf_Configure_Groups_Group_Aaa_Wpp {
	if t != nil && t.Wpp != nil {
		return t.Wpp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Diameter.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.Wpp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa.
func (*NokiaConf_Configure_Groups_Group_Aaa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter represents the /nokia-conf/configure/groups/group/aaa/diameter YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter struct {
	Node       map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node       `path:"node" module:"nokia-conf"`
	PeerPolicy map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy `path:"peer-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter) IsYANGGoStruct() {}

// NewNode creates a new entry in the Node list of the
// NokiaConf_Configure_Groups_Group_Aaa_Diameter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) NewNode(OriginHost string) (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node)
	}

	key := OriginHost

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Node[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Node", key)
	}

	t.Node[key] = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node{
		OriginHost: &OriginHost,
	}

	return t.Node[key], nil
}

// RenameNode renames an entry in the list Node within
// the NokiaConf_Configure_Groups_Group_Aaa_Diameter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) RenameNode(oldK, newK string) error {
	if _, ok := t.Node[newK]; ok {
		return fmt.Errorf("key %v already exists in Node", newK)
	}

	e, ok := t.Node[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Node", oldK)
	}
	e.OriginHost = &newK

	t.Node[newK] = e
	delete(t.Node, oldK)
	return nil
}

// GetOrCreateNode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) GetOrCreateNode(OriginHost string) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node {

	key := OriginHost

	if v, ok := t.Node[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNode(OriginHost)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNode got unexpected error: %v", err))
	}
	return v
}

// GetNode retrieves the value with the specified key from
// the Node map field of NokiaConf_Configure_Groups_Group_Aaa_Diameter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) GetNode(OriginHost string) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node {

	if t == nil {
		return nil
	}

	key := OriginHost

	if lm, ok := t.Node[key]; ok {
		return lm
	}
	return nil
}

// DeleteNode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) DeleteNode(OriginHost string) {
	key := OriginHost

	delete(t.Node, key)
}

// AppendNode appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node struct to the
// list Node of NokiaConf_Configure_Groups_Group_Aaa_Diameter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) AppendNode(v *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) error {
	if v.OriginHost == nil {
		return fmt.Errorf("invalid nil key received for OriginHost")
	}

	key := *v.OriginHost

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node)
	}

	if _, ok := t.Node[key]; ok {
		return fmt.Errorf("duplicate key for list Node %v", key)
	}

	t.Node[key] = v
	return nil
}

// NewPeerPolicy creates a new entry in the PeerPolicy list of the
// NokiaConf_Configure_Groups_Group_Aaa_Diameter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) NewPeerPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerPolicy == nil {
		t.PeerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PeerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PeerPolicy", key)
	}

	t.PeerPolicy[key] = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy{
		Name: &Name,
	}

	return t.PeerPolicy[key], nil
}

// RenamePeerPolicy renames an entry in the list PeerPolicy within
// the NokiaConf_Configure_Groups_Group_Aaa_Diameter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) RenamePeerPolicy(oldK, newK string) error {
	if _, ok := t.PeerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PeerPolicy", newK)
	}

	e, ok := t.PeerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PeerPolicy", oldK)
	}
	e.Name = &newK

	t.PeerPolicy[newK] = e
	delete(t.PeerPolicy, oldK)
	return nil
}

// GetOrCreatePeerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) GetOrCreatePeerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy {

	key := Name

	if v, ok := t.PeerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPeerPolicy retrieves the value with the specified key from
// the PeerPolicy map field of NokiaConf_Configure_Groups_Group_Aaa_Diameter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) GetPeerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PeerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePeerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) DeletePeerPolicy(Name string) {
	key := Name

	delete(t.PeerPolicy, key)
}

// AppendPeerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy struct to the
// list PeerPolicy of NokiaConf_Configure_Groups_Group_Aaa_Diameter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) AppendPeerPolicy(v *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerPolicy == nil {
		t.PeerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy)
	}

	if _, ok := t.PeerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PeerPolicy %v", key)
	}

	t.PeerPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Node {
		e.PopulateDefaults()
	}
	for _, e := range t.PeerPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node represents the /nokia-conf/configure/groups/group/aaa/diameter/node YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node struct {
	Connection     *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection                                                                   `path:"connection" module:"nokia-conf"`
	Description    *string                                                                                                                          `path:"description" module:"nokia-conf"`
	OriginHost     *string                                                                                                                          `path:"origin-host" module:"nokia-conf"`
	OriginRealm    *string                                                                                                                          `path:"origin-realm" module:"nokia-conf"`
	Peer           map[NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer `path:"peer" module:"nokia-conf"`
	PythonPolicy   *string                                                                                                                          `path:"python-policy" module:"nokia-conf"`
	RouterInstance *string                                                                                                                          `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) NewPeer(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union) (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer{
		Index: Index,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) RenamePeer(oldK, newK NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Index = newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetOrCreatePeer(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer {

	key := Index

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetPeer(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) DeletePeer(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union) {
	key := Index

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) AppendPeer(v *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateConnection retrieves the value of the Connection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetOrCreateConnection() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection {
	if t.Connection != nil {
		return t.Connection
	}
	t.Connection = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection{}
	return t.Connection
}

// GetConnection returns the value of the Connection struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node. If the receiver or the field Connection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetConnection() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection {
	if t != nil && t.Connection != nil {
		return t.Connection
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetOriginHost retrieves the value of the leaf OriginHost from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginHost is set, it can
// safely use t.GetOriginHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetOriginHost() string {
	if t == nil || t.OriginHost == nil {
		return ""
	}
	return *t.OriginHost
}

// GetOriginRealm retrieves the value of the leaf OriginRealm from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginRealm is set, it can
// safely use t.GetOriginRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetOriginRealm() string {
	if t == nil || t.OriginRealm == nil {
		return ""
	}
	return *t.OriginRealm
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	t.Connection.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OriginHost == nil {
		return nil, fmt.Errorf("nil value for key OriginHost")
	}

	return map[string]interface{}{
		"origin-host": *t.OriginHost,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection represents the /nokia-conf/configure/groups/group/aaa/diameter/node/connection YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection struct {
	Ipv4  *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6  *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6 `path:"ipv6" module:"nokia-conf"`
	Timer *uint32                                                             `path:"timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) GetIpv4() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) GetIpv6() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetTimer retrieves the value of the leaf Timer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timer is set, it can
// safely use t.GetTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) GetTimer() uint32 {
	if t == nil || t.Timer == nil {
		return 30
	}
	return *t.Timer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timer == nil {
		var v uint32 = 30
		t.Timer = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4 represents the /nokia-conf/configure/groups/group/aaa/diameter/node/connection/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4 struct {
	AllowConnections *bool   `path:"allow-connections" module:"nokia-conf"`
	LocalAddress     *string `path:"local-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) IsYANGGoStruct() {}

// GetAllowConnections retrieves the value of the leaf AllowConnections from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowConnections is set, it can
// safely use t.GetAllowConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) GetAllowConnections() bool {
	if t == nil || t.AllowConnections == nil {
		return false
	}
	return *t.AllowConnections
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowConnections == nil {
		var v bool = false
		t.AllowConnections = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6 represents the /nokia-conf/configure/groups/group/aaa/diameter/node/connection/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6 struct {
	AllowConnections *bool   `path:"allow-connections" module:"nokia-conf"`
	LocalAddress     *string `path:"local-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) IsYANGGoStruct() {}

// GetAllowConnections retrieves the value of the leaf AllowConnections from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowConnections is set, it can
// safely use t.GetAllowConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) GetAllowConnections() bool {
	if t == nil || t.AllowConnections == nil {
		return false
	}
	return *t.AllowConnections
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowConnections == nil {
		var v bool = false
		t.AllowConnections = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Connection_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer represents the /nokia-conf/configure/groups/group/aaa/diameter/node/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer struct {
	Address         *string                                                                                                                                      `path:"address" module:"nokia-conf"`
	AdminState      E_NokiaTypesSros_AdminState                                                                                                                  `path:"admin-state" module:"nokia-conf"`
	ConnectionTimer *uint32                                                                                                                                      `path:"connection-timer" module:"nokia-conf"`
	DefaultPeer     *bool                                                                                                                                        `path:"default-peer" module:"nokia-conf"`
	DestinationHost *string                                                                                                                                      `path:"destination-host" module:"nokia-conf"`
	Index           NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union                                                                          `path:"index" module:"nokia-conf"`
	Preference      *uint32                                                                                                                                      `path:"preference" module:"nokia-conf"`
	Route           map[NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route `path:"route" module:"nokia-conf"`
	WatchdogTimer   *uint32                                                                                                                                      `path:"watchdog-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) IsYANGGoStruct() {}

// NewRoute creates a new entry in the Route list of the
// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) NewRoute(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union) (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route{
		Index: Index,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) RenameRoute(oldK, newK NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Index = newK

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetOrCreateRoute(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route {

	key := Index

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetRoute(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) DeleteRoute(Index NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union) {
	key := Index

	delete(t.Route, key)
}

// AppendRoute appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route struct to the
// list Route of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) AppendRoute(v *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetConnectionTimer retrieves the value of the leaf ConnectionTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimer is set, it can
// safely use t.GetConnectionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetConnectionTimer() uint32 {
	if t == nil || t.ConnectionTimer == nil {
		return 0
	}
	return *t.ConnectionTimer
}

// GetDefaultPeer retrieves the value of the leaf DefaultPeer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPeer is set, it can
// safely use t.GetDefaultPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetDefaultPeer() bool {
	if t == nil || t.DefaultPeer == nil {
		return false
	}
	return *t.DefaultPeer
}

// GetDestinationHost retrieves the value of the leaf DestinationHost from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationHost is set, it can
// safely use t.GetDestinationHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetDestinationHost() string {
	if t == nil || t.DestinationHost == nil {
		return ""
	}
	return *t.DestinationHost
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetIndex() NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetWatchdogTimer retrieves the value of the leaf WatchdogTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WatchdogTimer is set, it can
// safely use t.GetWatchdogTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WatchdogTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) GetWatchdogTimer() uint32 {
	if t == nil || t.WatchdogTimer == nil {
		return 0
	}
	return *t.WatchdogTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DefaultPeer == nil {
		var v bool = false
		t.DefaultPeer = &v
	}
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route represents the /nokia-conf/configure/groups/group/aaa/diameter/node/peer/route YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route struct {
	Application E_NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Application `path:"application" module:"nokia-conf"`
	Index       NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union   `path:"index" module:"nokia-conf"`
	Preference  *uint32                                                                     `path:"preference" module:"nokia-conf"`
	Realm       *string                                                                     `path:"realm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) IsYANGGoStruct() {}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) GetApplication() E_NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Application {
	if t == nil || t.Application == 0 {
		return 0
	}
	return t.Application
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) GetIndex() NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetRealm retrieves the value of the leaf Realm from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Realm is set, it can
// safely use t.GetRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Realm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) GetRealm() string {
	if t == nil || t.Realm == nil {
		return ""
	}
	return *t.Realm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_Node_Peer_Route) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy represents the /nokia-conf/configure/groups/group/aaa/diameter/peer-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy struct {
	Applications      *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications    `path:"applications" module:"nokia-conf"`
	ConnectionTimer   *uint32                                                                   `path:"connection-timer" module:"nokia-conf"`
	Description       *string                                                                   `path:"description" module:"nokia-conf"`
	Ipv4SourceAddress *string                                                                   `path:"ipv4-source-address" module:"nokia-conf"`
	Ipv6SourceAddress *string                                                                   `path:"ipv6-source-address" module:"nokia-conf"`
	Name              *string                                                                   `path:"name" module:"nokia-conf"`
	OriginHost        *string                                                                   `path:"origin-host" module:"nokia-conf"`
	OriginRealm       *string                                                                   `path:"origin-realm" module:"nokia-conf"`
	Peer              map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer `path:"peer" module:"nokia-conf"`
	Proxy             *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy           `path:"proxy" module:"nokia-conf"`
	PythonPolicy      *string                                                                   `path:"python-policy" module:"nokia-conf"`
	Role              E_NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Role           `path:"role" module:"nokia-conf"`
	RouterInstance    *string                                                                   `path:"router-instance" module:"nokia-conf"`
	TransactionTimer  *uint32                                                                   `path:"transaction-timer" module:"nokia-conf"`
	VendorSupport     E_NokiaTypesDiameter_DiamVendorSupport                                    `path:"vendor-support" module:"nokia-conf"`
	WatchdogTimer     *uint32                                                                   `path:"watchdog-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) NewPeer(PeerName string) (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer)
	}

	key := PeerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer{
		PeerName: &PeerName,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.PeerName = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetOrCreatePeer(PeerName string) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer {

	key := PeerName

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(PeerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetPeer(PeerName string) *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer {

	if t == nil {
		return nil
	}

	key := PeerName

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) DeletePeer(PeerName string) {
	key := PeerName

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) AppendPeer(v *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) error {
	if v.PeerName == nil {
		return fmt.Errorf("invalid nil key received for PeerName")
	}

	key := *v.PeerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateApplications retrieves the value of the Applications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetOrCreateApplications() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications {
	if t.Applications != nil {
		return t.Applications
	}
	t.Applications = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications{}
	return t.Applications
}

// GetOrCreateProxy retrieves the value of the Proxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetOrCreateProxy() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy {
	if t.Proxy != nil {
		return t.Proxy
	}
	t.Proxy = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy{}
	return t.Proxy
}

// GetApplications returns the value of the Applications struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy. If the receiver or the field Applications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetApplications() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications {
	if t != nil && t.Applications != nil {
		return t.Applications
	}
	return nil
}

// GetProxy returns the value of the Proxy struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy. If the receiver or the field Proxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetProxy() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy {
	if t != nil && t.Proxy != nil {
		return t.Proxy
	}
	return nil
}

// GetConnectionTimer retrieves the value of the leaf ConnectionTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimer is set, it can
// safely use t.GetConnectionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetConnectionTimer() uint32 {
	if t == nil || t.ConnectionTimer == nil {
		return 30
	}
	return *t.ConnectionTimer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetIpv4SourceAddress() string {
	if t == nil || t.Ipv4SourceAddress == nil {
		return ""
	}
	return *t.Ipv4SourceAddress
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetIpv6SourceAddress() string {
	if t == nil || t.Ipv6SourceAddress == nil {
		return ""
	}
	return *t.Ipv6SourceAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOriginHost retrieves the value of the leaf OriginHost from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginHost is set, it can
// safely use t.GetOriginHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetOriginHost() string {
	if t == nil || t.OriginHost == nil {
		return ""
	}
	return *t.OriginHost
}

// GetOriginRealm retrieves the value of the leaf OriginRealm from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginRealm is set, it can
// safely use t.GetOriginRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetOriginRealm() string {
	if t == nil || t.OriginRealm == nil {
		return ""
	}
	return *t.OriginRealm
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRole retrieves the value of the leaf Role from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetRole() E_NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Role {
	if t == nil || t.Role == 0 {
		return NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Role_client
	}
	return t.Role
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// GetTransactionTimer retrieves the value of the leaf TransactionTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransactionTimer is set, it can
// safely use t.GetTransactionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransactionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetTransactionTimer() uint32 {
	if t == nil || t.TransactionTimer == nil {
		return 30
	}
	return *t.TransactionTimer
}

// GetVendorSupport retrieves the value of the leaf VendorSupport from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorSupport is set, it can
// safely use t.GetVendorSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetVendorSupport() E_NokiaTypesDiameter_DiamVendorSupport {
	if t == nil || t.VendorSupport == 0 {
		return NokiaTypesDiameter_DiamVendorSupport_three_gpp
	}
	return t.VendorSupport
}

// GetWatchdogTimer retrieves the value of the leaf WatchdogTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WatchdogTimer is set, it can
// safely use t.GetWatchdogTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WatchdogTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) GetWatchdogTimer() uint32 {
	if t == nil || t.WatchdogTimer == nil {
		return 30
	}
	return *t.WatchdogTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectionTimer == nil {
		var v uint32 = 30
		t.ConnectionTimer = &v
	}
	if t.Role == 0 {
		t.Role = NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Role_client
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	if t.TransactionTimer == nil {
		var v uint32 = 30
		t.TransactionTimer = &v
	}
	if t.VendorSupport == 0 {
		t.VendorSupport = NokiaTypesDiameter_DiamVendorSupport_three_gpp
	}
	if t.WatchdogTimer == nil {
		var v uint32 = 30
		t.WatchdogTimer = &v
	}
	t.Applications.PopulateDefaults()
	t.Proxy.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications represents the /nokia-conf/configure/groups/group/aaa/diameter/peer-policy/applications YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications struct {
	Gx     *bool `path:"gx" module:"nokia-conf"`
	Gy     *bool `path:"gy" module:"nokia-conf"`
	Nasreq *bool `path:"nasreq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) IsYANGGoStruct() {}

// GetGx retrieves the value of the leaf Gx from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gx is set, it can
// safely use t.GetGx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) GetGx() bool {
	if t == nil || t.Gx == nil {
		return false
	}
	return *t.Gx
}

// GetGy retrieves the value of the leaf Gy from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gy is set, it can
// safely use t.GetGy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) GetGy() bool {
	if t == nil || t.Gy == nil {
		return false
	}
	return *t.Gy
}

// GetNasreq retrieves the value of the leaf Nasreq from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nasreq is set, it can
// safely use t.GetNasreq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nasreq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) GetNasreq() bool {
	if t == nil || t.Nasreq == nil {
		return false
	}
	return *t.Nasreq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gx == nil {
		var v bool = false
		t.Gx = &v
	}
	if t.Gy == nil {
		var v bool = false
		t.Gy = &v
	}
	if t.Nasreq == nil {
		var v bool = false
		t.Nasreq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Applications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer represents the /nokia-conf/configure/groups/group/aaa/diameter/peer-policy/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer struct {
	Address          *string                                                                   `path:"address" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	ConnectionTimer  *uint32                                                                   `path:"connection-timer" module:"nokia-conf"`
	DestinationHost  *string                                                                   `path:"destination-host" module:"nokia-conf"`
	DestinationRealm *string                                                                   `path:"destination-realm" module:"nokia-conf"`
	PeerName         *string                                                                   `path:"peer-name" module:"nokia-conf"`
	Preference       *uint32                                                                   `path:"preference" module:"nokia-conf"`
	Statistics       *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics `path:"statistics" module:"nokia-conf"`
	TransactionTimer *uint32                                                                   `path:"transaction-timer" module:"nokia-conf"`
	Transport        *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport  `path:"transport" module:"nokia-conf"`
	WatchdogTimer    *uint32                                                                   `path:"watchdog-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) IsYANGGoStruct() {}

// GetOrCreateStatistics retrieves the value of the Statistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetOrCreateStatistics() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics {
	if t.Statistics != nil {
		return t.Statistics
	}
	t.Statistics = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics{}
	return t.Statistics
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetOrCreateTransport() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport{}
	return t.Transport
}

// GetStatistics returns the value of the Statistics struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer. If the receiver or the field Statistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetStatistics() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics {
	if t != nil && t.Statistics != nil {
		return t.Statistics
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetTransport() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetConnectionTimer retrieves the value of the leaf ConnectionTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimer is set, it can
// safely use t.GetConnectionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetConnectionTimer() uint32 {
	if t == nil || t.ConnectionTimer == nil {
		return 0
	}
	return *t.ConnectionTimer
}

// GetDestinationHost retrieves the value of the leaf DestinationHost from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationHost is set, it can
// safely use t.GetDestinationHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetDestinationHost() string {
	if t == nil || t.DestinationHost == nil {
		return ""
	}
	return *t.DestinationHost
}

// GetDestinationRealm retrieves the value of the leaf DestinationRealm from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRealm is set, it can
// safely use t.GetDestinationRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetDestinationRealm() string {
	if t == nil || t.DestinationRealm == nil {
		return ""
	}
	return *t.DestinationRealm
}

// GetPeerName retrieves the value of the leaf PeerName from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerName is set, it can
// safely use t.GetPeerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetPeerName() string {
	if t == nil || t.PeerName == nil {
		return ""
	}
	return *t.PeerName
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetTransactionTimer retrieves the value of the leaf TransactionTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransactionTimer is set, it can
// safely use t.GetTransactionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransactionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetTransactionTimer() uint32 {
	if t == nil || t.TransactionTimer == nil {
		return 0
	}
	return *t.TransactionTimer
}

// GetWatchdogTimer retrieves the value of the leaf WatchdogTimer from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WatchdogTimer is set, it can
// safely use t.GetWatchdogTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WatchdogTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) GetWatchdogTimer() uint32 {
	if t == nil || t.WatchdogTimer == nil {
		return 0
	}
	return *t.WatchdogTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
	t.Statistics.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerName == nil {
		return nil, fmt.Errorf("nil value for key PeerName")
	}

	return map[string]interface{}{
		"peer-name": *t.PeerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics represents the /nokia-conf/configure/groups/group/aaa/diameter/peer-policy/peer/statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Statistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport represents the /nokia-conf/configure/groups/group/aaa/diameter/peer-policy/peer/transport YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport struct {
	PortNumber *uint32 `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport) IsYANGGoStruct() {}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport) GetPortNumber() uint32 {
	if t == nil || t.PortNumber == nil {
		return 3868
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v uint32 = 3868
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Peer_Transport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy represents the /nokia-conf/configure/groups/group/aaa/diameter/peer-policy/proxy YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy struct {
	AdminState     E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	LocalAddress   *string                                                                 `path:"local-address" module:"nokia-conf"`
	McsPeer        *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer `path:"mcs-peer" module:"nokia-conf" yangPresence:"true"`
	RouterInstance *string                                                                 `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) IsYANGGoStruct() {}

// GetOrCreateMcsPeer retrieves the value of the McsPeer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) GetOrCreateMcsPeer() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer {
	if t.McsPeer != nil {
		return t.McsPeer
	}
	t.McsPeer = &NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer{}
	return t.McsPeer
}

// GetMcsPeer returns the value of the McsPeer struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy. If the receiver or the field McsPeer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) GetMcsPeer() *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer {
	if t != nil && t.McsPeer != nil {
		return t.McsPeer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.McsPeer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer represents the /nokia-conf/configure/groups/group/aaa/diameter/peer-policy/proxy/mcs-peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer struct {
	Address *string `path:"address" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer.
func (*NokiaConf_Configure_Groups_Group_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius represents the /nokia-conf/configure/groups/group/aaa/radius YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius struct {
	AcctOnOffGroup       map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup       `path:"acct-on-off-group" module:"nokia-conf"`
	CoaPort              *uint16                                                                      `path:"coa-port" module:"nokia-conf"`
	IsaPolicy            map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy            `path:"isa-policy" module:"nokia-conf"`
	L2TpAccountingPolicy map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy `path:"l2tp-accounting-policy" module:"nokia-conf"`
	RouteDownloader      map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader      `path:"route-downloader" module:"nokia-conf"`
	ServerPolicy         map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy         `path:"server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius) IsYANGGoStruct() {}

// NewAcctOnOffGroup creates a new entry in the AcctOnOffGroup list of the
// NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) NewAcctOnOffGroup(Name string) (*NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcctOnOffGroup == nil {
		t.AcctOnOffGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AcctOnOffGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AcctOnOffGroup", key)
	}

	t.AcctOnOffGroup[key] = &NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup{
		Name: &Name,
	}

	return t.AcctOnOffGroup[key], nil
}

// RenameAcctOnOffGroup renames an entry in the list AcctOnOffGroup within
// the NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) RenameAcctOnOffGroup(oldK, newK string) error {
	if _, ok := t.AcctOnOffGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AcctOnOffGroup", newK)
	}

	e, ok := t.AcctOnOffGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AcctOnOffGroup", oldK)
	}
	e.Name = &newK

	t.AcctOnOffGroup[newK] = e
	delete(t.AcctOnOffGroup, oldK)
	return nil
}

// GetOrCreateAcctOnOffGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetOrCreateAcctOnOffGroup(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup {

	key := Name

	if v, ok := t.AcctOnOffGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAcctOnOffGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAcctOnOffGroup got unexpected error: %v", err))
	}
	return v
}

// GetAcctOnOffGroup retrieves the value with the specified key from
// the AcctOnOffGroup map field of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetAcctOnOffGroup(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AcctOnOffGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAcctOnOffGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) DeleteAcctOnOffGroup(Name string) {
	key := Name

	delete(t.AcctOnOffGroup, key)
}

// AppendAcctOnOffGroup appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup struct to the
// list AcctOnOffGroup of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) AppendAcctOnOffGroup(v *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcctOnOffGroup == nil {
		t.AcctOnOffGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup)
	}

	if _, ok := t.AcctOnOffGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AcctOnOffGroup %v", key)
	}

	t.AcctOnOffGroup[key] = v
	return nil
}

// NewIsaPolicy creates a new entry in the IsaPolicy list of the
// NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) NewIsaPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaPolicy == nil {
		t.IsaPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IsaPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IsaPolicy", key)
	}

	t.IsaPolicy[key] = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy{
		Name: &Name,
	}

	return t.IsaPolicy[key], nil
}

// RenameIsaPolicy renames an entry in the list IsaPolicy within
// the NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) RenameIsaPolicy(oldK, newK string) error {
	if _, ok := t.IsaPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in IsaPolicy", newK)
	}

	e, ok := t.IsaPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IsaPolicy", oldK)
	}
	e.Name = &newK

	t.IsaPolicy[newK] = e
	delete(t.IsaPolicy, oldK)
	return nil
}

// GetOrCreateIsaPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetOrCreateIsaPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy {

	key := Name

	if v, ok := t.IsaPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsaPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsaPolicy got unexpected error: %v", err))
	}
	return v
}

// GetIsaPolicy retrieves the value with the specified key from
// the IsaPolicy map field of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetIsaPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IsaPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsaPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) DeleteIsaPolicy(Name string) {
	key := Name

	delete(t.IsaPolicy, key)
}

// AppendIsaPolicy appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy struct to the
// list IsaPolicy of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) AppendIsaPolicy(v *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaPolicy == nil {
		t.IsaPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy)
	}

	if _, ok := t.IsaPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list IsaPolicy %v", key)
	}

	t.IsaPolicy[key] = v
	return nil
}

// NewL2TpAccountingPolicy creates a new entry in the L2TpAccountingPolicy list of the
// NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) NewL2TpAccountingPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.L2TpAccountingPolicy == nil {
		t.L2TpAccountingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.L2TpAccountingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list L2TpAccountingPolicy", key)
	}

	t.L2TpAccountingPolicy[key] = &NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy{
		Name: &Name,
	}

	return t.L2TpAccountingPolicy[key], nil
}

// RenameL2TpAccountingPolicy renames an entry in the list L2TpAccountingPolicy within
// the NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) RenameL2TpAccountingPolicy(oldK, newK string) error {
	if _, ok := t.L2TpAccountingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in L2TpAccountingPolicy", newK)
	}

	e, ok := t.L2TpAccountingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in L2TpAccountingPolicy", oldK)
	}
	e.Name = &newK

	t.L2TpAccountingPolicy[newK] = e
	delete(t.L2TpAccountingPolicy, oldK)
	return nil
}

// GetOrCreateL2TpAccountingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetOrCreateL2TpAccountingPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy {

	key := Name

	if v, ok := t.L2TpAccountingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewL2TpAccountingPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateL2TpAccountingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetL2TpAccountingPolicy retrieves the value with the specified key from
// the L2TpAccountingPolicy map field of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetL2TpAccountingPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.L2TpAccountingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteL2TpAccountingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) DeleteL2TpAccountingPolicy(Name string) {
	key := Name

	delete(t.L2TpAccountingPolicy, key)
}

// AppendL2TpAccountingPolicy appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy struct to the
// list L2TpAccountingPolicy of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) AppendL2TpAccountingPolicy(v *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.L2TpAccountingPolicy == nil {
		t.L2TpAccountingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy)
	}

	if _, ok := t.L2TpAccountingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list L2TpAccountingPolicy %v", key)
	}

	t.L2TpAccountingPolicy[key] = v
	return nil
}

// NewRouteDownloader creates a new entry in the RouteDownloader list of the
// NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) NewRouteDownloader(Name string) (*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteDownloader == nil {
		t.RouteDownloader = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteDownloader[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteDownloader", key)
	}

	t.RouteDownloader[key] = &NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader{
		Name: &Name,
	}

	return t.RouteDownloader[key], nil
}

// RenameRouteDownloader renames an entry in the list RouteDownloader within
// the NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) RenameRouteDownloader(oldK, newK string) error {
	if _, ok := t.RouteDownloader[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteDownloader", newK)
	}

	e, ok := t.RouteDownloader[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteDownloader", oldK)
	}
	e.Name = &newK

	t.RouteDownloader[newK] = e
	delete(t.RouteDownloader, oldK)
	return nil
}

// GetOrCreateRouteDownloader retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetOrCreateRouteDownloader(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader {

	key := Name

	if v, ok := t.RouteDownloader[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteDownloader(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteDownloader got unexpected error: %v", err))
	}
	return v
}

// GetRouteDownloader retrieves the value with the specified key from
// the RouteDownloader map field of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetRouteDownloader(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RouteDownloader[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteDownloader deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) DeleteRouteDownloader(Name string) {
	key := Name

	delete(t.RouteDownloader, key)
}

// AppendRouteDownloader appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader struct to the
// list RouteDownloader of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) AppendRouteDownloader(v *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteDownloader == nil {
		t.RouteDownloader = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader)
	}

	if _, ok := t.RouteDownloader[key]; ok {
		return fmt.Errorf("duplicate key for list RouteDownloader %v", key)
	}

	t.RouteDownloader[key] = v
	return nil
}

// NewServerPolicy creates a new entry in the ServerPolicy list of the
// NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) NewServerPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerPolicy == nil {
		t.ServerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerPolicy", key)
	}

	t.ServerPolicy[key] = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy{
		Name: &Name,
	}

	return t.ServerPolicy[key], nil
}

// RenameServerPolicy renames an entry in the list ServerPolicy within
// the NokiaConf_Configure_Groups_Group_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) RenameServerPolicy(oldK, newK string) error {
	if _, ok := t.ServerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerPolicy", newK)
	}

	e, ok := t.ServerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerPolicy", oldK)
	}
	e.Name = &newK

	t.ServerPolicy[newK] = e
	delete(t.ServerPolicy, oldK)
	return nil
}

// GetOrCreateServerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetOrCreateServerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy {

	key := Name

	if v, ok := t.ServerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetServerPolicy retrieves the value with the specified key from
// the ServerPolicy map field of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetServerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) DeleteServerPolicy(Name string) {
	key := Name

	delete(t.ServerPolicy, key)
}

// AppendServerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy struct to the
// list ServerPolicy of NokiaConf_Configure_Groups_Group_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) AppendServerPolicy(v *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerPolicy == nil {
		t.ServerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy)
	}

	if _, ok := t.ServerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ServerPolicy %v", key)
	}

	t.ServerPolicy[key] = v
	return nil
}

// GetCoaPort retrieves the value of the leaf CoaPort from the NokiaConf_Configure_Groups_Group_Aaa_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CoaPort is set, it can
// safely use t.GetCoaPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CoaPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) GetCoaPort() uint16 {
	if t == nil || t.CoaPort == nil {
		return 3799
	}
	return *t.CoaPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CoaPort == nil {
		var v uint16 = 3799
		t.CoaPort = &v
	}
	for _, e := range t.AcctOnOffGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.IsaPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.L2TpAccountingPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteDownloader {
		e.PopulateDefaults()
	}
	for _, e := range t.ServerPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup represents the /nokia-conf/configure/groups/group/aaa/radius/acct-on-off-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup struct {
	Description *string `path:"description" module:"nokia-conf"`
	Name        *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_AcctOnOffGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy struct {
	Accounting         *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting          `path:"accounting" module:"nokia-conf"`
	Authentication     *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication      `path:"authentication" module:"nokia-conf"`
	Description        *string                                                                    `path:"description" module:"nokia-conf"`
	Name               *string                                                                    `path:"name" module:"nokia-conf"`
	NasIpAddressOrigin E_NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_NasIpAddressOrigin `path:"nas-ip-address-origin" module:"nokia-conf"`
	Password           *string                                                                    `path:"password" module:"nokia-conf"`
	PythonPolicy       *string                                                                    `path:"python-policy" module:"nokia-conf"`
	Servers            *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers             `path:"servers" module:"nokia-conf"`
	UserName           *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName            `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) IsYANGGoStruct() {}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetOrCreateAccounting() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication{}
	return t.Authentication
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetOrCreateServers() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers{}
	return t.Servers
}

// GetOrCreateUserName retrieves the value of the UserName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetOrCreateUserName() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName {
	if t.UserName != nil {
		return t.UserName
	}
	t.UserName = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName{}
	return t.UserName
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetAccounting() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetAuthentication() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetServers() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetUserName returns the value of the UserName struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy. If the receiver or the field UserName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetUserName() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName {
	if t != nil && t.UserName != nil {
		return t.UserName
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNasIpAddressOrigin retrieves the value of the leaf NasIpAddressOrigin from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddressOrigin is set, it can
// safely use t.GetNasIpAddressOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddressOrigin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetNasIpAddressOrigin() E_NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_NasIpAddressOrigin {
	if t == nil || t.NasIpAddressOrigin == 0 {
		return NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_NasIpAddressOrigin_system_ip
	}
	return t.NasIpAddressOrigin
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NasIpAddressOrigin == 0 {
		t.NasIpAddressOrigin = NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_NasIpAddressOrigin_system_ip
	}
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Servers.PopulateDefaults()
	t.UserName.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting struct {
	IncludeAttributes *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes `path:"include-attributes" module:"nokia-conf"`
	NatPeriodicUpdate *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate `path:"nat-periodic-update" module:"nokia-conf"`
	UpdateTriggers    *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers    `path:"update-triggers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) IsYANGGoStruct() {}

// GetOrCreateIncludeAttributes retrieves the value of the IncludeAttributes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) GetOrCreateIncludeAttributes() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes {
	if t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	t.IncludeAttributes = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes{}
	return t.IncludeAttributes
}

// GetOrCreateNatPeriodicUpdate retrieves the value of the NatPeriodicUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) GetOrCreateNatPeriodicUpdate() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate {
	if t.NatPeriodicUpdate != nil {
		return t.NatPeriodicUpdate
	}
	t.NatPeriodicUpdate = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate{}
	return t.NatPeriodicUpdate
}

// GetOrCreateUpdateTriggers retrieves the value of the UpdateTriggers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) GetOrCreateUpdateTriggers() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers {
	if t.UpdateTriggers != nil {
		return t.UpdateTriggers
	}
	t.UpdateTriggers = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers{}
	return t.UpdateTriggers
}

// GetIncludeAttributes returns the value of the IncludeAttributes struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting. If the receiver or the field IncludeAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) GetIncludeAttributes() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes {
	if t != nil && t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	return nil
}

// GetNatPeriodicUpdate returns the value of the NatPeriodicUpdate struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting. If the receiver or the field NatPeriodicUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) GetNatPeriodicUpdate() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate {
	if t != nil && t.NatPeriodicUpdate != nil {
		return t.NatPeriodicUpdate
	}
	return nil
}

// GetUpdateTriggers returns the value of the UpdateTriggers struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting. If the receiver or the field UpdateTriggers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) GetUpdateTriggers() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers {
	if t != nil && t.UpdateTriggers != nil {
		return t.UpdateTriggers
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeAttributes.PopulateDefaults()
	t.NatPeriodicUpdate.PopulateDefaults()
	t.UpdateTriggers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/accounting/include-attributes YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes struct {
	AcctDelayTime                   *bool `path:"acct-delay-time" module:"nokia-conf"`
	AcctTriggeredReason             *bool `path:"acct-triggered-reason" module:"nokia-conf"`
	CalledStationId                 *bool `path:"called-station-id" module:"nokia-conf"`
	CallingStationId                *bool `path:"calling-station-id" module:"nokia-conf"`
	CircuitId                       *bool `path:"circuit-id" module:"nokia-conf"`
	Class                           *bool `path:"class" module:"nokia-conf"`
	CreditControlQuota              *bool `path:"credit-control-quota" module:"nokia-conf"`
	DhcpOptions                     *bool `path:"dhcp-options" module:"nokia-conf"`
	DhcpVendorClassId               *bool `path:"dhcp-vendor-class-id" module:"nokia-conf"`
	FrameCounters                   *bool `path:"frame-counters" module:"nokia-conf"`
	FramedIpAddress                 *bool `path:"framed-ip-address" module:"nokia-conf"`
	FramedIpNetmask                 *bool `path:"framed-ip-netmask" module:"nokia-conf"`
	FramedIpv6Prefix                *bool `path:"framed-ipv6-prefix" module:"nokia-conf"`
	HardwareTimestamp               *bool `path:"hardware-timestamp" module:"nokia-conf"`
	Ipv6Address                     *bool `path:"ipv6-address" module:"nokia-conf"`
	MacAddress                      *bool `path:"mac-address" module:"nokia-conf"`
	MillisecondEventTimestamp       *bool `path:"millisecond-event-timestamp" module:"nokia-conf"`
	MultiSessionId                  *bool `path:"multi-session-id" module:"nokia-conf"`
	NasIdentifier                   *bool `path:"nas-identifier" module:"nokia-conf"`
	NasIpAddress                    *bool `path:"nas-ip-address" module:"nokia-conf"`
	NasPort                         *bool `path:"nas-port" module:"nokia-conf"`
	NasPortId                       *bool `path:"nas-port-id" module:"nokia-conf"`
	NasPortType                     *bool `path:"nas-port-type" module:"nokia-conf"`
	NatInsideServiceId              *bool `path:"nat-inside-service-id" module:"nokia-conf"`
	NatOutsideIpAddress             *bool `path:"nat-outside-ip-address" module:"nokia-conf"`
	NatOutsideServiceId             *bool `path:"nat-outside-service-id" module:"nokia-conf"`
	NatPortRangeBlock               *bool `path:"nat-port-range-block" module:"nokia-conf"`
	NatSubscriberString             *bool `path:"nat-subscriber-string" module:"nokia-conf"`
	OctetCounters                   *bool `path:"octet-counters" module:"nokia-conf"`
	ProxiedSubscriberData           *bool `path:"proxied-subscriber-data" module:"nokia-conf"`
	ReleaseReason                   *bool `path:"release-reason" module:"nokia-conf"`
	RemoteId                        *bool `path:"remote-id" module:"nokia-conf"`
	Rssi                            *bool `path:"rssi" module:"nokia-conf"`
	SessionTime                     *bool `path:"session-time" module:"nokia-conf"`
	SubscriberId                    *bool `path:"subscriber-id" module:"nokia-conf"`
	ToserverDhcp6Options            *bool `path:"toserver-dhcp6-options" module:"nokia-conf"`
	UeCreationType                  *bool `path:"ue-creation-type" module:"nokia-conf"`
	UserName                        *bool `path:"user-name" module:"nokia-conf"`
	WlanSsidVlan                    *bool `path:"wlan-ssid-vlan" module:"nokia-conf"`
	XconnectTunnelHomeAddress       *bool `path:"xconnect-tunnel-home-address" module:"nokia-conf"`
	XconnectTunnelLocalIpv6Address  *bool `path:"xconnect-tunnel-local-ipv6-address" module:"nokia-conf"`
	XconnectTunnelRemoteIpv6Address *bool `path:"xconnect-tunnel-remote-ipv6-address" module:"nokia-conf"`
	XconnectTunnelService           *bool `path:"xconnect-tunnel-service" module:"nokia-conf"`
	XconnectTunnelType              *bool `path:"xconnect-tunnel-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) IsYANGGoStruct() {
}

// GetAcctDelayTime retrieves the value of the leaf AcctDelayTime from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctDelayTime is set, it can
// safely use t.GetAcctDelayTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctDelayTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetAcctDelayTime() bool {
	if t == nil || t.AcctDelayTime == nil {
		return false
	}
	return *t.AcctDelayTime
}

// GetAcctTriggeredReason retrieves the value of the leaf AcctTriggeredReason from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctTriggeredReason is set, it can
// safely use t.GetAcctTriggeredReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctTriggeredReason == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetAcctTriggeredReason() bool {
	if t == nil || t.AcctTriggeredReason == nil {
		return false
	}
	return *t.AcctTriggeredReason
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetClass() bool {
	if t == nil || t.Class == nil {
		return false
	}
	return *t.Class
}

// GetCreditControlQuota retrieves the value of the leaf CreditControlQuota from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreditControlQuota is set, it can
// safely use t.GetCreditControlQuota() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreditControlQuota == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCreditControlQuota() bool {
	if t == nil || t.CreditControlQuota == nil {
		return false
	}
	return *t.CreditControlQuota
}

// GetDhcpOptions retrieves the value of the leaf DhcpOptions from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpOptions is set, it can
// safely use t.GetDhcpOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetDhcpOptions() bool {
	if t == nil || t.DhcpOptions == nil {
		return false
	}
	return *t.DhcpOptions
}

// GetDhcpVendorClassId retrieves the value of the leaf DhcpVendorClassId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpVendorClassId is set, it can
// safely use t.GetDhcpVendorClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpVendorClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetDhcpVendorClassId() bool {
	if t == nil || t.DhcpVendorClassId == nil {
		return false
	}
	return *t.DhcpVendorClassId
}

// GetFrameCounters retrieves the value of the leaf FrameCounters from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameCounters is set, it can
// safely use t.GetFrameCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameCounters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFrameCounters() bool {
	if t == nil || t.FrameCounters == nil {
		return false
	}
	return *t.FrameCounters
}

// GetFramedIpAddress retrieves the value of the leaf FramedIpAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpAddress is set, it can
// safely use t.GetFramedIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFramedIpAddress() bool {
	if t == nil || t.FramedIpAddress == nil {
		return false
	}
	return *t.FramedIpAddress
}

// GetFramedIpNetmask retrieves the value of the leaf FramedIpNetmask from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpNetmask is set, it can
// safely use t.GetFramedIpNetmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpNetmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFramedIpNetmask() bool {
	if t == nil || t.FramedIpNetmask == nil {
		return false
	}
	return *t.FramedIpNetmask
}

// GetFramedIpv6Prefix retrieves the value of the leaf FramedIpv6Prefix from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpv6Prefix is set, it can
// safely use t.GetFramedIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFramedIpv6Prefix() bool {
	if t == nil || t.FramedIpv6Prefix == nil {
		return false
	}
	return *t.FramedIpv6Prefix
}

// GetHardwareTimestamp retrieves the value of the leaf HardwareTimestamp from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HardwareTimestamp is set, it can
// safely use t.GetHardwareTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HardwareTimestamp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetHardwareTimestamp() bool {
	if t == nil || t.HardwareTimestamp == nil {
		return false
	}
	return *t.HardwareTimestamp
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetIpv6Address() bool {
	if t == nil || t.Ipv6Address == nil {
		return false
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetMacAddress() bool {
	if t == nil || t.MacAddress == nil {
		return false
	}
	return *t.MacAddress
}

// GetMillisecondEventTimestamp retrieves the value of the leaf MillisecondEventTimestamp from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MillisecondEventTimestamp is set, it can
// safely use t.GetMillisecondEventTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MillisecondEventTimestamp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetMillisecondEventTimestamp() bool {
	if t == nil || t.MillisecondEventTimestamp == nil {
		return false
	}
	return *t.MillisecondEventTimestamp
}

// GetMultiSessionId retrieves the value of the leaf MultiSessionId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiSessionId is set, it can
// safely use t.GetMultiSessionId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiSessionId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetMultiSessionId() bool {
	if t == nil || t.MultiSessionId == nil {
		return false
	}
	return *t.MultiSessionId
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetNasIpAddress retrieves the value of the leaf NasIpAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddress is set, it can
// safely use t.GetNasIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasIpAddress() bool {
	if t == nil || t.NasIpAddress == nil {
		return false
	}
	return *t.NasIpAddress
}

// GetNasPort retrieves the value of the leaf NasPort from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPort is set, it can
// safely use t.GetNasPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasPort() bool {
	if t == nil || t.NasPort == nil {
		return false
	}
	return *t.NasPort
}

// GetNasPortId retrieves the value of the leaf NasPortId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortId is set, it can
// safely use t.GetNasPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasPortId() bool {
	if t == nil || t.NasPortId == nil {
		return false
	}
	return *t.NasPortId
}

// GetNasPortType retrieves the value of the leaf NasPortType from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortType is set, it can
// safely use t.GetNasPortType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasPortType() bool {
	if t == nil || t.NasPortType == nil {
		return false
	}
	return *t.NasPortType
}

// GetNatInsideServiceId retrieves the value of the leaf NatInsideServiceId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatInsideServiceId is set, it can
// safely use t.GetNatInsideServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatInsideServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatInsideServiceId() bool {
	if t == nil || t.NatInsideServiceId == nil {
		return false
	}
	return *t.NatInsideServiceId
}

// GetNatOutsideIpAddress retrieves the value of the leaf NatOutsideIpAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatOutsideIpAddress is set, it can
// safely use t.GetNatOutsideIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatOutsideIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatOutsideIpAddress() bool {
	if t == nil || t.NatOutsideIpAddress == nil {
		return false
	}
	return *t.NatOutsideIpAddress
}

// GetNatOutsideServiceId retrieves the value of the leaf NatOutsideServiceId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatOutsideServiceId is set, it can
// safely use t.GetNatOutsideServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatOutsideServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatOutsideServiceId() bool {
	if t == nil || t.NatOutsideServiceId == nil {
		return false
	}
	return *t.NatOutsideServiceId
}

// GetNatPortRangeBlock retrieves the value of the leaf NatPortRangeBlock from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPortRangeBlock is set, it can
// safely use t.GetNatPortRangeBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPortRangeBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatPortRangeBlock() bool {
	if t == nil || t.NatPortRangeBlock == nil {
		return false
	}
	return *t.NatPortRangeBlock
}

// GetNatSubscriberString retrieves the value of the leaf NatSubscriberString from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatSubscriberString is set, it can
// safely use t.GetNatSubscriberString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatSubscriberString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatSubscriberString() bool {
	if t == nil || t.NatSubscriberString == nil {
		return false
	}
	return *t.NatSubscriberString
}

// GetOctetCounters retrieves the value of the leaf OctetCounters from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OctetCounters is set, it can
// safely use t.GetOctetCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OctetCounters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetOctetCounters() bool {
	if t == nil || t.OctetCounters == nil {
		return false
	}
	return *t.OctetCounters
}

// GetProxiedSubscriberData retrieves the value of the leaf ProxiedSubscriberData from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxiedSubscriberData is set, it can
// safely use t.GetProxiedSubscriberData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxiedSubscriberData == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetProxiedSubscriberData() bool {
	if t == nil || t.ProxiedSubscriberData == nil {
		return false
	}
	return *t.ProxiedSubscriberData
}

// GetReleaseReason retrieves the value of the leaf ReleaseReason from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseReason is set, it can
// safely use t.GetReleaseReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseReason == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetReleaseReason() bool {
	if t == nil || t.ReleaseReason == nil {
		return false
	}
	return *t.ReleaseReason
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// GetRssi retrieves the value of the leaf Rssi from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rssi is set, it can
// safely use t.GetRssi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rssi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetRssi() bool {
	if t == nil || t.Rssi == nil {
		return false
	}
	return *t.Rssi
}

// GetSessionTime retrieves the value of the leaf SessionTime from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionTime is set, it can
// safely use t.GetSessionTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetSessionTime() bool {
	if t == nil || t.SessionTime == nil {
		return false
	}
	return *t.SessionTime
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetSubscriberId() bool {
	if t == nil || t.SubscriberId == nil {
		return false
	}
	return *t.SubscriberId
}

// GetToserverDhcp6Options retrieves the value of the leaf ToserverDhcp6Options from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToserverDhcp6Options is set, it can
// safely use t.GetToserverDhcp6Options() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToserverDhcp6Options == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetToserverDhcp6Options() bool {
	if t == nil || t.ToserverDhcp6Options == nil {
		return false
	}
	return *t.ToserverDhcp6Options
}

// GetUeCreationType retrieves the value of the leaf UeCreationType from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UeCreationType is set, it can
// safely use t.GetUeCreationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UeCreationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetUeCreationType() bool {
	if t == nil || t.UeCreationType == nil {
		return false
	}
	return *t.UeCreationType
}

// GetUserName retrieves the value of the leaf UserName from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserName is set, it can
// safely use t.GetUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetUserName() bool {
	if t == nil || t.UserName == nil {
		return false
	}
	return *t.UserName
}

// GetWlanSsidVlan retrieves the value of the leaf WlanSsidVlan from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanSsidVlan is set, it can
// safely use t.GetWlanSsidVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanSsidVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetWlanSsidVlan() bool {
	if t == nil || t.WlanSsidVlan == nil {
		return false
	}
	return *t.WlanSsidVlan
}

// GetXconnectTunnelHomeAddress retrieves the value of the leaf XconnectTunnelHomeAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelHomeAddress is set, it can
// safely use t.GetXconnectTunnelHomeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelHomeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelHomeAddress() bool {
	if t == nil || t.XconnectTunnelHomeAddress == nil {
		return false
	}
	return *t.XconnectTunnelHomeAddress
}

// GetXconnectTunnelLocalIpv6Address retrieves the value of the leaf XconnectTunnelLocalIpv6Address from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelLocalIpv6Address is set, it can
// safely use t.GetXconnectTunnelLocalIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelLocalIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelLocalIpv6Address() bool {
	if t == nil || t.XconnectTunnelLocalIpv6Address == nil {
		return false
	}
	return *t.XconnectTunnelLocalIpv6Address
}

// GetXconnectTunnelRemoteIpv6Address retrieves the value of the leaf XconnectTunnelRemoteIpv6Address from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelRemoteIpv6Address is set, it can
// safely use t.GetXconnectTunnelRemoteIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelRemoteIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelRemoteIpv6Address() bool {
	if t == nil || t.XconnectTunnelRemoteIpv6Address == nil {
		return false
	}
	return *t.XconnectTunnelRemoteIpv6Address
}

// GetXconnectTunnelService retrieves the value of the leaf XconnectTunnelService from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelService is set, it can
// safely use t.GetXconnectTunnelService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelService() bool {
	if t == nil || t.XconnectTunnelService == nil {
		return false
	}
	return *t.XconnectTunnelService
}

// GetXconnectTunnelType retrieves the value of the leaf XconnectTunnelType from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelType is set, it can
// safely use t.GetXconnectTunnelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelType() bool {
	if t == nil || t.XconnectTunnelType == nil {
		return false
	}
	return *t.XconnectTunnelType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctDelayTime == nil {
		var v bool = false
		t.AcctDelayTime = &v
	}
	if t.AcctTriggeredReason == nil {
		var v bool = false
		t.AcctTriggeredReason = &v
	}
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.CircuitId == nil {
		var v bool = false
		t.CircuitId = &v
	}
	if t.Class == nil {
		var v bool = false
		t.Class = &v
	}
	if t.CreditControlQuota == nil {
		var v bool = false
		t.CreditControlQuota = &v
	}
	if t.DhcpOptions == nil {
		var v bool = false
		t.DhcpOptions = &v
	}
	if t.DhcpVendorClassId == nil {
		var v bool = false
		t.DhcpVendorClassId = &v
	}
	if t.FrameCounters == nil {
		var v bool = false
		t.FrameCounters = &v
	}
	if t.FramedIpAddress == nil {
		var v bool = false
		t.FramedIpAddress = &v
	}
	if t.FramedIpNetmask == nil {
		var v bool = false
		t.FramedIpNetmask = &v
	}
	if t.FramedIpv6Prefix == nil {
		var v bool = false
		t.FramedIpv6Prefix = &v
	}
	if t.HardwareTimestamp == nil {
		var v bool = false
		t.HardwareTimestamp = &v
	}
	if t.Ipv6Address == nil {
		var v bool = false
		t.Ipv6Address = &v
	}
	if t.MacAddress == nil {
		var v bool = false
		t.MacAddress = &v
	}
	if t.MillisecondEventTimestamp == nil {
		var v bool = false
		t.MillisecondEventTimestamp = &v
	}
	if t.MultiSessionId == nil {
		var v bool = false
		t.MultiSessionId = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.NasIpAddress == nil {
		var v bool = false
		t.NasIpAddress = &v
	}
	if t.NasPort == nil {
		var v bool = false
		t.NasPort = &v
	}
	if t.NasPortId == nil {
		var v bool = false
		t.NasPortId = &v
	}
	if t.NasPortType == nil {
		var v bool = false
		t.NasPortType = &v
	}
	if t.NatInsideServiceId == nil {
		var v bool = false
		t.NatInsideServiceId = &v
	}
	if t.NatOutsideIpAddress == nil {
		var v bool = false
		t.NatOutsideIpAddress = &v
	}
	if t.NatOutsideServiceId == nil {
		var v bool = false
		t.NatOutsideServiceId = &v
	}
	if t.NatPortRangeBlock == nil {
		var v bool = false
		t.NatPortRangeBlock = &v
	}
	if t.NatSubscriberString == nil {
		var v bool = false
		t.NatSubscriberString = &v
	}
	if t.OctetCounters == nil {
		var v bool = false
		t.OctetCounters = &v
	}
	if t.ProxiedSubscriberData == nil {
		var v bool = false
		t.ProxiedSubscriberData = &v
	}
	if t.ReleaseReason == nil {
		var v bool = false
		t.ReleaseReason = &v
	}
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	if t.Rssi == nil {
		var v bool = false
		t.Rssi = &v
	}
	if t.SessionTime == nil {
		var v bool = false
		t.SessionTime = &v
	}
	if t.SubscriberId == nil {
		var v bool = false
		t.SubscriberId = &v
	}
	if t.ToserverDhcp6Options == nil {
		var v bool = false
		t.ToserverDhcp6Options = &v
	}
	if t.UeCreationType == nil {
		var v bool = false
		t.UeCreationType = &v
	}
	if t.UserName == nil {
		var v bool = false
		t.UserName = &v
	}
	if t.WlanSsidVlan == nil {
		var v bool = false
		t.WlanSsidVlan = &v
	}
	if t.XconnectTunnelHomeAddress == nil {
		var v bool = false
		t.XconnectTunnelHomeAddress = &v
	}
	if t.XconnectTunnelLocalIpv6Address == nil {
		var v bool = false
		t.XconnectTunnelLocalIpv6Address = &v
	}
	if t.XconnectTunnelRemoteIpv6Address == nil {
		var v bool = false
		t.XconnectTunnelRemoteIpv6Address = &v
	}
	if t.XconnectTunnelService == nil {
		var v bool = false
		t.XconnectTunnelService = &v
	}
	if t.XconnectTunnelType == nil {
		var v bool = false
		t.XconnectTunnelType = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/accounting/nat-periodic-update YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate struct {
	Interval  *uint32                                                                                            `path:"interval" module:"nokia-conf"`
	RateLimit NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Union `path:"rate-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRateLimit retrieves the value of the leaf RateLimit from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) GetRateLimit() NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Union {
	if t == nil || t.RateLimit == nil {
		return NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Enum_unlimited
	}
	return t.RateLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateLimit == nil {
		t.RateLimit = NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/accounting/update-triggers YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers struct {
	AddressState       *bool `path:"address-state" module:"nokia-conf"`
	SoftQuotaExhausted *bool `path:"soft-quota-exhausted" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) IsYANGGoStruct() {
}

// GetAddressState retrieves the value of the leaf AddressState from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressState is set, it can
// safely use t.GetAddressState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) GetAddressState() bool {
	if t == nil || t.AddressState == nil {
		return false
	}
	return *t.AddressState
}

// GetSoftQuotaExhausted retrieves the value of the leaf SoftQuotaExhausted from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftQuotaExhausted is set, it can
// safely use t.GetSoftQuotaExhausted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftQuotaExhausted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) GetSoftQuotaExhausted() bool {
	if t == nil || t.SoftQuotaExhausted == nil {
		return false
	}
	return *t.SoftQuotaExhausted
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AddressState == nil {
		var v bool = false
		t.AddressState = &v
	}
	if t.SoftQuotaExhausted == nil {
		var v bool = false
		t.SoftQuotaExhausted = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication struct {
	IncludeAttributes *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes `path:"include-attributes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) IsYANGGoStruct() {}

// GetOrCreateIncludeAttributes retrieves the value of the IncludeAttributes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) GetOrCreateIncludeAttributes() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes {
	if t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	t.IncludeAttributes = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes{}
	return t.IncludeAttributes
}

// GetIncludeAttributes returns the value of the IncludeAttributes struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication. If the receiver or the field IncludeAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) GetIncludeAttributes() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes {
	if t != nil && t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeAttributes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/authentication/include-attributes YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes struct {
	CalledStationId           *bool `path:"called-station-id" module:"nokia-conf"`
	CallingStationId          *bool `path:"calling-station-id" module:"nokia-conf"`
	CircuitId                 *bool `path:"circuit-id" module:"nokia-conf"`
	DhcpVendorClassId         *bool `path:"dhcp-vendor-class-id" module:"nokia-conf"`
	FramedIpAddress           *bool `path:"framed-ip-address" module:"nokia-conf"`
	Ipv6Address               *bool `path:"ipv6-address" module:"nokia-conf"`
	MacAddress                *bool `path:"mac-address" module:"nokia-conf"`
	NasIdentifier             *bool `path:"nas-identifier" module:"nokia-conf"`
	NasIpAddress              *bool `path:"nas-ip-address" module:"nokia-conf"`
	NasPort                   *bool `path:"nas-port" module:"nokia-conf"`
	NasPortId                 *bool `path:"nas-port-id" module:"nokia-conf"`
	NasPortType               *bool `path:"nas-port-type" module:"nokia-conf"`
	RemoteId                  *bool `path:"remote-id" module:"nokia-conf"`
	ToserverDhcpOptions       *bool `path:"toserver-dhcp-options" module:"nokia-conf"`
	ToserverDhcp6Options      *bool `path:"toserver-dhcp6-options" module:"nokia-conf"`
	WlanSsidVlan              *bool `path:"wlan-ssid-vlan" module:"nokia-conf"`
	XconnectTunnelHomeAddress *bool `path:"xconnect-tunnel-home-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) IsYANGGoStruct() {
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetDhcpVendorClassId retrieves the value of the leaf DhcpVendorClassId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpVendorClassId is set, it can
// safely use t.GetDhcpVendorClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpVendorClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetDhcpVendorClassId() bool {
	if t == nil || t.DhcpVendorClassId == nil {
		return false
	}
	return *t.DhcpVendorClassId
}

// GetFramedIpAddress retrieves the value of the leaf FramedIpAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpAddress is set, it can
// safely use t.GetFramedIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetFramedIpAddress() bool {
	if t == nil || t.FramedIpAddress == nil {
		return false
	}
	return *t.FramedIpAddress
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetIpv6Address() bool {
	if t == nil || t.Ipv6Address == nil {
		return false
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetMacAddress() bool {
	if t == nil || t.MacAddress == nil {
		return false
	}
	return *t.MacAddress
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetNasIpAddress retrieves the value of the leaf NasIpAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddress is set, it can
// safely use t.GetNasIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasIpAddress() bool {
	if t == nil || t.NasIpAddress == nil {
		return true
	}
	return *t.NasIpAddress
}

// GetNasPort retrieves the value of the leaf NasPort from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPort is set, it can
// safely use t.GetNasPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasPort() bool {
	if t == nil || t.NasPort == nil {
		return false
	}
	return *t.NasPort
}

// GetNasPortId retrieves the value of the leaf NasPortId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortId is set, it can
// safely use t.GetNasPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasPortId() bool {
	if t == nil || t.NasPortId == nil {
		return false
	}
	return *t.NasPortId
}

// GetNasPortType retrieves the value of the leaf NasPortType from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortType is set, it can
// safely use t.GetNasPortType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasPortType() bool {
	if t == nil || t.NasPortType == nil {
		return false
	}
	return *t.NasPortType
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// GetToserverDhcpOptions retrieves the value of the leaf ToserverDhcpOptions from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToserverDhcpOptions is set, it can
// safely use t.GetToserverDhcpOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToserverDhcpOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetToserverDhcpOptions() bool {
	if t == nil || t.ToserverDhcpOptions == nil {
		return false
	}
	return *t.ToserverDhcpOptions
}

// GetToserverDhcp6Options retrieves the value of the leaf ToserverDhcp6Options from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToserverDhcp6Options is set, it can
// safely use t.GetToserverDhcp6Options() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToserverDhcp6Options == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetToserverDhcp6Options() bool {
	if t == nil || t.ToserverDhcp6Options == nil {
		return false
	}
	return *t.ToserverDhcp6Options
}

// GetWlanSsidVlan retrieves the value of the leaf WlanSsidVlan from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanSsidVlan is set, it can
// safely use t.GetWlanSsidVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanSsidVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetWlanSsidVlan() bool {
	if t == nil || t.WlanSsidVlan == nil {
		return false
	}
	return *t.WlanSsidVlan
}

// GetXconnectTunnelHomeAddress retrieves the value of the leaf XconnectTunnelHomeAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelHomeAddress is set, it can
// safely use t.GetXconnectTunnelHomeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelHomeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetXconnectTunnelHomeAddress() bool {
	if t == nil || t.XconnectTunnelHomeAddress == nil {
		return false
	}
	return *t.XconnectTunnelHomeAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.CircuitId == nil {
		var v bool = false
		t.CircuitId = &v
	}
	if t.DhcpVendorClassId == nil {
		var v bool = false
		t.DhcpVendorClassId = &v
	}
	if t.FramedIpAddress == nil {
		var v bool = false
		t.FramedIpAddress = &v
	}
	if t.Ipv6Address == nil {
		var v bool = false
		t.Ipv6Address = &v
	}
	if t.MacAddress == nil {
		var v bool = false
		t.MacAddress = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.NasIpAddress == nil {
		var v bool = true
		t.NasIpAddress = &v
	}
	if t.NasPort == nil {
		var v bool = false
		t.NasPort = &v
	}
	if t.NasPortId == nil {
		var v bool = false
		t.NasPortId = &v
	}
	if t.NasPortType == nil {
		var v bool = false
		t.NasPortType = &v
	}
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	if t.ToserverDhcpOptions == nil {
		var v bool = false
		t.ToserverDhcpOptions = &v
	}
	if t.ToserverDhcp6Options == nil {
		var v bool = false
		t.ToserverDhcp6Options = &v
	}
	if t.WlanSsidVlan == nil {
		var v bool = false
		t.WlanSsidVlan = &v
	}
	if t.XconnectTunnelHomeAddress == nil {
		var v bool = false
		t.XconnectTunnelHomeAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/servers YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers struct {
	AccessAlgorithm    E_NokiaTypesRadius_IsaServerSelectionAlgo                                                                                                                  `path:"access-algorithm" module:"nokia-conf"`
	RouterInstance     *string                                                                                                                                                    `path:"router-instance" module:"nokia-conf"`
	Server             map[NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server `path:"server" module:"nokia-conf"`
	SourceAddressRange *string                                                                                                                                                    `path:"source-address-range" module:"nokia-conf"`
	Timeout            *uint32                                                                                                                                                    `path:"timeout" module:"nokia-conf"`
	TotalTries         *uint32                                                                                                                                                    `path:"total-tries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) NewServer(Index NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union) (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server{
		Index: Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) GetOrCreateServer(Index NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union) *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) GetServer(Index NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union) *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) DeleteServer(Index NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) AppendServer(v *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union]*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) GetAccessAlgorithm() E_NokiaTypesRadius_IsaServerSelectionAlgo {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaTypesRadius_IsaServerSelectionAlgo_direct
	}
	return t.AccessAlgorithm
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddressRange retrieves the value of the leaf SourceAddressRange from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressRange is set, it can
// safely use t.GetSourceAddressRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) GetSourceAddressRange() string {
	if t == nil || t.SourceAddressRange == nil {
		return ""
	}
	return *t.SourceAddressRange
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// GetTotalTries retrieves the value of the leaf TotalTries from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalTries is set, it can
// safely use t.GetTotalTries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalTries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) GetTotalTries() uint32 {
	if t == nil || t.TotalTries == nil {
		return 3
	}
	return *t.TotalTries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaTypesRadius_IsaServerSelectionAlgo_direct
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	if t.TotalTries == nil {
		var v uint32 = 3
		t.TotalTries = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/servers/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server struct {
	AdminState E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Index      NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union `path:"index" module:"nokia-conf"`
	IpAddress  *string                                                                          `path:"ip-address" module:"nokia-conf"`
	Purpose    *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose    `path:"purpose" module:"nokia-conf"`
	Secret     *string                                                                          `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) IsYANGGoStruct() {}

// GetOrCreatePurpose retrieves the value of the Purpose field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) GetOrCreatePurpose() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose {
	if t.Purpose != nil {
		return t.Purpose
	}
	t.Purpose = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose{}
	return t.Purpose
}

// GetPurpose returns the value of the Purpose struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server. If the receiver or the field Purpose is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) GetPurpose() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose {
	if t != nil && t.Purpose != nil {
		return t.Purpose
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) GetIndex() NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Purpose.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/servers/server/purpose YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose struct {
	Accounting     *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting     `path:"accounting" module:"nokia-conf" yangPresence:"true"`
	Authentication *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	Coa            *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa            `path:"coa" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) IsYANGGoStruct() {
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetOrCreateAccounting() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication{}
	return t.Authentication
}

// GetOrCreateCoa retrieves the value of the Coa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetOrCreateCoa() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa {
	if t.Coa != nil {
		return t.Coa
	}
	t.Coa = &NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa{}
	return t.Coa
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetAccounting() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetAuthentication() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetCoa returns the value of the Coa struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose. If the receiver or the field Coa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetCoa() *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa {
	if t != nil && t.Coa != nil {
		return t.Coa
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Coa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/servers/server/purpose/accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting struct {
	UdpPort *int32 `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) IsYANGGoStruct() {
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 1813
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UdpPort == nil {
		var v int32 = 1813
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/servers/server/purpose/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication struct {
	UdpPort *int32 `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) IsYANGGoStruct() {
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 1812
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UdpPort == nil {
		var v int32 = 1812
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/servers/server/purpose/coa YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa struct {
	UdpPort *int32 `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) IsYANGGoStruct() {
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 3799
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UdpPort == nil {
		var v int32 = 3799
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName represents the /nokia-conf/configure/groups/group/aaa/radius/isa-policy/user-name YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName struct {
	Format    E_NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName_Format `path:"format" module:"nokia-conf"`
	MacFormat E_NokiaTypesNat_MacFormat                                               `path:"mac-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) IsYANGGoStruct() {}

// GetFormat retrieves the value of the leaf Format from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format is set, it can
// safely use t.GetFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) GetFormat() E_NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName_Format {
	if t == nil || t.Format == 0 {
		return NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName_Format_mac
	}
	return t.Format
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) GetMacFormat() E_NokiaTypesNat_MacFormat {
	if t == nil || t.MacFormat == 0 {
		return NokiaTypesNat_MacFormat_alu
	}
	return t.MacFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Format == 0 {
		t.Format = NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName_Format_mac
	}
	if t.MacFormat == 0 {
		t.MacFormat = NokiaTypesNat_MacFormat_alu
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_IsaPolicy_UserName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy represents the /nokia-conf/configure/groups/group/aaa/radius/l2tp-accounting-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy struct {
	AccountingType          *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType         `path:"accounting-type" module:"nokia-conf"`
	AcctTunnelConnectionFmt *string                                                                                  `path:"acct-tunnel-connection-fmt" module:"nokia-conf"`
	Description             *string                                                                                  `path:"description" module:"nokia-conf"`
	IncludeRadiusAttribute  *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute `path:"include-radius-attribute" module:"nokia-conf"`
	Name                    *string                                                                                  `path:"name" module:"nokia-conf"`
	RadiusServerPolicy      *string                                                                                  `path:"radius-server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) IsYANGGoStruct() {}

// GetOrCreateAccountingType retrieves the value of the AccountingType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetOrCreateAccountingType() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType {
	if t.AccountingType != nil {
		return t.AccountingType
	}
	t.AccountingType = &NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType{}
	return t.AccountingType
}

// GetOrCreateIncludeRadiusAttribute retrieves the value of the IncludeRadiusAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetOrCreateIncludeRadiusAttribute() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute {
	if t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	t.IncludeRadiusAttribute = &NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute{}
	return t.IncludeRadiusAttribute
}

// GetAccountingType returns the value of the AccountingType struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy. If the receiver or the field AccountingType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetAccountingType() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType {
	if t != nil && t.AccountingType != nil {
		return t.AccountingType
	}
	return nil
}

// GetIncludeRadiusAttribute returns the value of the IncludeRadiusAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy. If the receiver or the field IncludeRadiusAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetIncludeRadiusAttribute() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute {
	if t != nil && t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	return nil
}

// GetAcctTunnelConnectionFmt retrieves the value of the leaf AcctTunnelConnectionFmt from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctTunnelConnectionFmt is set, it can
// safely use t.GetAcctTunnelConnectionFmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctTunnelConnectionFmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetAcctTunnelConnectionFmt() string {
	if t == nil || t.AcctTunnelConnectionFmt == nil {
		return "%n"
	}
	return *t.AcctTunnelConnectionFmt
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctTunnelConnectionFmt == nil {
		var v string = "%n"
		t.AcctTunnelConnectionFmt = &v
	}
	t.AccountingType.PopulateDefaults()
	t.IncludeRadiusAttribute.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType represents the /nokia-conf/configure/groups/group/aaa/radius/l2tp-accounting-policy/accounting-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType struct {
	Session *bool `path:"session" module:"nokia-conf"`
	Tunnel  *bool `path:"tunnel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) IsYANGGoStruct() {
}

// GetSession retrieves the value of the leaf Session from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Session is set, it can
// safely use t.GetSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Session == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) GetSession() bool {
	if t == nil || t.Session == nil {
		return true
	}
	return *t.Session
}

// GetTunnel retrieves the value of the leaf Tunnel from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunnel is set, it can
// safely use t.GetTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) GetTunnel() bool {
	if t == nil || t.Tunnel == nil {
		return true
	}
	return *t.Tunnel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Session == nil {
		var v bool = true
		t.Session = &v
	}
	if t.Tunnel == nil {
		var v bool = true
		t.Tunnel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_AccountingType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute represents the /nokia-conf/configure/groups/group/aaa/radius/l2tp-accounting-policy/include-radius-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute struct {
	CallingStationId *bool                                                                                                `path:"calling-station-id" module:"nokia-conf"`
	NasIdentifier    *bool                                                                                                `path:"nas-identifier" module:"nokia-conf"`
	NasPort          *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort     `path:"nas-port" module:"nokia-conf" yangPresence:"true"`
	NasPortId        *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId   `path:"nas-port-id" module:"nokia-conf" yangPresence:"true"`
	NasPortType      *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType `path:"nas-port-type" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) IsYANGGoStruct() {
}

// GetOrCreateNasPort retrieves the value of the NasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPort() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort {
	if t.NasPort != nil {
		return t.NasPort
	}
	t.NasPort = &NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort{}
	return t.NasPort
}

// GetOrCreateNasPortId retrieves the value of the NasPortId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPortId() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId {
	if t.NasPortId != nil {
		return t.NasPortId
	}
	t.NasPortId = &NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId{}
	return t.NasPortId
}

// GetOrCreateNasPortType retrieves the value of the NasPortType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPortType() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType {
	if t.NasPortType != nil {
		return t.NasPortType
	}
	t.NasPortType = &NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType{}
	return t.NasPortType
}

// GetNasPort returns the value of the NasPort struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasPort() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort {
	if t != nil && t.NasPort != nil {
		return t.NasPort
	}
	return nil
}

// GetNasPortId returns the value of the NasPortId struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasPortId() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId {
	if t != nil && t.NasPortId != nil {
		return t.NasPortId
	}
	return nil
}

// GetNasPortType returns the value of the NasPortType struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasPortType() *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType {
	if t != nil && t.NasPortType != nil {
		return t.NasPortType
	}
	return nil
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	t.NasPort.PopulateDefaults()
	t.NasPortId.PopulateDefaults()
	t.NasPortType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort represents the /nokia-conf/configure/groups/group/aaa/radius/l2tp-accounting-policy/include-radius-attribute/nas-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort struct {
	BitSpec *string `path:"bit-spec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) IsYANGGoStruct() {
}

// GetBitSpec retrieves the value of the leaf BitSpec from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitSpec is set, it can
// safely use t.GetBitSpec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitSpec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) GetBitSpec() string {
	if t == nil || t.BitSpec == nil {
		return ""
	}
	return *t.BitSpec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId represents the /nokia-conf/configure/groups/group/aaa/radius/l2tp-accounting-policy/include-radius-attribute/nas-port-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId struct {
	PrefixString *string                                                                                                    `path:"prefix-string" module:"nokia-conf"`
	Suffix       E_NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) IsYANGGoStruct() {
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// GetSuffix retrieves the value of the leaf Suffix from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suffix is set, it can
// safely use t.GetSuffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) GetSuffix() E_NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId_Suffix {
	if t == nil || t.Suffix == 0 {
		return 0
	}
	return t.Suffix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType represents the /nokia-conf/configure/groups/group/aaa/radius/l2tp-accounting-policy/include-radius-attribute/nas-port-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType struct {
	Type NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) GetType() NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Union {
	if t == nil || t.Type == nil {
		return NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == nil {
		t.Type = NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader represents the /nokia-conf/configure/groups/group/aaa/radius/route-downloader YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader struct {
	AdminState         E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	BaseUserName       *string                                                                    `path:"base-user-name" module:"nokia-conf"`
	DefaultMetric      *uint32                                                                    `path:"default-metric" module:"nokia-conf"`
	DefaultTag         *uint32                                                                    `path:"default-tag" module:"nokia-conf"`
	Description        *string                                                                    `path:"description" module:"nokia-conf"`
	DownloadInterval   *uint32                                                                    `path:"download-interval" module:"nokia-conf"`
	MaxRoutes          *uint32                                                                    `path:"max-routes" module:"nokia-conf"`
	Name               *string                                                                    `path:"name" module:"nokia-conf"`
	Password           *string                                                                    `path:"password" module:"nokia-conf"`
	RadiusServerPolicy *string                                                                    `path:"radius-server-policy" module:"nokia-conf"`
	RetryInterval      *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval `path:"retry-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) IsYANGGoStruct() {}

// GetOrCreateRetryInterval retrieves the value of the RetryInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetOrCreateRetryInterval() *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval {
	if t.RetryInterval != nil {
		return t.RetryInterval
	}
	t.RetryInterval = &NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval{}
	return t.RetryInterval
}

// GetRetryInterval returns the value of the RetryInterval struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader. If the receiver or the field RetryInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetRetryInterval() *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval {
	if t != nil && t.RetryInterval != nil {
		return t.RetryInterval
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBaseUserName retrieves the value of the leaf BaseUserName from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseUserName is set, it can
// safely use t.GetBaseUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseUserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetBaseUserName() string {
	if t == nil || t.BaseUserName == nil {
		return ""
	}
	return *t.BaseUserName
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 2
	}
	return *t.DefaultMetric
}

// GetDefaultTag retrieves the value of the leaf DefaultTag from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTag is set, it can
// safely use t.GetDefaultTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetDefaultTag() uint32 {
	if t == nil || t.DefaultTag == nil {
		return 0
	}
	return *t.DefaultTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDownloadInterval retrieves the value of the leaf DownloadInterval from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownloadInterval is set, it can
// safely use t.GetDownloadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownloadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetDownloadInterval() uint32 {
	if t == nil || t.DownloadInterval == nil {
		return 720
	}
	return *t.DownloadInterval
}

// GetMaxRoutes retrieves the value of the leaf MaxRoutes from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRoutes is set, it can
// safely use t.GetMaxRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetMaxRoutes() uint32 {
	if t == nil || t.MaxRoutes == nil {
		return 200000
	}
	return *t.MaxRoutes
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DefaultMetric == nil {
		var v uint32 = 2
		t.DefaultMetric = &v
	}
	if t.DefaultTag == nil {
		var v uint32 = 0
		t.DefaultTag = &v
	}
	if t.DownloadInterval == nil {
		var v uint32 = 720
		t.DownloadInterval = &v
	}
	if t.MaxRoutes == nil {
		var v uint32 = 200000
		t.MaxRoutes = &v
	}
	t.RetryInterval.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval represents the /nokia-conf/configure/groups/group/aaa/radius/route-downloader/retry-interval YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval struct {
	Max *uint32 `path:"max" module:"nokia-conf"`
	Min *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 20
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 10
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint32 = 20
		t.Max = &v
	}
	if t.Min == nil {
		var v uint32 = 10
		t.Min = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_RouteDownloader_RetryInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy struct {
	AcctOnOff    *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff `path:"acct-on-off" module:"nokia-conf" yangPresence:"true"`
	Description  *string                                                             `path:"description" module:"nokia-conf"`
	Name         *string                                                             `path:"name" module:"nokia-conf"`
	PythonPolicy *string                                                             `path:"python-policy" module:"nokia-conf"`
	Servers      *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers   `path:"servers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) IsYANGGoStruct() {}

// GetOrCreateAcctOnOff retrieves the value of the AcctOnOff field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) GetOrCreateAcctOnOff() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff {
	if t.AcctOnOff != nil {
		return t.AcctOnOff
	}
	t.AcctOnOff = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff{}
	return t.AcctOnOff
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) GetOrCreateServers() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers{}
	return t.Servers
}

// GetAcctOnOff returns the value of the AcctOnOff struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy. If the receiver or the field AcctOnOff is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) GetAcctOnOff() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff {
	if t != nil && t.AcctOnOff != nil {
		return t.AcctOnOff
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) GetServers() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcctOnOff.PopulateDefaults()
	t.Servers.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/acct-on-off YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff struct {
	Monitor         *string                                                                             `path:"monitor" module:"nokia-conf"`
	OperStateChange *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange `path:"oper-state-change" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) IsYANGGoStruct() {}

// GetOrCreateOperStateChange retrieves the value of the OperStateChange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) GetOrCreateOperStateChange() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange {
	if t.OperStateChange != nil {
		return t.OperStateChange
	}
	t.OperStateChange = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange{}
	return t.OperStateChange
}

// GetOperStateChange returns the value of the OperStateChange struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff. If the receiver or the field OperStateChange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) GetOperStateChange() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange {
	if t != nil && t.OperStateChange != nil {
		return t.OperStateChange
	}
	return nil
}

// GetMonitor retrieves the value of the leaf Monitor from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Monitor is set, it can
// safely use t.GetMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Monitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) GetMonitor() string {
	if t == nil || t.Monitor == nil {
		return ""
	}
	return *t.Monitor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OperStateChange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/acct-on-off/oper-state-change YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange struct {
	Group *string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) IsYANGGoStruct() {
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers struct {
	AccessAlgorithm   E_NokiaTypesRadius_ServerSelectionAlgo                                                                                                                                 `path:"access-algorithm" module:"nokia-conf"`
	Buffering         *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering                                                                                            `path:"buffering" module:"nokia-conf"`
	HealthCheck       *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck                                                                                          `path:"health-check" module:"nokia-conf"`
	HoldDownTime      *uint32                                                                                                                                                                `path:"hold-down-time" module:"nokia-conf"`
	Ipv6SourceAddress *string                                                                                                                                                                `path:"ipv6-source-address" module:"nokia-conf"`
	RetryCount        *uint32                                                                                                                                                                `path:"retry-count" module:"nokia-conf"`
	RouterInstance    *string                                                                                                                                                                `path:"router-instance" module:"nokia-conf"`
	Server            map[NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server `path:"server" module:"nokia-conf"`
	SourceAddress     *string                                                                                                                                                                `path:"source-address" module:"nokia-conf"`
	Stickiness        *bool                                                                                                                                                                  `path:"stickiness" module:"nokia-conf"`
	Timeout           *uint32                                                                                                                                                                `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) NewServer(ServerIndex NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union) (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server)
	}

	key := ServerIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server{
		ServerIndex: ServerIndex,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.ServerIndex = newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetOrCreateServer(ServerIndex NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union) *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server {

	key := ServerIndex

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(ServerIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetServer(ServerIndex NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union) *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server {

	if t == nil {
		return nil
	}

	key := ServerIndex

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) DeleteServer(ServerIndex NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union) {
	key := ServerIndex

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) AppendServer(v *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) error {
	key := v.ServerIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateBuffering retrieves the value of the Buffering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetOrCreateBuffering() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering {
	if t.Buffering != nil {
		return t.Buffering
	}
	t.Buffering = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering{}
	return t.Buffering
}

// GetOrCreateHealthCheck retrieves the value of the HealthCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetOrCreateHealthCheck() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck {
	if t.HealthCheck != nil {
		return t.HealthCheck
	}
	t.HealthCheck = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck{}
	return t.HealthCheck
}

// GetBuffering returns the value of the Buffering struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers. If the receiver or the field Buffering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetBuffering() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering {
	if t != nil && t.Buffering != nil {
		return t.Buffering
	}
	return nil
}

// GetHealthCheck returns the value of the HealthCheck struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers. If the receiver or the field HealthCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetHealthCheck() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck {
	if t != nil && t.HealthCheck != nil {
		return t.HealthCheck
	}
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetAccessAlgorithm() E_NokiaTypesRadius_ServerSelectionAlgo {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaTypesRadius_ServerSelectionAlgo_direct
	}
	return t.AccessAlgorithm
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetHoldDownTime() uint32 {
	if t == nil || t.HoldDownTime == nil {
		return 30
	}
	return *t.HoldDownTime
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetIpv6SourceAddress() string {
	if t == nil || t.Ipv6SourceAddress == nil {
		return ""
	}
	return *t.Ipv6SourceAddress
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 3
	}
	return *t.RetryCount
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetStickiness retrieves the value of the leaf Stickiness from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stickiness is set, it can
// safely use t.GetStickiness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stickiness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetStickiness() bool {
	if t == nil || t.Stickiness == nil {
		return true
	}
	return *t.Stickiness
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaTypesRadius_ServerSelectionAlgo_direct
	}
	if t.HoldDownTime == nil {
		var v uint32 = 30
		t.HoldDownTime = &v
	}
	if t.RetryCount == nil {
		var v uint32 = 3
		t.RetryCount = &v
	}
	if t.Stickiness == nil {
		var v bool = true
		t.Stickiness = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	t.Buffering.PopulateDefaults()
	t.HealthCheck.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers/buffering YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering struct {
	AcctInterim *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim `path:"acct-interim" module:"nokia-conf" yangPresence:"true"`
	AcctStart   *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart   `path:"acct-start" module:"nokia-conf" yangPresence:"true"`
	AcctStop    *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop    `path:"acct-stop" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) IsYANGGoStruct() {}

// GetOrCreateAcctInterim retrieves the value of the AcctInterim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) GetOrCreateAcctInterim() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim {
	if t.AcctInterim != nil {
		return t.AcctInterim
	}
	t.AcctInterim = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim{}
	return t.AcctInterim
}

// GetOrCreateAcctStart retrieves the value of the AcctStart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) GetOrCreateAcctStart() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart {
	if t.AcctStart != nil {
		return t.AcctStart
	}
	t.AcctStart = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart{}
	return t.AcctStart
}

// GetOrCreateAcctStop retrieves the value of the AcctStop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) GetOrCreateAcctStop() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop {
	if t.AcctStop != nil {
		return t.AcctStop
	}
	t.AcctStop = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop{}
	return t.AcctStop
}

// GetAcctInterim returns the value of the AcctInterim struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering. If the receiver or the field AcctInterim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) GetAcctInterim() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim {
	if t != nil && t.AcctInterim != nil {
		return t.AcctInterim
	}
	return nil
}

// GetAcctStart returns the value of the AcctStart struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering. If the receiver or the field AcctStart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) GetAcctStart() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart {
	if t != nil && t.AcctStart != nil {
		return t.AcctStart
	}
	return nil
}

// GetAcctStop returns the value of the AcctStop struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering. If the receiver or the field AcctStop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) GetAcctStop() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop {
	if t != nil && t.AcctStop != nil {
		return t.AcctStop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcctInterim.PopulateDefaults()
	t.AcctStart.PopulateDefaults()
	t.AcctStop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers/buffering/acct-interim YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim struct {
	Lifetime *uint32 `path:"lifetime" module:"nokia-conf"`
	Max      *uint32 `path:"max" module:"nokia-conf"`
	Min      *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) IsYANGGoStruct() {
}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers/buffering/acct-start YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart struct {
	Lifetime *uint32 `path:"lifetime" module:"nokia-conf"`
	Max      *uint32 `path:"max" module:"nokia-conf"`
	Min      *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) IsYANGGoStruct() {
}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers/buffering/acct-stop YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop struct {
	Lifetime *uint32 `path:"lifetime" module:"nokia-conf"`
	Max      *uint32 `path:"max" module:"nokia-conf"`
	Min      *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) IsYANGGoStruct() {
}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers/health-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck struct {
	DownTimeout *uint32                                                                                   `path:"down-timeout" module:"nokia-conf"`
	TestAccount *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount `path:"test-account" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) IsYANGGoStruct() {
}

// GetOrCreateTestAccount retrieves the value of the TestAccount field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) GetOrCreateTestAccount() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount {
	if t.TestAccount != nil {
		return t.TestAccount
	}
	t.TestAccount = &NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount{}
	return t.TestAccount
}

// GetTestAccount returns the value of the TestAccount struct pointer
// from NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck. If the receiver or the field TestAccount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) GetTestAccount() *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount {
	if t != nil && t.TestAccount != nil {
		return t.TestAccount
	}
	return nil
}

// GetDownTimeout retrieves the value of the leaf DownTimeout from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownTimeout is set, it can
// safely use t.GetDownTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) GetDownTimeout() uint32 {
	if t == nil || t.DownTimeout == nil {
		return 0
	}
	return *t.DownTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TestAccount.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers/health-check/test-account YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	Password   *string                     `path:"password" module:"nokia-conf"`
	UserName   *string                     `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 3
	}
	return *t.Interval
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetUserName retrieves the value of the leaf UserName from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserName is set, it can
// safely use t.GetUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetUserName() string {
	if t == nil || t.UserName == nil {
		return ""
	}
	return *t.UserName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interval == nil {
		var v uint32 = 3
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server represents the /nokia-conf/configure/groups/group/aaa/radius/server-policy/servers/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server struct {
	ServerIndex NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union `path:"server-index" module:"nokia-conf"`
	ServerName  *string                                                                                   `path:"server-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) IsYANGGoStruct() {}

// GetServerIndex retrieves the value of the leaf ServerIndex from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerIndex is set, it can
// safely use t.GetServerIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) GetServerIndex() NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server_ServerIndex_Union {
	if t == nil || t.ServerIndex == nil {
		return nil
	}
	return t.ServerIndex
}

// GetServerName retrieves the value of the leaf ServerName from the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerName is set, it can
// safely use t.GetServerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) GetServerName() string {
	if t == nil || t.ServerName == nil {
		return ""
	}
	return *t.ServerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"server-index": t.ServerIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server.
func (*NokiaConf_Configure_Groups_Group_Aaa_Radius_ServerPolicy_Servers_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Wpp represents the /nokia-conf/configure/groups/group/aaa/wpp YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Wpp struct {
	PortalGroup map[string]*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup `path:"portal-group" module:"nokia-conf"`
	SystemName  *string                                                          `path:"system-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Wpp) IsYANGGoStruct() {}

// NewPortalGroup creates a new entry in the PortalGroup list of the
// NokiaConf_Configure_Groups_Group_Aaa_Wpp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) NewPortalGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortalGroup == nil {
		t.PortalGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortalGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortalGroup", key)
	}

	t.PortalGroup[key] = &NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup{
		GroupName: &GroupName,
	}

	return t.PortalGroup[key], nil
}

// RenamePortalGroup renames an entry in the list PortalGroup within
// the NokiaConf_Configure_Groups_Group_Aaa_Wpp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) RenamePortalGroup(oldK, newK string) error {
	if _, ok := t.PortalGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in PortalGroup", newK)
	}

	e, ok := t.PortalGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortalGroup", oldK)
	}
	e.GroupName = &newK

	t.PortalGroup[newK] = e
	delete(t.PortalGroup, oldK)
	return nil
}

// GetOrCreatePortalGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Wpp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) GetOrCreatePortalGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup {

	key := GroupName

	if v, ok := t.PortalGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortalGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortalGroup got unexpected error: %v", err))
	}
	return v
}

// GetPortalGroup retrieves the value with the specified key from
// the PortalGroup map field of NokiaConf_Configure_Groups_Group_Aaa_Wpp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) GetPortalGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.PortalGroup[key]; ok {
		return lm
	}
	return nil
}

// DeletePortalGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Wpp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) DeletePortalGroup(GroupName string) {
	key := GroupName

	delete(t.PortalGroup, key)
}

// AppendPortalGroup appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup struct to the
// list PortalGroup of NokiaConf_Configure_Groups_Group_Aaa_Wpp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) AppendPortalGroup(v *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortalGroup == nil {
		t.PortalGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup)
	}

	if _, ok := t.PortalGroup[key]; ok {
		return fmt.Errorf("duplicate key for list PortalGroup %v", key)
	}

	t.PortalGroup[key] = v
	return nil
}

// GetSystemName retrieves the value of the leaf SystemName from the NokiaConf_Configure_Groups_Group_Aaa_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemName is set, it can
// safely use t.GetSystemName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PortalGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Wpp.
func (*NokiaConf_Configure_Groups_Group_Aaa_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup represents the /nokia-conf/configure/groups/group/aaa/wpp/portal-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup struct {
	AdminState  E_NokiaTypesSros_AdminState                                                                                                      `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                                                                          `path:"description" module:"nokia-conf"`
	GroupName   *string                                                                                                                          `path:"group-name" module:"nokia-conf"`
	Portal      map[NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key]*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal `path:"portal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key represents the key for list Portal of element /nokia-conf/configure/groups/group/aaa/wpp/portal-group.
type NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key struct {
	RouterInstance string `path:"router-instance"`
	Name           string `path:"name"`
}

// NewPortal creates a new entry in the Portal list of the
// NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) NewPortal(RouterInstance string, Name string) (*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key]*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal)
	}

	key := NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Portal[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Portal", key)
	}

	t.Portal[key] = &NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal{
		RouterInstance: &RouterInstance,
		Name:           &Name,
	}

	return t.Portal[key], nil
}

// RenamePortal renames an entry in the list Portal within
// the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) RenamePortal(oldK, newK NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key) error {
	if _, ok := t.Portal[newK]; ok {
		return fmt.Errorf("key %v already exists in Portal", newK)
	}

	e, ok := t.Portal[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Portal", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.Name = &newK.Name

	t.Portal[newK] = e
	delete(t.Portal, oldK)
	return nil
}

// GetOrCreatePortal retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) GetOrCreatePortal(RouterInstance string, Name string) *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal {

	key := NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if v, ok := t.Portal[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortal(RouterInstance, Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortal got unexpected error: %v", err))
	}
	return v
}

// GetPortal retrieves the value with the specified key from
// the Portal map field of NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) GetPortal(RouterInstance string, Name string) *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if lm, ok := t.Portal[key]; ok {
		return lm
	}
	return nil
}

// DeletePortal deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) DeletePortal(RouterInstance string, Name string) {
	key := NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	delete(t.Portal, key)
}

// AppendPortal appends the supplied NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal struct to the
// list Portal of NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) AppendPortal(v *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: *v.RouterInstance,
		Name:           *v.Name,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal_Key]*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal)
	}

	if _, ok := t.Portal[key]; ok {
		return fmt.Errorf("duplicate key for list Portal %v", key)
	}

	t.Portal[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Portal {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup.
func (*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal represents the /nokia-conf/configure/groups/group/aaa/wpp/portal-group/portal YANG schema element.
type NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"name":            *t.Name,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal.
func (*NokiaConf_Configure_Groups_Group_Aaa_Wpp_PortalGroup_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance represents the /nokia-conf/configure/groups/group/application-assurance YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance struct {
	Aarp                   map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp      `path:"aarp" module:"nokia-conf"`
	Cflowd                 *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd                                                                                `path:"cflowd" module:"nokia-conf"`
	FlowAttribute          *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute                                                                         `path:"flow-attribute" module:"nokia-conf"`
	Group                  map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group `path:"group" module:"nokia-conf"`
	HttpEnrich             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich                                                                            `path:"http-enrich" module:"nokia-conf"`
	HttpErrorRedirect      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect                                                                     `path:"http-error-redirect" module:"nokia-conf"`
	HttpNotification       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification                                                                      `path:"http-notification" module:"nokia-conf"`
	HttpRedirect           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect                                                                          `path:"http-redirect" module:"nokia-conf"`
	Protocol               map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol                                                                   `path:"protocol" module:"nokia-conf"`
	RadiusAccountingPolicy map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy                                                     `path:"radius-accounting-policy" module:"nokia-conf"`
	UsageAlertThresholds   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds                                                                  `path:"usage-alert-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance) IsYANGGoStruct() {}

// NewAarp creates a new entry in the Aarp list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) NewAarp(AarpId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aarp == nil {
		t.Aarp = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp)
	}

	key := AarpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aarp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aarp", key)
	}

	t.Aarp[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp{
		AarpId: AarpId,
	}

	return t.Aarp[key], nil
}

// RenameAarp renames an entry in the list Aarp within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) RenameAarp(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union) error {
	if _, ok := t.Aarp[newK]; ok {
		return fmt.Errorf("key %v already exists in Aarp", newK)
	}

	e, ok := t.Aarp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aarp", oldK)
	}
	e.AarpId = newK

	t.Aarp[newK] = e
	delete(t.Aarp, oldK)
	return nil
}

// GetOrCreateAarp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateAarp(AarpId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp {

	key := AarpId

	if v, ok := t.Aarp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAarp(AarpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAarp got unexpected error: %v", err))
	}
	return v
}

// GetAarp retrieves the value with the specified key from
// the Aarp map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetAarp(AarpId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp {

	if t == nil {
		return nil
	}

	key := AarpId

	if lm, ok := t.Aarp[key]; ok {
		return lm
	}
	return nil
}

// DeleteAarp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) DeleteAarp(AarpId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union) {
	key := AarpId

	delete(t.Aarp, key)
}

// AppendAarp appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp struct to the
// list Aarp of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) AppendAarp(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) error {
	key := v.AarpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aarp == nil {
		t.Aarp = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp)
	}

	if _, ok := t.Aarp[key]; ok {
		return fmt.Errorf("duplicate key for list Aarp %v", key)
	}

	t.Aarp[key] = v
	return nil
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) NewGroup(AaGroupId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group)
	}

	key := AaGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group{
		AaGroupId: AaGroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) RenameGroup(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.AaGroupId = newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateGroup(AaGroupId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group {

	key := AaGroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(AaGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetGroup(AaGroupId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group {

	if t == nil {
		return nil
	}

	key := AaGroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) DeleteGroup(AaGroupId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union) {
	key := AaGroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) AppendGroup(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) error {
	key := v.AaGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewProtocol creates a new entry in the Protocol list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) NewProtocol(ProtocolName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol)
	}

	key := ProtocolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol{
		ProtocolName: &ProtocolName,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) RenameProtocol(oldK, newK string) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolName = &newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateProtocol(ProtocolName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol {

	key := ProtocolName

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetProtocol(ProtocolName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolName

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) DeleteProtocol(ProtocolName string) {
	key := ProtocolName

	delete(t.Protocol, key)
}

// AppendProtocol appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol struct to the
// list Protocol of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) AppendProtocol(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) error {
	if v.ProtocolName == nil {
		return fmt.Errorf("invalid nil key received for ProtocolName")
	}

	key := *v.ProtocolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// NewRadiusAccountingPolicy creates a new entry in the RadiusAccountingPolicy list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) NewRadiusAccountingPolicy(RadAcctPlcyName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAccountingPolicy == nil {
		t.RadiusAccountingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy)
	}

	key := RadAcctPlcyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RadiusAccountingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RadiusAccountingPolicy", key)
	}

	t.RadiusAccountingPolicy[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy{
		RadAcctPlcyName: &RadAcctPlcyName,
	}

	return t.RadiusAccountingPolicy[key], nil
}

// RenameRadiusAccountingPolicy renames an entry in the list RadiusAccountingPolicy within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) RenameRadiusAccountingPolicy(oldK, newK string) error {
	if _, ok := t.RadiusAccountingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RadiusAccountingPolicy", newK)
	}

	e, ok := t.RadiusAccountingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RadiusAccountingPolicy", oldK)
	}
	e.RadAcctPlcyName = &newK

	t.RadiusAccountingPolicy[newK] = e
	delete(t.RadiusAccountingPolicy, oldK)
	return nil
}

// GetOrCreateRadiusAccountingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateRadiusAccountingPolicy(RadAcctPlcyName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy {

	key := RadAcctPlcyName

	if v, ok := t.RadiusAccountingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadiusAccountingPolicy(RadAcctPlcyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadiusAccountingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRadiusAccountingPolicy retrieves the value with the specified key from
// the RadiusAccountingPolicy map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetRadiusAccountingPolicy(RadAcctPlcyName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy {

	if t == nil {
		return nil
	}

	key := RadAcctPlcyName

	if lm, ok := t.RadiusAccountingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadiusAccountingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) DeleteRadiusAccountingPolicy(RadAcctPlcyName string) {
	key := RadAcctPlcyName

	delete(t.RadiusAccountingPolicy, key)
}

// AppendRadiusAccountingPolicy appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy struct to the
// list RadiusAccountingPolicy of NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) AppendRadiusAccountingPolicy(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) error {
	if v.RadAcctPlcyName == nil {
		return fmt.Errorf("invalid nil key received for RadAcctPlcyName")
	}

	key := *v.RadAcctPlcyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAccountingPolicy == nil {
		t.RadiusAccountingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy)
	}

	if _, ok := t.RadiusAccountingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RadiusAccountingPolicy %v", key)
	}

	t.RadiusAccountingPolicy[key] = v
	return nil
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateCflowd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd{}
	return t.Cflowd
}

// GetOrCreateFlowAttribute retrieves the value of the FlowAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateFlowAttribute() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute {
	if t.FlowAttribute != nil {
		return t.FlowAttribute
	}
	t.FlowAttribute = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute{}
	return t.FlowAttribute
}

// GetOrCreateHttpEnrich retrieves the value of the HttpEnrich field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateHttpEnrich() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich {
	if t.HttpEnrich != nil {
		return t.HttpEnrich
	}
	t.HttpEnrich = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich{}
	return t.HttpEnrich
}

// GetOrCreateHttpErrorRedirect retrieves the value of the HttpErrorRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateHttpErrorRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect {
	if t.HttpErrorRedirect != nil {
		return t.HttpErrorRedirect
	}
	t.HttpErrorRedirect = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect{}
	return t.HttpErrorRedirect
}

// GetOrCreateHttpNotification retrieves the value of the HttpNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateHttpNotification() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification {
	if t.HttpNotification != nil {
		return t.HttpNotification
	}
	t.HttpNotification = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification{}
	return t.HttpNotification
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateHttpRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateUsageAlertThresholds retrieves the value of the UsageAlertThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetOrCreateUsageAlertThresholds() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds {
	if t.UsageAlertThresholds != nil {
		return t.UsageAlertThresholds
	}
	t.UsageAlertThresholds = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds{}
	return t.UsageAlertThresholds
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetCflowd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetFlowAttribute returns the value of the FlowAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver or the field FlowAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetFlowAttribute() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute {
	if t != nil && t.FlowAttribute != nil {
		return t.FlowAttribute
	}
	return nil
}

// GetHttpEnrich returns the value of the HttpEnrich struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver or the field HttpEnrich is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetHttpEnrich() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich {
	if t != nil && t.HttpEnrich != nil {
		return t.HttpEnrich
	}
	return nil
}

// GetHttpErrorRedirect returns the value of the HttpErrorRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver or the field HttpErrorRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetHttpErrorRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect {
	if t != nil && t.HttpErrorRedirect != nil {
		return t.HttpErrorRedirect
	}
	return nil
}

// GetHttpNotification returns the value of the HttpNotification struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver or the field HttpNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetHttpNotification() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification {
	if t != nil && t.HttpNotification != nil {
		return t.HttpNotification
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetHttpRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetUsageAlertThresholds returns the value of the UsageAlertThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance. If the receiver or the field UsageAlertThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) GetUsageAlertThresholds() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds {
	if t != nil && t.UsageAlertThresholds != nil {
		return t.UsageAlertThresholds
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cflowd.PopulateDefaults()
	t.FlowAttribute.PopulateDefaults()
	t.HttpEnrich.PopulateDefaults()
	t.HttpErrorRedirect.PopulateDefaults()
	t.HttpNotification.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.UsageAlertThresholds.PopulateDefaults()
	for _, e := range t.Aarp {
		e.PopulateDefaults()
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Protocol {
		e.PopulateDefaults()
	}
	for _, e := range t.RadiusAccountingPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp represents the /nokia-conf/configure/groups/group/application-assurance/aarp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp struct {
	AarpId              NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union          `path:"aarp-id" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Description         *string                                                                          `path:"description" module:"nokia-conf"`
	MasterSelectionMode E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_MasterSelectionMode `path:"master-selection-mode" module:"nokia-conf"`
	Peer                *string                                                                          `path:"peer" module:"nokia-conf"`
	PeerEndpoint        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint         `path:"peer-endpoint" module:"nokia-conf"`
	Priority            *uint32                                                                          `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) IsYANGGoStruct() {}

// GetOrCreatePeerEndpoint retrieves the value of the PeerEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetOrCreatePeerEndpoint() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint {
	if t.PeerEndpoint != nil {
		return t.PeerEndpoint
	}
	t.PeerEndpoint = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint{}
	return t.PeerEndpoint
}

// GetPeerEndpoint returns the value of the PeerEndpoint struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp. If the receiver or the field PeerEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetPeerEndpoint() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint {
	if t != nil && t.PeerEndpoint != nil {
		return t.PeerEndpoint
	}
	return nil
}

// GetAarpId retrieves the value of the leaf AarpId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AarpId is set, it can
// safely use t.GetAarpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AarpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetAarpId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_AarpId_Union {
	if t == nil || t.AarpId == nil {
		return nil
	}
	return t.AarpId
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMasterSelectionMode retrieves the value of the leaf MasterSelectionMode from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterSelectionMode is set, it can
// safely use t.GetMasterSelectionMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterSelectionMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetMasterSelectionMode() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_MasterSelectionMode {
	if t == nil || t.MasterSelectionMode == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_MasterSelectionMode_minimize_switchovers
	}
	return t.MasterSelectionMode
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MasterSelectionMode == 0 {
		t.MasterSelectionMode = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_MasterSelectionMode_minimize_switchovers
	}
	if t.Priority == nil {
		var v uint32 = 100
		t.Priority = &v
	}
	t.PeerEndpoint.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"aarp-id": t.AarpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint represents the /nokia-conf/configure/groups/group/application-assurance/aarp/peer-endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint struct {
	Sap      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap `path:"sap" module:"nokia-conf" yangPresence:"true"`
	SpokeSdp *string                                                                      `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) IsYANGGoStruct() {}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) GetOrCreateSap() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap{}
	return t.Sap
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) GetSap() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSpokeSdp retrieves the value of the leaf SpokeSdp from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdp is set, it can
// safely use t.GetSpokeSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) GetSpokeSdp() string {
	if t == nil || t.SpokeSdp == nil {
		return ""
	}
	return *t.SpokeSdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Sap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap represents the /nokia-conf/configure/groups/group/application-assurance/aarp/peer-endpoint/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap struct {
	EncapType E_NokiaTypesPort_EthernetEncapType `path:"encap-type" module:"nokia-conf"`
	SapId     *string                            `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) IsYANGGoStruct() {
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) GetEncapType() E_NokiaTypesPort_EthernetEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Aarp_PeerEndpoint_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd represents the /nokia-conf/configure/groups/group/application-assurance/cflowd YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd struct {
	Field map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) IsYANGGoStruct() {}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field represents the /nokia-conf/configure/groups/group/application-assurance/cflowd/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field struct {
	Comment   *string `path:"comment" module:"nokia-conf"`
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) IsYANGGoStruct() {}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Cflowd_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute represents the /nokia-conf/configure/groups/group/application-assurance/flow-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute struct {
	Attribute map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute `path:"attribute" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) IsYANGGoStruct() {}

// NewAttribute creates a new entry in the Attribute list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) NewAttribute(AttributeName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute)
	}

	key := AttributeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Attribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Attribute", key)
	}

	t.Attribute[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute{
		AttributeName: &AttributeName,
	}

	return t.Attribute[key], nil
}

// RenameAttribute renames an entry in the list Attribute within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) RenameAttribute(oldK, newK string) error {
	if _, ok := t.Attribute[newK]; ok {
		return fmt.Errorf("key %v already exists in Attribute", newK)
	}

	e, ok := t.Attribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Attribute", oldK)
	}
	e.AttributeName = &newK

	t.Attribute[newK] = e
	delete(t.Attribute, oldK)
	return nil
}

// GetOrCreateAttribute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) GetOrCreateAttribute(AttributeName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute {

	key := AttributeName

	if v, ok := t.Attribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAttribute(AttributeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAttribute got unexpected error: %v", err))
	}
	return v
}

// GetAttribute retrieves the value with the specified key from
// the Attribute map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) GetAttribute(AttributeName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute {

	if t == nil {
		return nil
	}

	key := AttributeName

	if lm, ok := t.Attribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteAttribute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) DeleteAttribute(AttributeName string) {
	key := AttributeName

	delete(t.Attribute, key)
}

// AppendAttribute appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute struct to the
// list Attribute of NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) AppendAttribute(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) error {
	if v.AttributeName == nil {
		return fmt.Errorf("invalid nil key received for AttributeName")
	}

	key := *v.AttributeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute)
	}

	if _, ok := t.Attribute[key]; ok {
		return fmt.Errorf("duplicate key for list Attribute %v", key)
	}

	t.Attribute[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Attribute {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute represents the /nokia-conf/configure/groups/group/application-assurance/flow-attribute/attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute struct {
	AttributeName *string `path:"attribute-name" module:"nokia-conf"`
	Comment       *string `path:"comment" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) IsYANGGoStruct() {
}

// GetAttributeName retrieves the value of the leaf AttributeName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttributeName is set, it can
// safely use t.GetAttributeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttributeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) GetAttributeName() string {
	if t == nil || t.AttributeName == nil {
		return ""
	}
	return *t.AttributeName
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeName == nil {
		return nil, fmt.Errorf("nil value for key AttributeName")
	}

	return map[string]interface{}{
		"attribute-name": *t.AttributeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_FlowAttribute_Attribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group represents the /nokia-conf/configure/groups/group/application-assurance/group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct {
	AaGroupId          NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union                                                                                          `path:"aa-group-id" module:"nokia-conf"`
	CertificateProfile map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile                                                                           `path:"certificate-profile" module:"nokia-conf"`
	Cflowd             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd                                                                                                  `path:"cflowd" module:"nokia-conf" yangPresence:"true"`
	DnsIpCache         map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache                                                                                   `path:"dns-ip-cache" module:"nokia-conf"`
	HttpEnrich         map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich                                                                                   `path:"http-enrich" module:"nokia-conf"`
	HttpErrorRedirect  map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect                                                                            `path:"http-error-redirect" module:"nokia-conf"`
	HttpNotification   map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification                                                                             `path:"http-notification" module:"nokia-conf"`
	HttpRedirect       map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect                                                                                 `path:"http-redirect" module:"nokia-conf"`
	Partition          map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition `path:"partition" module:"nokia-conf"`
	Policer            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer                                                                                                 `path:"policer" module:"nokia-conf"`
	TcpOptimizer       map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer                                                                                 `path:"tcp-optimizer" module:"nokia-conf"`
	UrlFilter          map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter                                                                                    `path:"url-filter" module:"nokia-conf"`
	UrlList            map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList                                                                                      `path:"url-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) IsYANGGoStruct() {}

// NewCertificateProfile creates a new entry in the CertificateProfile list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewCertificateProfile(CertProfName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertificateProfile == nil {
		t.CertificateProfile = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile)
	}

	key := CertProfName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CertificateProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CertificateProfile", key)
	}

	t.CertificateProfile[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile{
		CertProfName: &CertProfName,
	}

	return t.CertificateProfile[key], nil
}

// RenameCertificateProfile renames an entry in the list CertificateProfile within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameCertificateProfile(oldK, newK string) error {
	if _, ok := t.CertificateProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CertificateProfile", newK)
	}

	e, ok := t.CertificateProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CertificateProfile", oldK)
	}
	e.CertProfName = &newK

	t.CertificateProfile[newK] = e
	delete(t.CertificateProfile, oldK)
	return nil
}

// GetOrCreateCertificateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateCertificateProfile(CertProfName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile {

	key := CertProfName

	if v, ok := t.CertificateProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCertificateProfile(CertProfName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCertificateProfile got unexpected error: %v", err))
	}
	return v
}

// GetCertificateProfile retrieves the value with the specified key from
// the CertificateProfile map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetCertificateProfile(CertProfName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile {

	if t == nil {
		return nil
	}

	key := CertProfName

	if lm, ok := t.CertificateProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCertificateProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteCertificateProfile(CertProfName string) {
	key := CertProfName

	delete(t.CertificateProfile, key)
}

// AppendCertificateProfile appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile struct to the
// list CertificateProfile of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendCertificateProfile(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) error {
	if v.CertProfName == nil {
		return fmt.Errorf("invalid nil key received for CertProfName")
	}

	key := *v.CertProfName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertificateProfile == nil {
		t.CertificateProfile = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile)
	}

	if _, ok := t.CertificateProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CertificateProfile %v", key)
	}

	t.CertificateProfile[key] = v
	return nil
}

// NewDnsIpCache creates a new entry in the DnsIpCache list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewDnsIpCache(DnsIpCacheName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DnsIpCache == nil {
		t.DnsIpCache = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache)
	}

	key := DnsIpCacheName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DnsIpCache[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DnsIpCache", key)
	}

	t.DnsIpCache[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache{
		DnsIpCacheName: &DnsIpCacheName,
	}

	return t.DnsIpCache[key], nil
}

// RenameDnsIpCache renames an entry in the list DnsIpCache within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameDnsIpCache(oldK, newK string) error {
	if _, ok := t.DnsIpCache[newK]; ok {
		return fmt.Errorf("key %v already exists in DnsIpCache", newK)
	}

	e, ok := t.DnsIpCache[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DnsIpCache", oldK)
	}
	e.DnsIpCacheName = &newK

	t.DnsIpCache[newK] = e
	delete(t.DnsIpCache, oldK)
	return nil
}

// GetOrCreateDnsIpCache retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateDnsIpCache(DnsIpCacheName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache {

	key := DnsIpCacheName

	if v, ok := t.DnsIpCache[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDnsIpCache(DnsIpCacheName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDnsIpCache got unexpected error: %v", err))
	}
	return v
}

// GetDnsIpCache retrieves the value with the specified key from
// the DnsIpCache map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetDnsIpCache(DnsIpCacheName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache {

	if t == nil {
		return nil
	}

	key := DnsIpCacheName

	if lm, ok := t.DnsIpCache[key]; ok {
		return lm
	}
	return nil
}

// DeleteDnsIpCache deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteDnsIpCache(DnsIpCacheName string) {
	key := DnsIpCacheName

	delete(t.DnsIpCache, key)
}

// AppendDnsIpCache appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache struct to the
// list DnsIpCache of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendDnsIpCache(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) error {
	if v.DnsIpCacheName == nil {
		return fmt.Errorf("invalid nil key received for DnsIpCacheName")
	}

	key := *v.DnsIpCacheName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DnsIpCache == nil {
		t.DnsIpCache = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache)
	}

	if _, ok := t.DnsIpCache[key]; ok {
		return fmt.Errorf("duplicate key for list DnsIpCache %v", key)
	}

	t.DnsIpCache[key] = v
	return nil
}

// NewHttpEnrich creates a new entry in the HttpEnrich list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewHttpEnrich(HttpEnrichName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpEnrich == nil {
		t.HttpEnrich = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich)
	}

	key := HttpEnrichName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpEnrich[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpEnrich", key)
	}

	t.HttpEnrich[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich{
		HttpEnrichName: &HttpEnrichName,
	}

	return t.HttpEnrich[key], nil
}

// RenameHttpEnrich renames an entry in the list HttpEnrich within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameHttpEnrich(oldK, newK string) error {
	if _, ok := t.HttpEnrich[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpEnrich", newK)
	}

	e, ok := t.HttpEnrich[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpEnrich", oldK)
	}
	e.HttpEnrichName = &newK

	t.HttpEnrich[newK] = e
	delete(t.HttpEnrich, oldK)
	return nil
}

// GetOrCreateHttpEnrich retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateHttpEnrich(HttpEnrichName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich {

	key := HttpEnrichName

	if v, ok := t.HttpEnrich[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpEnrich(HttpEnrichName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpEnrich got unexpected error: %v", err))
	}
	return v
}

// GetHttpEnrich retrieves the value with the specified key from
// the HttpEnrich map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetHttpEnrich(HttpEnrichName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich {

	if t == nil {
		return nil
	}

	key := HttpEnrichName

	if lm, ok := t.HttpEnrich[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpEnrich deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteHttpEnrich(HttpEnrichName string) {
	key := HttpEnrichName

	delete(t.HttpEnrich, key)
}

// AppendHttpEnrich appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich struct to the
// list HttpEnrich of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendHttpEnrich(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) error {
	if v.HttpEnrichName == nil {
		return fmt.Errorf("invalid nil key received for HttpEnrichName")
	}

	key := *v.HttpEnrichName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpEnrich == nil {
		t.HttpEnrich = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich)
	}

	if _, ok := t.HttpEnrich[key]; ok {
		return fmt.Errorf("duplicate key for list HttpEnrich %v", key)
	}

	t.HttpEnrich[key] = v
	return nil
}

// NewHttpErrorRedirect creates a new entry in the HttpErrorRedirect list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewHttpErrorRedirect(HttpErrorRedirectName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpErrorRedirect == nil {
		t.HttpErrorRedirect = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect)
	}

	key := HttpErrorRedirectName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpErrorRedirect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpErrorRedirect", key)
	}

	t.HttpErrorRedirect[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect{
		HttpErrorRedirectName: &HttpErrorRedirectName,
	}

	return t.HttpErrorRedirect[key], nil
}

// RenameHttpErrorRedirect renames an entry in the list HttpErrorRedirect within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameHttpErrorRedirect(oldK, newK string) error {
	if _, ok := t.HttpErrorRedirect[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpErrorRedirect", newK)
	}

	e, ok := t.HttpErrorRedirect[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpErrorRedirect", oldK)
	}
	e.HttpErrorRedirectName = &newK

	t.HttpErrorRedirect[newK] = e
	delete(t.HttpErrorRedirect, oldK)
	return nil
}

// GetOrCreateHttpErrorRedirect retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateHttpErrorRedirect(HttpErrorRedirectName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect {

	key := HttpErrorRedirectName

	if v, ok := t.HttpErrorRedirect[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpErrorRedirect(HttpErrorRedirectName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpErrorRedirect got unexpected error: %v", err))
	}
	return v
}

// GetHttpErrorRedirect retrieves the value with the specified key from
// the HttpErrorRedirect map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetHttpErrorRedirect(HttpErrorRedirectName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect {

	if t == nil {
		return nil
	}

	key := HttpErrorRedirectName

	if lm, ok := t.HttpErrorRedirect[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpErrorRedirect deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteHttpErrorRedirect(HttpErrorRedirectName string) {
	key := HttpErrorRedirectName

	delete(t.HttpErrorRedirect, key)
}

// AppendHttpErrorRedirect appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect struct to the
// list HttpErrorRedirect of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendHttpErrorRedirect(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) error {
	if v.HttpErrorRedirectName == nil {
		return fmt.Errorf("invalid nil key received for HttpErrorRedirectName")
	}

	key := *v.HttpErrorRedirectName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpErrorRedirect == nil {
		t.HttpErrorRedirect = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect)
	}

	if _, ok := t.HttpErrorRedirect[key]; ok {
		return fmt.Errorf("duplicate key for list HttpErrorRedirect %v", key)
	}

	t.HttpErrorRedirect[key] = v
	return nil
}

// NewHttpNotification creates a new entry in the HttpNotification list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewHttpNotification(HttpNotificationName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpNotification == nil {
		t.HttpNotification = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification)
	}

	key := HttpNotificationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpNotification[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpNotification", key)
	}

	t.HttpNotification[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification{
		HttpNotificationName: &HttpNotificationName,
	}

	return t.HttpNotification[key], nil
}

// RenameHttpNotification renames an entry in the list HttpNotification within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameHttpNotification(oldK, newK string) error {
	if _, ok := t.HttpNotification[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpNotification", newK)
	}

	e, ok := t.HttpNotification[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpNotification", oldK)
	}
	e.HttpNotificationName = &newK

	t.HttpNotification[newK] = e
	delete(t.HttpNotification, oldK)
	return nil
}

// GetOrCreateHttpNotification retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateHttpNotification(HttpNotificationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification {

	key := HttpNotificationName

	if v, ok := t.HttpNotification[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpNotification(HttpNotificationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpNotification got unexpected error: %v", err))
	}
	return v
}

// GetHttpNotification retrieves the value with the specified key from
// the HttpNotification map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetHttpNotification(HttpNotificationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification {

	if t == nil {
		return nil
	}

	key := HttpNotificationName

	if lm, ok := t.HttpNotification[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpNotification deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteHttpNotification(HttpNotificationName string) {
	key := HttpNotificationName

	delete(t.HttpNotification, key)
}

// AppendHttpNotification appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification struct to the
// list HttpNotification of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendHttpNotification(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) error {
	if v.HttpNotificationName == nil {
		return fmt.Errorf("invalid nil key received for HttpNotificationName")
	}

	key := *v.HttpNotificationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpNotification == nil {
		t.HttpNotification = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification)
	}

	if _, ok := t.HttpNotification[key]; ok {
		return fmt.Errorf("duplicate key for list HttpNotification %v", key)
	}

	t.HttpNotification[key] = v
	return nil
}

// NewHttpRedirect creates a new entry in the HttpRedirect list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewHttpRedirect(HttpRedirectName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpRedirect == nil {
		t.HttpRedirect = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect)
	}

	key := HttpRedirectName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpRedirect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpRedirect", key)
	}

	t.HttpRedirect[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect{
		HttpRedirectName: &HttpRedirectName,
	}

	return t.HttpRedirect[key], nil
}

// RenameHttpRedirect renames an entry in the list HttpRedirect within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameHttpRedirect(oldK, newK string) error {
	if _, ok := t.HttpRedirect[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpRedirect", newK)
	}

	e, ok := t.HttpRedirect[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpRedirect", oldK)
	}
	e.HttpRedirectName = &newK

	t.HttpRedirect[newK] = e
	delete(t.HttpRedirect, oldK)
	return nil
}

// GetOrCreateHttpRedirect retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateHttpRedirect(HttpRedirectName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect {

	key := HttpRedirectName

	if v, ok := t.HttpRedirect[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpRedirect(HttpRedirectName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpRedirect got unexpected error: %v", err))
	}
	return v
}

// GetHttpRedirect retrieves the value with the specified key from
// the HttpRedirect map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetHttpRedirect(HttpRedirectName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect {

	if t == nil {
		return nil
	}

	key := HttpRedirectName

	if lm, ok := t.HttpRedirect[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpRedirect deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteHttpRedirect(HttpRedirectName string) {
	key := HttpRedirectName

	delete(t.HttpRedirect, key)
}

// AppendHttpRedirect appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect struct to the
// list HttpRedirect of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendHttpRedirect(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) error {
	if v.HttpRedirectName == nil {
		return fmt.Errorf("invalid nil key received for HttpRedirectName")
	}

	key := *v.HttpRedirectName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpRedirect == nil {
		t.HttpRedirect = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect)
	}

	if _, ok := t.HttpRedirect[key]; ok {
		return fmt.Errorf("duplicate key for list HttpRedirect %v", key)
	}

	t.HttpRedirect[key] = v
	return nil
}

// NewPartition creates a new entry in the Partition list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewPartition(AaPartitionId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Partition == nil {
		t.Partition = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition)
	}

	key := AaPartitionId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Partition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Partition", key)
	}

	t.Partition[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition{
		AaPartitionId: AaPartitionId,
	}

	return t.Partition[key], nil
}

// RenamePartition renames an entry in the list Partition within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenamePartition(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union) error {
	if _, ok := t.Partition[newK]; ok {
		return fmt.Errorf("key %v already exists in Partition", newK)
	}

	e, ok := t.Partition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Partition", oldK)
	}
	e.AaPartitionId = newK

	t.Partition[newK] = e
	delete(t.Partition, oldK)
	return nil
}

// GetOrCreatePartition retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreatePartition(AaPartitionId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition {

	key := AaPartitionId

	if v, ok := t.Partition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPartition(AaPartitionId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePartition got unexpected error: %v", err))
	}
	return v
}

// GetPartition retrieves the value with the specified key from
// the Partition map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetPartition(AaPartitionId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition {

	if t == nil {
		return nil
	}

	key := AaPartitionId

	if lm, ok := t.Partition[key]; ok {
		return lm
	}
	return nil
}

// DeletePartition deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeletePartition(AaPartitionId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union) {
	key := AaPartitionId

	delete(t.Partition, key)
}

// AppendPartition appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct to the
// list Partition of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendPartition(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) error {
	key := v.AaPartitionId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Partition == nil {
		t.Partition = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition)
	}

	if _, ok := t.Partition[key]; ok {
		return fmt.Errorf("duplicate key for list Partition %v", key)
	}

	t.Partition[key] = v
	return nil
}

// NewTcpOptimizer creates a new entry in the TcpOptimizer list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewTcpOptimizer(TcpOptimizerName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpOptimizer == nil {
		t.TcpOptimizer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer)
	}

	key := TcpOptimizerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TcpOptimizer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TcpOptimizer", key)
	}

	t.TcpOptimizer[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer{
		TcpOptimizerName: &TcpOptimizerName,
	}

	return t.TcpOptimizer[key], nil
}

// RenameTcpOptimizer renames an entry in the list TcpOptimizer within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameTcpOptimizer(oldK, newK string) error {
	if _, ok := t.TcpOptimizer[newK]; ok {
		return fmt.Errorf("key %v already exists in TcpOptimizer", newK)
	}

	e, ok := t.TcpOptimizer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TcpOptimizer", oldK)
	}
	e.TcpOptimizerName = &newK

	t.TcpOptimizer[newK] = e
	delete(t.TcpOptimizer, oldK)
	return nil
}

// GetOrCreateTcpOptimizer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateTcpOptimizer(TcpOptimizerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer {

	key := TcpOptimizerName

	if v, ok := t.TcpOptimizer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTcpOptimizer(TcpOptimizerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTcpOptimizer got unexpected error: %v", err))
	}
	return v
}

// GetTcpOptimizer retrieves the value with the specified key from
// the TcpOptimizer map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetTcpOptimizer(TcpOptimizerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer {

	if t == nil {
		return nil
	}

	key := TcpOptimizerName

	if lm, ok := t.TcpOptimizer[key]; ok {
		return lm
	}
	return nil
}

// DeleteTcpOptimizer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteTcpOptimizer(TcpOptimizerName string) {
	key := TcpOptimizerName

	delete(t.TcpOptimizer, key)
}

// AppendTcpOptimizer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer struct to the
// list TcpOptimizer of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendTcpOptimizer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) error {
	if v.TcpOptimizerName == nil {
		return fmt.Errorf("invalid nil key received for TcpOptimizerName")
	}

	key := *v.TcpOptimizerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpOptimizer == nil {
		t.TcpOptimizer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer)
	}

	if _, ok := t.TcpOptimizer[key]; ok {
		return fmt.Errorf("duplicate key for list TcpOptimizer %v", key)
	}

	t.TcpOptimizer[key] = v
	return nil
}

// NewUrlFilter creates a new entry in the UrlFilter list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewUrlFilter(UrlFilterName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlFilter == nil {
		t.UrlFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter)
	}

	key := UrlFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UrlFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UrlFilter", key)
	}

	t.UrlFilter[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter{
		UrlFilterName: &UrlFilterName,
	}

	return t.UrlFilter[key], nil
}

// RenameUrlFilter renames an entry in the list UrlFilter within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameUrlFilter(oldK, newK string) error {
	if _, ok := t.UrlFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in UrlFilter", newK)
	}

	e, ok := t.UrlFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UrlFilter", oldK)
	}
	e.UrlFilterName = &newK

	t.UrlFilter[newK] = e
	delete(t.UrlFilter, oldK)
	return nil
}

// GetOrCreateUrlFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateUrlFilter(UrlFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter {

	key := UrlFilterName

	if v, ok := t.UrlFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUrlFilter(UrlFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUrlFilter got unexpected error: %v", err))
	}
	return v
}

// GetUrlFilter retrieves the value with the specified key from
// the UrlFilter map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetUrlFilter(UrlFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter {

	if t == nil {
		return nil
	}

	key := UrlFilterName

	if lm, ok := t.UrlFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteUrlFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteUrlFilter(UrlFilterName string) {
	key := UrlFilterName

	delete(t.UrlFilter, key)
}

// AppendUrlFilter appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter struct to the
// list UrlFilter of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendUrlFilter(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) error {
	if v.UrlFilterName == nil {
		return fmt.Errorf("invalid nil key received for UrlFilterName")
	}

	key := *v.UrlFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlFilter == nil {
		t.UrlFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter)
	}

	if _, ok := t.UrlFilter[key]; ok {
		return fmt.Errorf("duplicate key for list UrlFilter %v", key)
	}

	t.UrlFilter[key] = v
	return nil
}

// NewUrlList creates a new entry in the UrlList list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) NewUrlList(UrlListName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlList == nil {
		t.UrlList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList)
	}

	key := UrlListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UrlList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UrlList", key)
	}

	t.UrlList[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList{
		UrlListName: &UrlListName,
	}

	return t.UrlList[key], nil
}

// RenameUrlList renames an entry in the list UrlList within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) RenameUrlList(oldK, newK string) error {
	if _, ok := t.UrlList[newK]; ok {
		return fmt.Errorf("key %v already exists in UrlList", newK)
	}

	e, ok := t.UrlList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UrlList", oldK)
	}
	e.UrlListName = &newK

	t.UrlList[newK] = e
	delete(t.UrlList, oldK)
	return nil
}

// GetOrCreateUrlList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateUrlList(UrlListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList {

	key := UrlListName

	if v, ok := t.UrlList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUrlList(UrlListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUrlList got unexpected error: %v", err))
	}
	return v
}

// GetUrlList retrieves the value with the specified key from
// the UrlList map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetUrlList(UrlListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList {

	if t == nil {
		return nil
	}

	key := UrlListName

	if lm, ok := t.UrlList[key]; ok {
		return lm
	}
	return nil
}

// DeleteUrlList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) DeleteUrlList(UrlListName string) {
	key := UrlListName

	delete(t.UrlList, key)
}

// AppendUrlList appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList struct to the
// list UrlList of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) AppendUrlList(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) error {
	if v.UrlListName == nil {
		return fmt.Errorf("invalid nil key received for UrlListName")
	}

	key := *v.UrlListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlList == nil {
		t.UrlList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList)
	}

	if _, ok := t.UrlList[key]; ok {
		return fmt.Errorf("duplicate key for list UrlList %v", key)
	}

	t.UrlList[key] = v
	return nil
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreateCflowd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd{}
	return t.Cflowd
}

// GetOrCreatePolicer retrieves the value of the Policer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetOrCreatePolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer {
	if t.Policer != nil {
		return t.Policer
	}
	t.Policer = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer{}
	return t.Policer
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetCflowd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetPolicer returns the value of the Policer struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group. If the receiver or the field Policer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetPolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer {
	if t != nil && t.Policer != nil {
		return t.Policer
	}
	return nil
}

// GetAaGroupId retrieves the value of the leaf AaGroupId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaGroupId is set, it can
// safely use t.GetAaGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) GetAaGroupId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_AaGroupId_Union {
	if t == nil || t.AaGroupId == nil {
		return nil
	}
	return t.AaGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cflowd.PopulateDefaults()
	t.Policer.PopulateDefaults()
	for _, e := range t.CertificateProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.DnsIpCache {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpEnrich {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpErrorRedirect {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpNotification {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpRedirect {
		e.PopulateDefaults()
	}
	for _, e := range t.Partition {
		e.PopulateDefaults()
	}
	for _, e := range t.TcpOptimizer {
		e.PopulateDefaults()
	}
	for _, e := range t.UrlFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.UrlList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"aa-group-id": t.AaGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile represents the /nokia-conf/configure/groups/group/application-assurance/group/certificate-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	CertProfName *string                     `path:"cert-prof-name" module:"nokia-conf"`
	Description  *string                     `path:"description" module:"nokia-conf"`
	File         *string                     `path:"file" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCertProfName retrieves the value of the leaf CertProfName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfName is set, it can
// safely use t.GetCertProfName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) GetCertProfName() string {
	if t == nil || t.CertProfName == nil {
		return ""
	}
	return *t.CertProfName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFile retrieves the value of the leaf File from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if File is set, it can
// safely use t.GetFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.File == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) GetFile() string {
	if t == nil || t.File == nil {
		return ""
	}
	return *t.File
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CertProfName == nil {
		return nil, fmt.Errorf("nil value for key CertProfName")
	}

	return map[string]interface{}{
		"cert-prof-name": *t.CertProfName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_CertificateProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	Collector          map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector `path:"collector" module:"nokia-conf"`
	Comprehensive      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive                                                                                  `path:"comprehensive" module:"nokia-conf" yangPresence:"true"`
	DirectExport       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport                                                                                   `path:"direct-export" module:"nokia-conf"`
	ExportOverride     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride                                                                                 `path:"export-override" module:"nokia-conf"`
	Obfuscation        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation                                                                                    `path:"obfuscation" module:"nokia-conf"`
	RtpPerformance     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance                                                                                 `path:"rtp-performance" module:"nokia-conf" yangPresence:"true"`
	TcpPerformance     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance                                                                                 `path:"tcp-performance" module:"nokia-conf" yangPresence:"true"`
	TemplateRetransmit *uint32                                                                                                                                                            `path:"template-retransmit" module:"nokia-conf"`
	Volume             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume                                                                                         `path:"volume" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key represents the key for list Collector of element /nokia-conf/configure/groups/group/application-assurance/group/cflowd.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key struct {
	IpAddress string                                                                                  `path:"ip-address"`
	Port      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Port_Union `path:"port"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) NewCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Port_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector{
		IpAddress: &IpAddress,
		Port:      Port,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) RenameCollector(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = newK.Port

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Port_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Port_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) DeleteCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Port_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector struct to the
// list Collector of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) AppendCollector(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: *v.IpAddress,
		Port:      v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetOrCreateComprehensive retrieves the value of the Comprehensive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateComprehensive() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive {
	if t.Comprehensive != nil {
		return t.Comprehensive
	}
	t.Comprehensive = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive{}
	return t.Comprehensive
}

// GetOrCreateDirectExport retrieves the value of the DirectExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateDirectExport() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport {
	if t.DirectExport != nil {
		return t.DirectExport
	}
	t.DirectExport = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport{}
	return t.DirectExport
}

// GetOrCreateExportOverride retrieves the value of the ExportOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateExportOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride {
	if t.ExportOverride != nil {
		return t.ExportOverride
	}
	t.ExportOverride = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride{}
	return t.ExportOverride
}

// GetOrCreateObfuscation retrieves the value of the Obfuscation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateObfuscation() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation {
	if t.Obfuscation != nil {
		return t.Obfuscation
	}
	t.Obfuscation = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation{}
	return t.Obfuscation
}

// GetOrCreateRtpPerformance retrieves the value of the RtpPerformance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateRtpPerformance() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance {
	if t.RtpPerformance != nil {
		return t.RtpPerformance
	}
	t.RtpPerformance = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance{}
	return t.RtpPerformance
}

// GetOrCreateTcpPerformance retrieves the value of the TcpPerformance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateTcpPerformance() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance {
	if t.TcpPerformance != nil {
		return t.TcpPerformance
	}
	t.TcpPerformance = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance{}
	return t.TcpPerformance
}

// GetOrCreateVolume retrieves the value of the Volume field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetOrCreateVolume() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume {
	if t.Volume != nil {
		return t.Volume
	}
	t.Volume = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume{}
	return t.Volume
}

// GetComprehensive returns the value of the Comprehensive struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver or the field Comprehensive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetComprehensive() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive {
	if t != nil && t.Comprehensive != nil {
		return t.Comprehensive
	}
	return nil
}

// GetDirectExport returns the value of the DirectExport struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver or the field DirectExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetDirectExport() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport {
	if t != nil && t.DirectExport != nil {
		return t.DirectExport
	}
	return nil
}

// GetExportOverride returns the value of the ExportOverride struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver or the field ExportOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetExportOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride {
	if t != nil && t.ExportOverride != nil {
		return t.ExportOverride
	}
	return nil
}

// GetObfuscation returns the value of the Obfuscation struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver or the field Obfuscation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetObfuscation() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation {
	if t != nil && t.Obfuscation != nil {
		return t.Obfuscation
	}
	return nil
}

// GetRtpPerformance returns the value of the RtpPerformance struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver or the field RtpPerformance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetRtpPerformance() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance {
	if t != nil && t.RtpPerformance != nil {
		return t.RtpPerformance
	}
	return nil
}

// GetTcpPerformance returns the value of the TcpPerformance struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver or the field TcpPerformance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetTcpPerformance() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance {
	if t != nil && t.TcpPerformance != nil {
		return t.TcpPerformance
	}
	return nil
}

// GetVolume returns the value of the Volume struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd. If the receiver or the field Volume is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetVolume() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume {
	if t != nil && t.Volume != nil {
		return t.Volume
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTemplateRetransmit retrieves the value of the leaf TemplateRetransmit from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateRetransmit is set, it can
// safely use t.GetTemplateRetransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateRetransmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) GetTemplateRetransmit() uint32 {
	if t == nil || t.TemplateRetransmit == nil {
		return 600
	}
	return *t.TemplateRetransmit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.TemplateRetransmit == nil {
		var v uint32 = 600
		t.TemplateRetransmit = &v
	}
	t.Comprehensive.PopulateDefaults()
	t.DirectExport.PopulateDefaults()
	t.ExportOverride.PopulateDefaults()
	t.Obfuscation.PopulateDefaults()
	t.RtpPerformance.PopulateDefaults()
	t.TcpPerformance.PopulateDefaults()
	t.Volume.PopulateDefaults()
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/collector YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector struct {
	AdminState  E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                                 `path:"description" module:"nokia-conf"`
	IpAddress   *string                                                                                 `path:"ip-address" module:"nokia-conf"`
	Port        NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Port_Union `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) GetPort() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/comprehensive YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive struct {
	FlowRate   *uint32                                                                                    `path:"flow-rate" module:"nokia-conf"`
	FlowRate_2 *uint32                                                                                    `path:"flow-rate-2" module:"nokia-conf"`
	Template   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template `path:"template" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) IsYANGGoStruct() {
}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) GetOrCreateTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template{}
	return t.Template
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) GetTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetFlowRate retrieves the value of the leaf FlowRate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate is set, it can
// safely use t.GetFlowRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) GetFlowRate() uint32 {
	if t == nil || t.FlowRate == nil {
		return 0
	}
	return *t.FlowRate
}

// GetFlowRate_2 retrieves the value of the leaf FlowRate_2 from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate_2 is set, it can
// safely use t.GetFlowRate_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) GetFlowRate_2() uint32 {
	if t == nil || t.FlowRate_2 == nil {
		return 0
	}
	return *t.FlowRate_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Template.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/comprehensive/template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template struct {
	DynamicFields  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                               `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetOrCreateDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/comprehensive/template/dynamic-fields YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                               `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/comprehensive/template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/direct-export YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport struct {
	Collector map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector `path:"collector" module:"nokia-conf"`
	VlanId    *int32                                                                                                                                                                                                     `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) IsYANGGoStruct() {
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) NewCollector(CollectorId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector)
	}

	key := CollectorId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector{
		CollectorId: CollectorId,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) RenameCollector(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.CollectorId = newK

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) GetOrCreateCollector(CollectorId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector {

	key := CollectorId

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(CollectorId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) GetCollector(CollectorId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector {

	if t == nil {
		return nil
	}

	key := CollectorId

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) DeleteCollector(CollectorId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union) {
	key := CollectorId

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct to the
// list Collector of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) AppendCollector(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) error {
	key := v.CollectorId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/direct-export/collector YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct {
	Address     map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address `path:"address" module:"nokia-conf"`
	CollectorId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union                                                                                                  `path:"collector-id" module:"nokia-conf"`
	Description *string                                                                                                                                                                                                      `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key represents the key for list Address of element /nokia-conf/configure/groups/group/application-assurance/group/cflowd/direct-export/collector.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key struct {
	IpAddress string                                                                                                       `path:"ip-address"`
	Port      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Port_Union `path:"port"`
}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) NewAddress(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Port_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address{
		IpAddress: &IpAddress,
		Port:      Port,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) RenameAddress(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = newK.Port

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetOrCreateAddress(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Port_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetAddress(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Port_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) DeleteAddress(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Port_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) AppendAddress(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: *v.IpAddress,
		Port:      v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// GetCollectorId retrieves the value of the leaf CollectorId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectorId is set, it can
// safely use t.GetCollectorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectorId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetCollectorId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_CollectorId_Union {
	if t == nil || t.CollectorId == nil {
		return nil
	}
	return t.CollectorId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"collector-id": t.CollectorId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/direct-export/collector/address YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                  `path:"admin-state" module:"nokia-conf"`
	IpAddress  *string                                                                                                      `path:"ip-address" module:"nokia-conf"`
	Port       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Port_Union `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetPort() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/export-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride struct {
	Mode   E_NokiaTypesApplicationAssurance_CflowdExportOverrideType `path:"mode" module:"nokia-conf"`
	Prefix *string                                                   `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) GetMode() E_NokiaTypesApplicationAssurance_CflowdExportOverrideType {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_ExportOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/obfuscation YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation struct {
	Aes_128EncryptionKey *string `path:"aes-128-encryption-key" module:"nokia-conf"`
	Aes_256EncryptionKey *string `path:"aes-256-encryption-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) IsYANGGoStruct() {
}

// GetAes_128EncryptionKey retrieves the value of the leaf Aes_128EncryptionKey from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aes_128EncryptionKey is set, it can
// safely use t.GetAes_128EncryptionKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aes_128EncryptionKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) GetAes_128EncryptionKey() string {
	if t == nil || t.Aes_128EncryptionKey == nil {
		return ""
	}
	return *t.Aes_128EncryptionKey
}

// GetAes_256EncryptionKey retrieves the value of the leaf Aes_256EncryptionKey from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aes_256EncryptionKey is set, it can
// safely use t.GetAes_256EncryptionKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aes_256EncryptionKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) GetAes_256EncryptionKey() string {
	if t == nil || t.Aes_256EncryptionKey == nil {
		return ""
	}
	return *t.Aes_256EncryptionKey
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Obfuscation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance struct {
	AudioTemplate *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate `path:"audio-template" module:"nokia-conf" yangPresence:"true"`
	FlowRate      *uint32                                                                                          `path:"flow-rate" module:"nokia-conf"`
	FlowRate_2    *uint32                                                                                          `path:"flow-rate-2" module:"nokia-conf"`
	VideoTemplate *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate `path:"video-template" module:"nokia-conf" yangPresence:"true"`
	VoiceTemplate *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate `path:"voice-template" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) IsYANGGoStruct() {
}

// GetOrCreateAudioTemplate retrieves the value of the AudioTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetOrCreateAudioTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate {
	if t.AudioTemplate != nil {
		return t.AudioTemplate
	}
	t.AudioTemplate = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate{}
	return t.AudioTemplate
}

// GetOrCreateVideoTemplate retrieves the value of the VideoTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetOrCreateVideoTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate {
	if t.VideoTemplate != nil {
		return t.VideoTemplate
	}
	t.VideoTemplate = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate{}
	return t.VideoTemplate
}

// GetOrCreateVoiceTemplate retrieves the value of the VoiceTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetOrCreateVoiceTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate {
	if t.VoiceTemplate != nil {
		return t.VoiceTemplate
	}
	t.VoiceTemplate = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate{}
	return t.VoiceTemplate
}

// GetAudioTemplate returns the value of the AudioTemplate struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance. If the receiver or the field AudioTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetAudioTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate {
	if t != nil && t.AudioTemplate != nil {
		return t.AudioTemplate
	}
	return nil
}

// GetVideoTemplate returns the value of the VideoTemplate struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance. If the receiver or the field VideoTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetVideoTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate {
	if t != nil && t.VideoTemplate != nil {
		return t.VideoTemplate
	}
	return nil
}

// GetVoiceTemplate returns the value of the VoiceTemplate struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance. If the receiver or the field VoiceTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetVoiceTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate {
	if t != nil && t.VoiceTemplate != nil {
		return t.VoiceTemplate
	}
	return nil
}

// GetFlowRate retrieves the value of the leaf FlowRate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate is set, it can
// safely use t.GetFlowRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetFlowRate() uint32 {
	if t == nil || t.FlowRate == nil {
		return 0
	}
	return *t.FlowRate
}

// GetFlowRate_2 retrieves the value of the leaf FlowRate_2 from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate_2 is set, it can
// safely use t.GetFlowRate_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetFlowRate_2() uint32 {
	if t == nil || t.FlowRate_2 == nil {
		return 0
	}
	return *t.FlowRate_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AudioTemplate.PopulateDefaults()
	t.VideoTemplate.PopulateDefaults()
	t.VoiceTemplate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/audio-template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate struct {
	DynamicFields  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                                     `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetOrCreateDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/audio-template/dynamic-fields YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                     `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/audio-template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/video-template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate struct {
	DynamicFields  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                                     `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetOrCreateDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/video-template/dynamic-fields YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                     `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/video-template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/voice-template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate struct {
	DynamicFields  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                                     `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetOrCreateDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/voice-template/dynamic-fields YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                     `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/rtp-performance/voice-template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/tcp-performance YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance struct {
	FlowRate   *uint32                                                                                     `path:"flow-rate" module:"nokia-conf"`
	FlowRate_2 *uint32                                                                                     `path:"flow-rate-2" module:"nokia-conf"`
	Template   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template `path:"template" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) IsYANGGoStruct() {
}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetOrCreateTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template{}
	return t.Template
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetFlowRate retrieves the value of the leaf FlowRate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate is set, it can
// safely use t.GetFlowRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetFlowRate() uint32 {
	if t == nil || t.FlowRate == nil {
		return 0
	}
	return *t.FlowRate
}

// GetFlowRate_2 retrieves the value of the leaf FlowRate_2 from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate_2 is set, it can
// safely use t.GetFlowRate_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetFlowRate_2() uint32 {
	if t == nil || t.FlowRate_2 == nil {
		return 0
	}
	return *t.FlowRate_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Template.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/tcp-performance/template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template struct {
	DynamicFields  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                                `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetOrCreateDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/tcp-performance/template/dynamic-fields YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/tcp-performance/template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/volume YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume struct {
	Rate     *uint32                                                                             `path:"rate" module:"nokia-conf"`
	Template *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template `path:"template" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) IsYANGGoStruct() {}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) GetOrCreateTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template{}
	return t.Template
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) GetTemplate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Template.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/volume/template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template struct {
	DynamicFields  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                        `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) GetOrCreateDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) GetDynamicFields() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/volume/template/dynamic-fields YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                        `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field represents the /nokia-conf/configure/groups/group/application-assurance/group/cflowd/volume/template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache represents the /nokia-conf/configure/groups/group/application-assurance/group/dns-ip-cache YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache struct {
	AdminState     E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Description    *string                                                                          `path:"description" module:"nokia-conf"`
	DnsIpCacheName *string                                                                          `path:"dns-ip-cache-name" module:"nokia-conf"`
	DnsMatch       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch `path:"dns-match" module:"nokia-conf"`
	IpCache        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache  `path:"ip-cache" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) IsYANGGoStruct() {}

// GetOrCreateDnsMatch retrieves the value of the DnsMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) GetOrCreateDnsMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch {
	if t.DnsMatch != nil {
		return t.DnsMatch
	}
	t.DnsMatch = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch{}
	return t.DnsMatch
}

// GetOrCreateIpCache retrieves the value of the IpCache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) GetOrCreateIpCache() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache {
	if t.IpCache != nil {
		return t.IpCache
	}
	t.IpCache = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache{}
	return t.IpCache
}

// GetDnsMatch returns the value of the DnsMatch struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache. If the receiver or the field DnsMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) GetDnsMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch {
	if t != nil && t.DnsMatch != nil {
		return t.DnsMatch
	}
	return nil
}

// GetIpCache returns the value of the IpCache struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache. If the receiver or the field IpCache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) GetIpCache() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache {
	if t != nil && t.IpCache != nil {
		return t.IpCache
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDnsIpCacheName retrieves the value of the leaf DnsIpCacheName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCacheName is set, it can
// safely use t.GetDnsIpCacheName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCacheName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) GetDnsIpCacheName() string {
	if t == nil || t.DnsIpCacheName == nil {
		return ""
	}
	return *t.DnsIpCacheName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.DnsMatch.PopulateDefaults()
	t.IpCache.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DnsIpCacheName == nil {
		return nil, fmt.Errorf("nil value for key DnsIpCacheName")
	}

	return map[string]interface{}{
		"dns-ip-cache-name": *t.DnsIpCacheName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch represents the /nokia-conf/configure/groups/group/application-assurance/group/dns-ip-cache/dns-match YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct {
	Domain               map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain               `path:"domain" module:"nokia-conf"`
	TrustedServerAddress map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress `path:"trusted-server-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) IsYANGGoStruct() {
}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) NewDomain(DomainName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain)
	}

	key := DomainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain{
		DomainName: &DomainName,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.DomainName = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetOrCreateDomain(DomainName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain {

	key := DomainName

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(DomainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetDomain(DomainName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain {

	if t == nil {
		return nil
	}

	key := DomainName

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) DeleteDomain(DomainName string) {
	key := DomainName

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain struct to the
// list Domain of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) AppendDomain(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) error {
	if v.DomainName == nil {
		return fmt.Errorf("invalid nil key received for DomainName")
	}

	key := *v.DomainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// NewTrustedServerAddress creates a new entry in the TrustedServerAddress list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) NewTrustedServerAddress(DnsServerAddress string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustedServerAddress == nil {
		t.TrustedServerAddress = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress)
	}

	key := DnsServerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustedServerAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustedServerAddress", key)
	}

	t.TrustedServerAddress[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress{
		DnsServerAddress: &DnsServerAddress,
	}

	return t.TrustedServerAddress[key], nil
}

// RenameTrustedServerAddress renames an entry in the list TrustedServerAddress within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) RenameTrustedServerAddress(oldK, newK string) error {
	if _, ok := t.TrustedServerAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustedServerAddress", newK)
	}

	e, ok := t.TrustedServerAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustedServerAddress", oldK)
	}
	e.DnsServerAddress = &newK

	t.TrustedServerAddress[newK] = e
	delete(t.TrustedServerAddress, oldK)
	return nil
}

// GetOrCreateTrustedServerAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetOrCreateTrustedServerAddress(DnsServerAddress string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress {

	key := DnsServerAddress

	if v, ok := t.TrustedServerAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustedServerAddress(DnsServerAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustedServerAddress got unexpected error: %v", err))
	}
	return v
}

// GetTrustedServerAddress retrieves the value with the specified key from
// the TrustedServerAddress map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetTrustedServerAddress(DnsServerAddress string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress {

	if t == nil {
		return nil
	}

	key := DnsServerAddress

	if lm, ok := t.TrustedServerAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustedServerAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) DeleteTrustedServerAddress(DnsServerAddress string) {
	key := DnsServerAddress

	delete(t.TrustedServerAddress, key)
}

// AppendTrustedServerAddress appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress struct to the
// list TrustedServerAddress of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) AppendTrustedServerAddress(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) error {
	if v.DnsServerAddress == nil {
		return fmt.Errorf("invalid nil key received for DnsServerAddress")
	}

	key := *v.DnsServerAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustedServerAddress == nil {
		t.TrustedServerAddress = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress)
	}

	if _, ok := t.TrustedServerAddress[key]; ok {
		return fmt.Errorf("duplicate key for list TrustedServerAddress %v", key)
	}

	t.TrustedServerAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
	for _, e := range t.TrustedServerAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain represents the /nokia-conf/configure/groups/group/application-assurance/group/dns-ip-cache/dns-match/domain YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain struct {
	DomainName *string `path:"domain-name" module:"nokia-conf"`
	Expression *string `path:"expression" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) IsYANGGoStruct() {
}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DomainName == nil {
		return nil, fmt.Errorf("nil value for key DomainName")
	}

	return map[string]interface{}{
		"domain-name": *t.DomainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress represents the /nokia-conf/configure/groups/group/application-assurance/group/dns-ip-cache/dns-match/trusted-server-address YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress struct {
	DnsServerAddress *string `path:"dns-server-address" module:"nokia-conf"`
	ServerName       *string `path:"server-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) IsYANGGoStruct() {
}

// GetDnsServerAddress retrieves the value of the leaf DnsServerAddress from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsServerAddress is set, it can
// safely use t.GetDnsServerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsServerAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) GetDnsServerAddress() string {
	if t == nil || t.DnsServerAddress == nil {
		return ""
	}
	return *t.DnsServerAddress
}

// GetServerName retrieves the value of the leaf ServerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerName is set, it can
// safely use t.GetServerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) GetServerName() string {
	if t == nil || t.ServerName == nil {
		return ""
	}
	return *t.ServerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DnsServerAddress == nil {
		return nil, fmt.Errorf("nil value for key DnsServerAddress")
	}

	return map[string]interface{}{
		"dns-server-address": *t.DnsServerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache represents the /nokia-conf/configure/groups/group/application-assurance/group/dns-ip-cache/ip-cache YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache struct {
	HighWatermark *uint32                                                                                                  `path:"high-watermark" module:"nokia-conf"`
	LowWatermark  *uint32                                                                                                  `path:"low-watermark" module:"nokia-conf"`
	Size          *uint32                                                                                                  `path:"size" module:"nokia-conf"`
	StaticAddress map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress `path:"static-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) IsYANGGoStruct() {
}

// NewStaticAddress creates a new entry in the StaticAddress list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) NewStaticAddress(StaticIpAddress string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAddress == nil {
		t.StaticAddress = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress)
	}

	key := StaticIpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticAddress", key)
	}

	t.StaticAddress[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress{
		StaticIpAddress: &StaticIpAddress,
	}

	return t.StaticAddress[key], nil
}

// RenameStaticAddress renames an entry in the list StaticAddress within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) RenameStaticAddress(oldK, newK string) error {
	if _, ok := t.StaticAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticAddress", newK)
	}

	e, ok := t.StaticAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticAddress", oldK)
	}
	e.StaticIpAddress = &newK

	t.StaticAddress[newK] = e
	delete(t.StaticAddress, oldK)
	return nil
}

// GetOrCreateStaticAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) GetOrCreateStaticAddress(StaticIpAddress string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress {

	key := StaticIpAddress

	if v, ok := t.StaticAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticAddress(StaticIpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticAddress got unexpected error: %v", err))
	}
	return v
}

// GetStaticAddress retrieves the value with the specified key from
// the StaticAddress map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) GetStaticAddress(StaticIpAddress string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress {

	if t == nil {
		return nil
	}

	key := StaticIpAddress

	if lm, ok := t.StaticAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) DeleteStaticAddress(StaticIpAddress string) {
	key := StaticIpAddress

	delete(t.StaticAddress, key)
}

// AppendStaticAddress appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress struct to the
// list StaticAddress of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) AppendStaticAddress(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) error {
	if v.StaticIpAddress == nil {
		return fmt.Errorf("invalid nil key received for StaticIpAddress")
	}

	key := *v.StaticIpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAddress == nil {
		t.StaticAddress = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress)
	}

	if _, ok := t.StaticAddress[key]; ok {
		return fmt.Errorf("duplicate key for list StaticAddress %v", key)
	}

	t.StaticAddress[key] = v
	return nil
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 90
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 80
	}
	return *t.LowWatermark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 10
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 90
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 80
		t.LowWatermark = &v
	}
	if t.Size == nil {
		var v uint32 = 10
		t.Size = &v
	}
	for _, e := range t.StaticAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress represents the /nokia-conf/configure/groups/group/application-assurance/group/dns-ip-cache/ip-cache/static-address YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress struct {
	StaticIpAddress *string `path:"static-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) IsYANGGoStruct() {
}

// GetStaticIpAddress retrieves the value of the leaf StaticIpAddress from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticIpAddress is set, it can
// safely use t.GetStaticIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) GetStaticIpAddress() string {
	if t == nil || t.StaticIpAddress == nil {
		return ""
	}
	return *t.StaticIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StaticIpAddress == nil {
		return nil, fmt.Errorf("nil value for key StaticIpAddress")
	}

	return map[string]interface{}{
		"static-ip-address": *t.StaticIpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich represents the /nokia-conf/configure/groups/group/application-assurance/group/http-enrich YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich struct {
	AdminState        E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	Description       *string                                                                                   `path:"description" module:"nokia-conf"`
	Field             map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field  `path:"field" module:"nokia-conf"`
	HttpEnrichName    *string                                                                                   `path:"http-enrich-name" module:"nokia-conf"`
	RatTypeEnrichment *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment `path:"rat-type-enrichment" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) IsYANGGoStruct() {}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetOrCreateRatTypeEnrichment retrieves the value of the RatTypeEnrichment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) GetOrCreateRatTypeEnrichment() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment {
	if t.RatTypeEnrichment != nil {
		return t.RatTypeEnrichment
	}
	t.RatTypeEnrichment = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment{}
	return t.RatTypeEnrichment
}

// GetRatTypeEnrichment returns the value of the RatTypeEnrichment struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich. If the receiver or the field RatTypeEnrichment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) GetRatTypeEnrichment() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment {
	if t != nil && t.RatTypeEnrichment != nil {
		return t.RatTypeEnrichment
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpEnrichName retrieves the value of the leaf HttpEnrichName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpEnrichName is set, it can
// safely use t.GetHttpEnrichName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpEnrichName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) GetHttpEnrichName() string {
	if t == nil || t.HttpEnrichName == nil {
		return ""
	}
	return *t.HttpEnrichName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.RatTypeEnrichment.PopulateDefaults()
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpEnrichName == nil {
		return nil, fmt.Errorf("nil value for key HttpEnrichName")
	}

	return map[string]interface{}{
		"http-enrich-name": *t.HttpEnrichName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field represents the /nokia-conf/configure/groups/group/application-assurance/group/http-enrich/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field struct {
	AntiSpoof     *bool                                                                                `path:"anti-spoof" module:"nokia-conf"`
	CallingLineId *bool                                                                                `path:"calling-line-id" module:"nokia-conf"`
	Encode        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode `path:"encode" module:"nokia-conf"`
	FieldName     *string                                                                              `path:"field-name" module:"nokia-conf"`
	Name          *string                                                                              `path:"name" module:"nokia-conf"`
	StaticString  *string                                                                              `path:"static-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) IsYANGGoStruct() {
}

// GetOrCreateEncode retrieves the value of the Encode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) GetOrCreateEncode() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode {
	if t.Encode != nil {
		return t.Encode
	}
	t.Encode = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode{}
	return t.Encode
}

// GetEncode returns the value of the Encode struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field. If the receiver or the field Encode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) GetEncode() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode {
	if t != nil && t.Encode != nil {
		return t.Encode
	}
	return nil
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) GetAntiSpoof() bool {
	if t == nil || t.AntiSpoof == nil {
		return false
	}
	return *t.AntiSpoof
}

// GetCallingLineId retrieves the value of the leaf CallingLineId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingLineId is set, it can
// safely use t.GetCallingLineId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingLineId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) GetCallingLineId() bool {
	if t == nil || t.CallingLineId == nil {
		return false
	}
	return *t.CallingLineId
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStaticString retrieves the value of the leaf StaticString from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticString is set, it can
// safely use t.GetStaticString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) GetStaticString() string {
	if t == nil || t.StaticString == nil {
		return ""
	}
	return *t.StaticString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AntiSpoof == nil {
		var v bool = false
		t.AntiSpoof = &v
	}
	if t.CallingLineId == nil {
		var v bool = false
		t.CallingLineId = &v
	}
	t.Encode.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode represents the /nokia-conf/configure/groups/group/application-assurance/group/http-enrich/field/encode YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode struct {
	CertProfile *string                                                                                  `path:"cert-profile" module:"nokia-conf"`
	Key         *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) IsYANGGoStruct() {
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) GetOrCreateKey() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key{}
	return t.Key
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) GetKey() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key represents the /nokia-conf/configure/groups/group/application-assurance/group/http-enrich/field/encode/key YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key struct {
	Type  E_NokiaTypesApplicationAssurance_HttpFieldEncoding `path:"type" module:"nokia-conf"`
	Value *string                                            `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) GetType() E_NokiaTypesApplicationAssurance_HttpFieldEncoding {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment represents the /nokia-conf/configure/groups/group/application-assurance/group/http-enrich/rat-type-enrichment YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment struct {
	RatType map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType `path:"rat-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) IsYANGGoStruct() {
}

// NewRatType creates a new entry in the RatType list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) NewRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType)
	}

	key := RatTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RatType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RatType", key)
	}

	t.RatType[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType{
		RatTypeName: RatTypeName,
	}

	return t.RatType[key], nil
}

// RenameRatType renames an entry in the list RatType within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) RenameRatType(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union) error {
	if _, ok := t.RatType[newK]; ok {
		return fmt.Errorf("key %v already exists in RatType", newK)
	}

	e, ok := t.RatType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RatType", oldK)
	}
	e.RatTypeName = newK

	t.RatType[newK] = e
	delete(t.RatType, oldK)
	return nil
}

// GetOrCreateRatType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) GetOrCreateRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType {

	key := RatTypeName

	if v, ok := t.RatType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRatType(RatTypeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRatType got unexpected error: %v", err))
	}
	return v
}

// GetRatType retrieves the value with the specified key from
// the RatType map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) GetRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType {

	if t == nil {
		return nil
	}

	key := RatTypeName

	if lm, ok := t.RatType[key]; ok {
		return lm
	}
	return nil
}

// DeleteRatType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) DeleteRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union) {
	key := RatTypeName

	delete(t.RatType, key)
}

// AppendRatType appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType struct to the
// list RatType of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) AppendRatType(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) error {
	key := v.RatTypeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType)
	}

	if _, ok := t.RatType[key]; ok {
		return fmt.Errorf("duplicate key for list RatType %v", key)
	}

	t.RatType[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RatType {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType represents the /nokia-conf/configure/groups/group/application-assurance/group/http-enrich/rat-type-enrichment/rat-type YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType struct {
	RatString   *string                                                                                                            `path:"rat-string" module:"nokia-conf"`
	RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union `path:"rat-type-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) IsYANGGoStruct() {
}

// GetRatString retrieves the value of the leaf RatString from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatString is set, it can
// safely use t.GetRatString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) GetRatString() string {
	if t == nil || t.RatString == nil {
		return ""
	}
	return *t.RatString
}

// GetRatTypeName retrieves the value of the leaf RatTypeName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatTypeName is set, it can
// safely use t.GetRatTypeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatTypeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) GetRatTypeName() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType_RatTypeName_Union {
	if t == nil || t.RatTypeName == nil {
		return nil
	}
	return t.RatTypeName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rat-type-name": t.RatTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect represents the /nokia-conf/configure/groups/group/application-assurance/group/http-error-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                                                                                                                               `path:"admin-state" module:"nokia-conf"`
	Description           *string                                                                                                                                                                                                   `path:"description" module:"nokia-conf"`
	ErrorCode             map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode `path:"error-code" module:"nokia-conf"`
	HttpErrorRedirectName *string                                                                                                                                                                                                   `path:"http-error-redirect-name" module:"nokia-conf"`
	HttpHost              *string                                                                                                                                                                                                   `path:"http-host" module:"nokia-conf"`
	ParticipantId         *string                                                                                                                                                                                                   `path:"participant-id" module:"nokia-conf"`
	Template              *uint32                                                                                                                                                                                                   `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) IsYANGGoStruct() {
}

// NewErrorCode creates a new entry in the ErrorCode list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) NewErrorCode(ErrorCodeValue NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode)
	}

	key := ErrorCodeValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ErrorCode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ErrorCode", key)
	}

	t.ErrorCode[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode{
		ErrorCodeValue: ErrorCodeValue,
	}

	return t.ErrorCode[key], nil
}

// RenameErrorCode renames an entry in the list ErrorCode within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) RenameErrorCode(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union) error {
	if _, ok := t.ErrorCode[newK]; ok {
		return fmt.Errorf("key %v already exists in ErrorCode", newK)
	}

	e, ok := t.ErrorCode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ErrorCode", oldK)
	}
	e.ErrorCodeValue = newK

	t.ErrorCode[newK] = e
	delete(t.ErrorCode, oldK)
	return nil
}

// GetOrCreateErrorCode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetOrCreateErrorCode(ErrorCodeValue NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode {

	key := ErrorCodeValue

	if v, ok := t.ErrorCode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewErrorCode(ErrorCodeValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateErrorCode got unexpected error: %v", err))
	}
	return v
}

// GetErrorCode retrieves the value with the specified key from
// the ErrorCode map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetErrorCode(ErrorCodeValue NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode {

	if t == nil {
		return nil
	}

	key := ErrorCodeValue

	if lm, ok := t.ErrorCode[key]; ok {
		return lm
	}
	return nil
}

// DeleteErrorCode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) DeleteErrorCode(ErrorCodeValue NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union) {
	key := ErrorCodeValue

	delete(t.ErrorCode, key)
}

// AppendErrorCode appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode struct to the
// list ErrorCode of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) AppendErrorCode(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) error {
	key := v.ErrorCodeValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode)
	}

	if _, ok := t.ErrorCode[key]; ok {
		return fmt.Errorf("duplicate key for list ErrorCode %v", key)
	}

	t.ErrorCode[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpErrorRedirectName retrieves the value of the leaf HttpErrorRedirectName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpErrorRedirectName is set, it can
// safely use t.GetHttpErrorRedirectName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpErrorRedirectName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetHttpErrorRedirectName() string {
	if t == nil || t.HttpErrorRedirectName == nil {
		return ""
	}
	return *t.HttpErrorRedirectName
}

// GetHttpHost retrieves the value of the leaf HttpHost from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpHost is set, it can
// safely use t.GetHttpHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetHttpHost() string {
	if t == nil || t.HttpHost == nil {
		return ""
	}
	return *t.HttpHost
}

// GetParticipantId retrieves the value of the leaf ParticipantId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParticipantId is set, it can
// safely use t.GetParticipantId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParticipantId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetParticipantId() string {
	if t == nil || t.ParticipantId == nil {
		return ""
	}
	return *t.ParticipantId
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) GetTemplate() uint32 {
	if t == nil || t.Template == nil {
		return 0
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.ErrorCode {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpErrorRedirectName == nil {
		return nil, fmt.Errorf("nil value for key HttpErrorRedirectName")
	}

	return map[string]interface{}{
		"http-error-redirect-name": *t.HttpErrorRedirectName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode represents the /nokia-conf/configure/groups/group/application-assurance/group/http-error-redirect/error-code YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode struct {
	CustomMessageSize *uint32                                                                                                      `path:"custom-message-size" module:"nokia-conf"`
	ErrorCodeValue    NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union `path:"error-code-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) IsYANGGoStruct() {
}

// GetCustomMessageSize retrieves the value of the leaf CustomMessageSize from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomMessageSize is set, it can
// safely use t.GetCustomMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomMessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) GetCustomMessageSize() uint32 {
	if t == nil || t.CustomMessageSize == nil {
		return 1024
	}
	return *t.CustomMessageSize
}

// GetErrorCodeValue retrieves the value of the leaf ErrorCodeValue from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorCodeValue is set, it can
// safely use t.GetErrorCodeValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorCodeValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) GetErrorCodeValue() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode_ErrorCodeValue_Union {
	if t == nil || t.ErrorCodeValue == nil {
		return nil
	}
	return t.ErrorCodeValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CustomMessageSize == nil {
		var v uint32 = 1024
		t.CustomMessageSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"error-code-value": t.ErrorCodeValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification represents the /nokia-conf/configure/groups/group/application-assurance/group/http-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                 `path:"admin-state" module:"nokia-conf"`
	Description          *string                                                                                     `path:"description" module:"nokia-conf"`
	HttpNotificationName *string                                                                                     `path:"http-notification-name" module:"nokia-conf"`
	Interval             NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification_Interval_Union `path:"interval" module:"nokia-conf"`
	ScriptUrl            *string                                                                                     `path:"script-url" module:"nokia-conf"`
	Template             *uint32                                                                                     `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpNotificationName retrieves the value of the leaf HttpNotificationName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpNotificationName is set, it can
// safely use t.GetHttpNotificationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpNotificationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) GetHttpNotificationName() string {
	if t == nil || t.HttpNotificationName == nil {
		return ""
	}
	return *t.HttpNotificationName
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) GetInterval() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification_Interval_Union {
	if t == nil || t.Interval == nil {
		return NokiaTypesApplicationAssurance_HttpNotifInterval_Enum_one_time
	}
	return t.Interval
}

// GetScriptUrl retrieves the value of the leaf ScriptUrl from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScriptUrl is set, it can
// safely use t.GetScriptUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScriptUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) GetScriptUrl() string {
	if t == nil || t.ScriptUrl == nil {
		return ""
	}
	return *t.ScriptUrl
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) GetTemplate() uint32 {
	if t == nil || t.Template == nil {
		return 0
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interval == nil {
		t.Interval = NokiaTypesApplicationAssurance_HttpNotifInterval_Enum_one_time
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpNotificationName == nil {
		return nil, fmt.Errorf("nil value for key HttpNotificationName")
	}

	return map[string]interface{}{
		"http-notification-name": *t.HttpNotificationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect represents the /nokia-conf/configure/groups/group/application-assurance/group/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect struct {
	AdminState       E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	CaptiveRedirect  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect `path:"captive-redirect" module:"nokia-conf"`
	Description      *string                                                                                   `path:"description" module:"nokia-conf"`
	HttpRedirectName *string                                                                                   `path:"http-redirect-name" module:"nokia-conf"`
	RedirectHttps    *bool                                                                                     `path:"redirect-https" module:"nokia-conf"`
	RedirectUrl      *string                                                                                   `path:"redirect-url" module:"nokia-conf"`
	TcpClientReset   *bool                                                                                     `path:"tcp-client-reset" module:"nokia-conf"`
	Template         *uint32                                                                                   `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) IsYANGGoStruct() {}

// GetOrCreateCaptiveRedirect retrieves the value of the CaptiveRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetOrCreateCaptiveRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect {
	if t.CaptiveRedirect != nil {
		return t.CaptiveRedirect
	}
	t.CaptiveRedirect = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect{}
	return t.CaptiveRedirect
}

// GetCaptiveRedirect returns the value of the CaptiveRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect. If the receiver or the field CaptiveRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetCaptiveRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect {
	if t != nil && t.CaptiveRedirect != nil {
		return t.CaptiveRedirect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpRedirectName retrieves the value of the leaf HttpRedirectName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirectName is set, it can
// safely use t.GetHttpRedirectName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirectName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetHttpRedirectName() string {
	if t == nil || t.HttpRedirectName == nil {
		return ""
	}
	return *t.HttpRedirectName
}

// GetRedirectHttps retrieves the value of the leaf RedirectHttps from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectHttps is set, it can
// safely use t.GetRedirectHttps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectHttps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetRedirectHttps() bool {
	if t == nil || t.RedirectHttps == nil {
		return false
	}
	return *t.RedirectHttps
}

// GetRedirectUrl retrieves the value of the leaf RedirectUrl from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectUrl is set, it can
// safely use t.GetRedirectUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetRedirectUrl() string {
	if t == nil || t.RedirectUrl == nil {
		return ""
	}
	return *t.RedirectUrl
}

// GetTcpClientReset retrieves the value of the leaf TcpClientReset from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpClientReset is set, it can
// safely use t.GetTcpClientReset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpClientReset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetTcpClientReset() bool {
	if t == nil || t.TcpClientReset == nil {
		return false
	}
	return *t.TcpClientReset
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) GetTemplate() uint32 {
	if t == nil || t.Template == nil {
		return 0
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RedirectHttps == nil {
		var v bool = false
		t.RedirectHttps = &v
	}
	if t.TcpClientReset == nil {
		var v bool = false
		t.TcpClientReset = &v
	}
	t.CaptiveRedirect.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpRedirectName == nil {
		return nil, fmt.Errorf("nil value for key HttpRedirectName")
	}

	return map[string]interface{}{
		"http-redirect-name": *t.HttpRedirectName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect represents the /nokia-conf/configure/groups/group/application-assurance/group/http-redirect/captive-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect struct {
	VlanId *int32 `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) IsYANGGoStruct() {
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition represents the /nokia-conf/configure/groups/group/application-assurance/group/partition YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct {
	AaPartitionId            NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union                                                                                                                     `path:"aa-partition-id" module:"nokia-conf"`
	AaSubCongestionDetection *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection                                                                                                               `path:"aa-sub-congestion-detection" module:"nokia-conf" yangPresence:"true"`
	AaSubRemote              *bool                                                                                                                                                                                                         `path:"aa-sub-remote" module:"nokia-conf"`
	AccessNetworkLocation    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation                                                                                                                  `path:"access-network-location" module:"nokia-conf"`
	AqpInitialLookup         *bool                                                                                                                                                                                                         `path:"aqp-initial-lookup" module:"nokia-conf"`
	Cflowd                   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd                                                                                                                                 `path:"cflowd" module:"nokia-conf"`
	Description              *string                                                                                                                                                                                                       `path:"description" module:"nokia-conf"`
	EventLog                 map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog                                                                                                                    `path:"event-log" module:"nokia-conf"`
	Gtp                      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp                                                                                                                                    `path:"gtp" module:"nokia-conf" yangPresence:"true"`
	HttpMatchAllRequests     *bool                                                                                                                                                                                                         `path:"http-match-all-requests" module:"nokia-conf"`
	HttpXOnlineHost          *bool                                                                                                                                                                                                         `path:"http-x-online-host" module:"nokia-conf"`
	IpPrefixList             map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList                                                                                                                `path:"ip-prefix-list" module:"nokia-conf"`
	Policy                   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy                                                                                                                                 `path:"policy" module:"nokia-conf" yangPresence:"true"`
	PolicyOverride           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride                                                                                                                         `path:"policy-override" module:"nokia-conf"`
	PortList                 map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList                                                                                                                    `path:"port-list" module:"nokia-conf"`
	SctpFilter               map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter                                                                                                                  `path:"sctp-filter" module:"nokia-conf"`
	SessionFilter            map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter                                                                                                               `path:"session-filter" module:"nokia-conf"`
	ShallowInspection        *bool                                                                                                                                                                                                         `path:"shallow-inspection" module:"nokia-conf"`
	Statistics               *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics                                                                                                                             `path:"statistics" module:"nokia-conf"`
	TcpValidate              map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate                                                                                                                 `path:"tcp-validate" module:"nokia-conf"`
	TetheringDetection       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection                                                                                                                     `path:"tethering-detection" module:"nokia-conf" yangPresence:"true"`
	ThresholdCrossingAlert   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert                                                                                                                 `path:"threshold-crossing-alert" module:"nokia-conf"`
	TransitIpPolicy          map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy             `path:"transit-ip-policy" module:"nokia-conf"`
	TransitPrefixPolicy      map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy `path:"transit-prefix-policy" module:"nokia-conf"`
	Wap1X                    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X                                                                                                                                  `path:"wap1x" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) IsYANGGoStruct() {}

// NewEventLog creates a new entry in the EventLog list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewEventLog(EventLogName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EventLog == nil {
		t.EventLog = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog)
	}

	key := EventLogName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EventLog[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EventLog", key)
	}

	t.EventLog[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog{
		EventLogName: &EventLogName,
	}

	return t.EventLog[key], nil
}

// RenameEventLog renames an entry in the list EventLog within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenameEventLog(oldK, newK string) error {
	if _, ok := t.EventLog[newK]; ok {
		return fmt.Errorf("key %v already exists in EventLog", newK)
	}

	e, ok := t.EventLog[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EventLog", oldK)
	}
	e.EventLogName = &newK

	t.EventLog[newK] = e
	delete(t.EventLog, oldK)
	return nil
}

// GetOrCreateEventLog retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateEventLog(EventLogName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog {

	key := EventLogName

	if v, ok := t.EventLog[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEventLog(EventLogName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEventLog got unexpected error: %v", err))
	}
	return v
}

// GetEventLog retrieves the value with the specified key from
// the EventLog map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetEventLog(EventLogName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog {

	if t == nil {
		return nil
	}

	key := EventLogName

	if lm, ok := t.EventLog[key]; ok {
		return lm
	}
	return nil
}

// DeleteEventLog deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeleteEventLog(EventLogName string) {
	key := EventLogName

	delete(t.EventLog, key)
}

// AppendEventLog appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog struct to the
// list EventLog of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendEventLog(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) error {
	if v.EventLogName == nil {
		return fmt.Errorf("invalid nil key received for EventLogName")
	}

	key := *v.EventLogName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EventLog == nil {
		t.EventLog = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog)
	}

	if _, ok := t.EventLog[key]; ok {
		return fmt.Errorf("duplicate key for list EventLog %v", key)
	}

	t.EventLog[key] = v
	return nil
}

// NewIpPrefixList creates a new entry in the IpPrefixList list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewIpPrefixList(IpPrefixListName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList)
	}

	key := IpPrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpPrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpPrefixList", key)
	}

	t.IpPrefixList[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList{
		IpPrefixListName: &IpPrefixListName,
	}

	return t.IpPrefixList[key], nil
}

// RenameIpPrefixList renames an entry in the list IpPrefixList within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenameIpPrefixList(oldK, newK string) error {
	if _, ok := t.IpPrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in IpPrefixList", newK)
	}

	e, ok := t.IpPrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpPrefixList", oldK)
	}
	e.IpPrefixListName = &newK

	t.IpPrefixList[newK] = e
	delete(t.IpPrefixList, oldK)
	return nil
}

// GetOrCreateIpPrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateIpPrefixList(IpPrefixListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList {

	key := IpPrefixListName

	if v, ok := t.IpPrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpPrefixList(IpPrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpPrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpPrefixList retrieves the value with the specified key from
// the IpPrefixList map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetIpPrefixList(IpPrefixListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList {

	if t == nil {
		return nil
	}

	key := IpPrefixListName

	if lm, ok := t.IpPrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpPrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeleteIpPrefixList(IpPrefixListName string) {
	key := IpPrefixListName

	delete(t.IpPrefixList, key)
}

// AppendIpPrefixList appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList struct to the
// list IpPrefixList of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendIpPrefixList(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) error {
	if v.IpPrefixListName == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixListName")
	}

	key := *v.IpPrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList)
	}

	if _, ok := t.IpPrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list IpPrefixList %v", key)
	}

	t.IpPrefixList[key] = v
	return nil
}

// NewPortList creates a new entry in the PortList list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewPortList(PortListName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList)
	}

	key := PortListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortList", key)
	}

	t.PortList[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList{
		PortListName: &PortListName,
	}

	return t.PortList[key], nil
}

// RenamePortList renames an entry in the list PortList within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenamePortList(oldK, newK string) error {
	if _, ok := t.PortList[newK]; ok {
		return fmt.Errorf("key %v already exists in PortList", newK)
	}

	e, ok := t.PortList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortList", oldK)
	}
	e.PortListName = &newK

	t.PortList[newK] = e
	delete(t.PortList, oldK)
	return nil
}

// GetOrCreatePortList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreatePortList(PortListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList {

	key := PortListName

	if v, ok := t.PortList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortList(PortListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortList got unexpected error: %v", err))
	}
	return v
}

// GetPortList retrieves the value with the specified key from
// the PortList map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetPortList(PortListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList {

	if t == nil {
		return nil
	}

	key := PortListName

	if lm, ok := t.PortList[key]; ok {
		return lm
	}
	return nil
}

// DeletePortList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeletePortList(PortListName string) {
	key := PortListName

	delete(t.PortList, key)
}

// AppendPortList appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList struct to the
// list PortList of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendPortList(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) error {
	if v.PortListName == nil {
		return fmt.Errorf("invalid nil key received for PortListName")
	}

	key := *v.PortListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList)
	}

	if _, ok := t.PortList[key]; ok {
		return fmt.Errorf("duplicate key for list PortList %v", key)
	}

	t.PortList[key] = v
	return nil
}

// NewSctpFilter creates a new entry in the SctpFilter list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewSctpFilter(SctpFilterName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter)
	}

	key := SctpFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SctpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SctpFilter", key)
	}

	t.SctpFilter[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter{
		SctpFilterName: &SctpFilterName,
	}

	return t.SctpFilter[key], nil
}

// RenameSctpFilter renames an entry in the list SctpFilter within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenameSctpFilter(oldK, newK string) error {
	if _, ok := t.SctpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SctpFilter", newK)
	}

	e, ok := t.SctpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SctpFilter", oldK)
	}
	e.SctpFilterName = &newK

	t.SctpFilter[newK] = e
	delete(t.SctpFilter, oldK)
	return nil
}

// GetOrCreateSctpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateSctpFilter(SctpFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter {

	key := SctpFilterName

	if v, ok := t.SctpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSctpFilter(SctpFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSctpFilter got unexpected error: %v", err))
	}
	return v
}

// GetSctpFilter retrieves the value with the specified key from
// the SctpFilter map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetSctpFilter(SctpFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter {

	if t == nil {
		return nil
	}

	key := SctpFilterName

	if lm, ok := t.SctpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSctpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeleteSctpFilter(SctpFilterName string) {
	key := SctpFilterName

	delete(t.SctpFilter, key)
}

// AppendSctpFilter appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter struct to the
// list SctpFilter of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendSctpFilter(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) error {
	if v.SctpFilterName == nil {
		return fmt.Errorf("invalid nil key received for SctpFilterName")
	}

	key := *v.SctpFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter)
	}

	if _, ok := t.SctpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SctpFilter %v", key)
	}

	t.SctpFilter[key] = v
	return nil
}

// NewSessionFilter creates a new entry in the SessionFilter list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewSessionFilter(SessionFilterName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter)
	}

	key := SessionFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SessionFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SessionFilter", key)
	}

	t.SessionFilter[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter{
		SessionFilterName: &SessionFilterName,
	}

	return t.SessionFilter[key], nil
}

// RenameSessionFilter renames an entry in the list SessionFilter within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenameSessionFilter(oldK, newK string) error {
	if _, ok := t.SessionFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SessionFilter", newK)
	}

	e, ok := t.SessionFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SessionFilter", oldK)
	}
	e.SessionFilterName = &newK

	t.SessionFilter[newK] = e
	delete(t.SessionFilter, oldK)
	return nil
}

// GetOrCreateSessionFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateSessionFilter(SessionFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter {

	key := SessionFilterName

	if v, ok := t.SessionFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSessionFilter(SessionFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSessionFilter got unexpected error: %v", err))
	}
	return v
}

// GetSessionFilter retrieves the value with the specified key from
// the SessionFilter map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetSessionFilter(SessionFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter {

	if t == nil {
		return nil
	}

	key := SessionFilterName

	if lm, ok := t.SessionFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSessionFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeleteSessionFilter(SessionFilterName string) {
	key := SessionFilterName

	delete(t.SessionFilter, key)
}

// AppendSessionFilter appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter struct to the
// list SessionFilter of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendSessionFilter(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) error {
	if v.SessionFilterName == nil {
		return fmt.Errorf("invalid nil key received for SessionFilterName")
	}

	key := *v.SessionFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter)
	}

	if _, ok := t.SessionFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SessionFilter %v", key)
	}

	t.SessionFilter[key] = v
	return nil
}

// NewTcpValidate creates a new entry in the TcpValidate list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewTcpValidate(TcpValidateName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate)
	}

	key := TcpValidateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TcpValidate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TcpValidate", key)
	}

	t.TcpValidate[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate{
		TcpValidateName: &TcpValidateName,
	}

	return t.TcpValidate[key], nil
}

// RenameTcpValidate renames an entry in the list TcpValidate within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenameTcpValidate(oldK, newK string) error {
	if _, ok := t.TcpValidate[newK]; ok {
		return fmt.Errorf("key %v already exists in TcpValidate", newK)
	}

	e, ok := t.TcpValidate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TcpValidate", oldK)
	}
	e.TcpValidateName = &newK

	t.TcpValidate[newK] = e
	delete(t.TcpValidate, oldK)
	return nil
}

// GetOrCreateTcpValidate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateTcpValidate(TcpValidateName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate {

	key := TcpValidateName

	if v, ok := t.TcpValidate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTcpValidate(TcpValidateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTcpValidate got unexpected error: %v", err))
	}
	return v
}

// GetTcpValidate retrieves the value with the specified key from
// the TcpValidate map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetTcpValidate(TcpValidateName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate {

	if t == nil {
		return nil
	}

	key := TcpValidateName

	if lm, ok := t.TcpValidate[key]; ok {
		return lm
	}
	return nil
}

// DeleteTcpValidate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeleteTcpValidate(TcpValidateName string) {
	key := TcpValidateName

	delete(t.TcpValidate, key)
}

// AppendTcpValidate appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate struct to the
// list TcpValidate of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendTcpValidate(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) error {
	if v.TcpValidateName == nil {
		return fmt.Errorf("invalid nil key received for TcpValidateName")
	}

	key := *v.TcpValidateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate)
	}

	if _, ok := t.TcpValidate[key]; ok {
		return fmt.Errorf("duplicate key for list TcpValidate %v", key)
	}

	t.TcpValidate[key] = v
	return nil
}

// NewTransitIpPolicy creates a new entry in the TransitIpPolicy list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewTransitIpPolicy(IpPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitIpPolicy == nil {
		t.TransitIpPolicy = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy)
	}

	key := IpPolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TransitIpPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TransitIpPolicy", key)
	}

	t.TransitIpPolicy[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy{
		IpPolicyId: IpPolicyId,
	}

	return t.TransitIpPolicy[key], nil
}

// RenameTransitIpPolicy renames an entry in the list TransitIpPolicy within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenameTransitIpPolicy(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union) error {
	if _, ok := t.TransitIpPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in TransitIpPolicy", newK)
	}

	e, ok := t.TransitIpPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TransitIpPolicy", oldK)
	}
	e.IpPolicyId = newK

	t.TransitIpPolicy[newK] = e
	delete(t.TransitIpPolicy, oldK)
	return nil
}

// GetOrCreateTransitIpPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateTransitIpPolicy(IpPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy {

	key := IpPolicyId

	if v, ok := t.TransitIpPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransitIpPolicy(IpPolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransitIpPolicy got unexpected error: %v", err))
	}
	return v
}

// GetTransitIpPolicy retrieves the value with the specified key from
// the TransitIpPolicy map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetTransitIpPolicy(IpPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy {

	if t == nil {
		return nil
	}

	key := IpPolicyId

	if lm, ok := t.TransitIpPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransitIpPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeleteTransitIpPolicy(IpPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union) {
	key := IpPolicyId

	delete(t.TransitIpPolicy, key)
}

// AppendTransitIpPolicy appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy struct to the
// list TransitIpPolicy of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendTransitIpPolicy(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) error {
	key := v.IpPolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitIpPolicy == nil {
		t.TransitIpPolicy = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy)
	}

	if _, ok := t.TransitIpPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list TransitIpPolicy %v", key)
	}

	t.TransitIpPolicy[key] = v
	return nil
}

// NewTransitPrefixPolicy creates a new entry in the TransitPrefixPolicy list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) NewTransitPrefixPolicy(PrefixPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitPrefixPolicy == nil {
		t.TransitPrefixPolicy = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy)
	}

	key := PrefixPolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TransitPrefixPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TransitPrefixPolicy", key)
	}

	t.TransitPrefixPolicy[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy{
		PrefixPolicyId: PrefixPolicyId,
	}

	return t.TransitPrefixPolicy[key], nil
}

// RenameTransitPrefixPolicy renames an entry in the list TransitPrefixPolicy within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) RenameTransitPrefixPolicy(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union) error {
	if _, ok := t.TransitPrefixPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in TransitPrefixPolicy", newK)
	}

	e, ok := t.TransitPrefixPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TransitPrefixPolicy", oldK)
	}
	e.PrefixPolicyId = newK

	t.TransitPrefixPolicy[newK] = e
	delete(t.TransitPrefixPolicy, oldK)
	return nil
}

// GetOrCreateTransitPrefixPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateTransitPrefixPolicy(PrefixPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy {

	key := PrefixPolicyId

	if v, ok := t.TransitPrefixPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransitPrefixPolicy(PrefixPolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransitPrefixPolicy got unexpected error: %v", err))
	}
	return v
}

// GetTransitPrefixPolicy retrieves the value with the specified key from
// the TransitPrefixPolicy map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetTransitPrefixPolicy(PrefixPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy {

	if t == nil {
		return nil
	}

	key := PrefixPolicyId

	if lm, ok := t.TransitPrefixPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransitPrefixPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) DeleteTransitPrefixPolicy(PrefixPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union) {
	key := PrefixPolicyId

	delete(t.TransitPrefixPolicy, key)
}

// AppendTransitPrefixPolicy appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct to the
// list TransitPrefixPolicy of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) AppendTransitPrefixPolicy(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) error {
	key := v.PrefixPolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitPrefixPolicy == nil {
		t.TransitPrefixPolicy = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy)
	}

	if _, ok := t.TransitPrefixPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list TransitPrefixPolicy %v", key)
	}

	t.TransitPrefixPolicy[key] = v
	return nil
}

// GetOrCreateAaSubCongestionDetection retrieves the value of the AaSubCongestionDetection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateAaSubCongestionDetection() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection {
	if t.AaSubCongestionDetection != nil {
		return t.AaSubCongestionDetection
	}
	t.AaSubCongestionDetection = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection{}
	return t.AaSubCongestionDetection
}

// GetOrCreateAccessNetworkLocation retrieves the value of the AccessNetworkLocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateAccessNetworkLocation() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation {
	if t.AccessNetworkLocation != nil {
		return t.AccessNetworkLocation
	}
	t.AccessNetworkLocation = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation{}
	return t.AccessNetworkLocation
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateCflowd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd{}
	return t.Cflowd
}

// GetOrCreateGtp retrieves the value of the Gtp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateGtp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp {
	if t.Gtp != nil {
		return t.Gtp
	}
	t.Gtp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp{}
	return t.Gtp
}

// GetOrCreatePolicy retrieves the value of the Policy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreatePolicy() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy {
	if t.Policy != nil {
		return t.Policy
	}
	t.Policy = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy{}
	return t.Policy
}

// GetOrCreatePolicyOverride retrieves the value of the PolicyOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreatePolicyOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride {
	if t.PolicyOverride != nil {
		return t.PolicyOverride
	}
	t.PolicyOverride = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride{}
	return t.PolicyOverride
}

// GetOrCreateStatistics retrieves the value of the Statistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateStatistics() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics {
	if t.Statistics != nil {
		return t.Statistics
	}
	t.Statistics = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics{}
	return t.Statistics
}

// GetOrCreateTetheringDetection retrieves the value of the TetheringDetection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateTetheringDetection() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection {
	if t.TetheringDetection != nil {
		return t.TetheringDetection
	}
	t.TetheringDetection = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection{}
	return t.TetheringDetection
}

// GetOrCreateThresholdCrossingAlert retrieves the value of the ThresholdCrossingAlert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateThresholdCrossingAlert() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert {
	if t.ThresholdCrossingAlert != nil {
		return t.ThresholdCrossingAlert
	}
	t.ThresholdCrossingAlert = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert{}
	return t.ThresholdCrossingAlert
}

// GetOrCreateWap1X retrieves the value of the Wap1X field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetOrCreateWap1X() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X {
	if t.Wap1X != nil {
		return t.Wap1X
	}
	t.Wap1X = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X{}
	return t.Wap1X
}

// GetAaSubCongestionDetection returns the value of the AaSubCongestionDetection struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field AaSubCongestionDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetAaSubCongestionDetection() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection {
	if t != nil && t.AaSubCongestionDetection != nil {
		return t.AaSubCongestionDetection
	}
	return nil
}

// GetAccessNetworkLocation returns the value of the AccessNetworkLocation struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field AccessNetworkLocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetAccessNetworkLocation() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation {
	if t != nil && t.AccessNetworkLocation != nil {
		return t.AccessNetworkLocation
	}
	return nil
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetCflowd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetGtp returns the value of the Gtp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field Gtp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetGtp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp {
	if t != nil && t.Gtp != nil {
		return t.Gtp
	}
	return nil
}

// GetPolicy returns the value of the Policy struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field Policy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetPolicy() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy {
	if t != nil && t.Policy != nil {
		return t.Policy
	}
	return nil
}

// GetPolicyOverride returns the value of the PolicyOverride struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field PolicyOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetPolicyOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride {
	if t != nil && t.PolicyOverride != nil {
		return t.PolicyOverride
	}
	return nil
}

// GetStatistics returns the value of the Statistics struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field Statistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetStatistics() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics {
	if t != nil && t.Statistics != nil {
		return t.Statistics
	}
	return nil
}

// GetTetheringDetection returns the value of the TetheringDetection struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field TetheringDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetTetheringDetection() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection {
	if t != nil && t.TetheringDetection != nil {
		return t.TetheringDetection
	}
	return nil
}

// GetThresholdCrossingAlert returns the value of the ThresholdCrossingAlert struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field ThresholdCrossingAlert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetThresholdCrossingAlert() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert {
	if t != nil && t.ThresholdCrossingAlert != nil {
		return t.ThresholdCrossingAlert
	}
	return nil
}

// GetWap1X returns the value of the Wap1X struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition. If the receiver or the field Wap1X is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetWap1X() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X {
	if t != nil && t.Wap1X != nil {
		return t.Wap1X
	}
	return nil
}

// GetAaPartitionId retrieves the value of the leaf AaPartitionId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaPartitionId is set, it can
// safely use t.GetAaPartitionId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaPartitionId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetAaPartitionId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaPartitionId_Union {
	if t == nil || t.AaPartitionId == nil {
		return nil
	}
	return t.AaPartitionId
}

// GetAaSubRemote retrieves the value of the leaf AaSubRemote from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubRemote is set, it can
// safely use t.GetAaSubRemote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubRemote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetAaSubRemote() bool {
	if t == nil || t.AaSubRemote == nil {
		return false
	}
	return *t.AaSubRemote
}

// GetAqpInitialLookup retrieves the value of the leaf AqpInitialLookup from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AqpInitialLookup is set, it can
// safely use t.GetAqpInitialLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AqpInitialLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetAqpInitialLookup() bool {
	if t == nil || t.AqpInitialLookup == nil {
		return false
	}
	return *t.AqpInitialLookup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpMatchAllRequests retrieves the value of the leaf HttpMatchAllRequests from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpMatchAllRequests is set, it can
// safely use t.GetHttpMatchAllRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpMatchAllRequests == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetHttpMatchAllRequests() bool {
	if t == nil || t.HttpMatchAllRequests == nil {
		return false
	}
	return *t.HttpMatchAllRequests
}

// GetHttpXOnlineHost retrieves the value of the leaf HttpXOnlineHost from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpXOnlineHost is set, it can
// safely use t.GetHttpXOnlineHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpXOnlineHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetHttpXOnlineHost() bool {
	if t == nil || t.HttpXOnlineHost == nil {
		return false
	}
	return *t.HttpXOnlineHost
}

// GetShallowInspection retrieves the value of the leaf ShallowInspection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShallowInspection is set, it can
// safely use t.GetShallowInspection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShallowInspection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) GetShallowInspection() bool {
	if t == nil || t.ShallowInspection == nil {
		return false
	}
	return *t.ShallowInspection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaSubRemote == nil {
		var v bool = false
		t.AaSubRemote = &v
	}
	if t.AqpInitialLookup == nil {
		var v bool = false
		t.AqpInitialLookup = &v
	}
	if t.HttpMatchAllRequests == nil {
		var v bool = false
		t.HttpMatchAllRequests = &v
	}
	if t.HttpXOnlineHost == nil {
		var v bool = false
		t.HttpXOnlineHost = &v
	}
	if t.ShallowInspection == nil {
		var v bool = false
		t.ShallowInspection = &v
	}
	t.AaSubCongestionDetection.PopulateDefaults()
	t.AccessNetworkLocation.PopulateDefaults()
	t.Cflowd.PopulateDefaults()
	t.Gtp.PopulateDefaults()
	t.Policy.PopulateDefaults()
	t.PolicyOverride.PopulateDefaults()
	t.Statistics.PopulateDefaults()
	t.TetheringDetection.PopulateDefaults()
	t.ThresholdCrossingAlert.PopulateDefaults()
	t.Wap1X.PopulateDefaults()
	for _, e := range t.EventLog {
		e.PopulateDefaults()
	}
	for _, e := range t.IpPrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.PortList {
		e.PopulateDefaults()
	}
	for _, e := range t.SctpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.SessionFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.TcpValidate {
		e.PopulateDefaults()
	}
	for _, e := range t.TransitIpPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.TransitPrefixPolicy {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"aa-partition-id": t.AaPartitionId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/aa-sub-congestion-detection YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                                                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	RatType               map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType `path:"rat-type" module:"nokia-conf"`
	RttThreshold          NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RttThreshold_Union                                                                                                                    `path:"rtt-threshold" module:"nokia-conf"`
	RttThresholdTolerance *uint32                                                                                                                                                                                                                              `path:"rtt-threshold-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) IsYANGGoStruct() {
}

// NewRatType creates a new entry in the RatType list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) NewRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType)
	}

	key := RatTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RatType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RatType", key)
	}

	t.RatType[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType{
		RatTypeName: RatTypeName,
	}

	return t.RatType[key], nil
}

// RenameRatType renames an entry in the list RatType within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) RenameRatType(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union) error {
	if _, ok := t.RatType[newK]; ok {
		return fmt.Errorf("key %v already exists in RatType", newK)
	}

	e, ok := t.RatType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RatType", oldK)
	}
	e.RatTypeName = newK

	t.RatType[newK] = e
	delete(t.RatType, oldK)
	return nil
}

// GetOrCreateRatType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetOrCreateRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType {

	key := RatTypeName

	if v, ok := t.RatType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRatType(RatTypeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRatType got unexpected error: %v", err))
	}
	return v
}

// GetRatType retrieves the value with the specified key from
// the RatType map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType {

	if t == nil {
		return nil
	}

	key := RatTypeName

	if lm, ok := t.RatType[key]; ok {
		return lm
	}
	return nil
}

// DeleteRatType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) DeleteRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union) {
	key := RatTypeName

	delete(t.RatType, key)
}

// AppendRatType appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType struct to the
// list RatType of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) AppendRatType(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) error {
	key := v.RatTypeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType)
	}

	if _, ok := t.RatType[key]; ok {
		return fmt.Errorf("duplicate key for list RatType %v", key)
	}

	t.RatType[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetRttThreshold() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return UnionUint32(173)
	}
	return t.RttThreshold
}

// GetRttThresholdTolerance retrieves the value of the leaf RttThresholdTolerance from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThresholdTolerance is set, it can
// safely use t.GetRttThresholdTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThresholdTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetRttThresholdTolerance() uint32 {
	if t == nil || t.RttThresholdTolerance == nil {
		return 50
	}
	return *t.RttThresholdTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RttThreshold == nil {
		t.RttThreshold = UnionUint32(173)
	}
	if t.RttThresholdTolerance == nil {
		var v uint32 = 50
		t.RttThresholdTolerance = &v
	}
	for _, e := range t.RatType {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/aa-sub-congestion-detection/rat-type YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType struct {
	RatTypeName  NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union  `path:"rat-type-name" module:"nokia-conf"`
	RttThreshold NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RttThreshold_Union `path:"rtt-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) IsYANGGoStruct() {
}

// GetRatTypeName retrieves the value of the leaf RatTypeName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatTypeName is set, it can
// safely use t.GetRatTypeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatTypeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) GetRatTypeName() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RatTypeName_Union {
	if t == nil || t.RatTypeName == nil {
		return nil
	}
	return t.RatTypeName
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) GetRttThreshold() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return nil
	}
	return t.RttThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rat-type-name": t.RatTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/access-network-location YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation struct {
	Source map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) NewSource(SourceType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source)
	}

	key := SourceType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source{
		SourceType: SourceType,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) RenameSource(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceType = newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) GetOrCreateSource(SourceType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source {

	key := SourceType

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) GetSource(SourceType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source {

	if t == nil {
		return nil
	}

	key := SourceType

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) DeleteSource(SourceType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union) {
	key := SourceType

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) AppendSource(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) error {
	key := v.SourceType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/access-network-location/source YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct {
	RatType               map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType `path:"rat-type" module:"nokia-conf"`
	RttThreshold          NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RttThreshold_Union                                                                                                                        `path:"rtt-threshold" module:"nokia-conf"`
	RttThresholdTolerance *uint32                                                                                                                                                                                                                                      `path:"rtt-threshold-tolerance" module:"nokia-conf"`
	SourceLevel           E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel                                                                                                                             `path:"source-level" module:"nokia-conf"`
	SourceType            NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union                                                                                                                          `path:"source-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) IsYANGGoStruct() {
}

// NewRatType creates a new entry in the RatType list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) NewRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType)
	}

	key := RatTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RatType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RatType", key)
	}

	t.RatType[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType{
		RatTypeName: RatTypeName,
	}

	return t.RatType[key], nil
}

// RenameRatType renames an entry in the list RatType within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) RenameRatType(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union) error {
	if _, ok := t.RatType[newK]; ok {
		return fmt.Errorf("key %v already exists in RatType", newK)
	}

	e, ok := t.RatType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RatType", oldK)
	}
	e.RatTypeName = newK

	t.RatType[newK] = e
	delete(t.RatType, oldK)
	return nil
}

// GetOrCreateRatType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetOrCreateRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType {

	key := RatTypeName

	if v, ok := t.RatType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRatType(RatTypeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRatType got unexpected error: %v", err))
	}
	return v
}

// GetRatType retrieves the value with the specified key from
// the RatType map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType {

	if t == nil {
		return nil
	}

	key := RatTypeName

	if lm, ok := t.RatType[key]; ok {
		return lm
	}
	return nil
}

// DeleteRatType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) DeleteRatType(RatTypeName NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union) {
	key := RatTypeName

	delete(t.RatType, key)
}

// AppendRatType appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType struct to the
// list RatType of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) AppendRatType(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) error {
	key := v.RatTypeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType)
	}

	if _, ok := t.RatType[key]; ok {
		return fmt.Errorf("duplicate key for list RatType %v", key)
	}

	t.RatType[key] = v
	return nil
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetRttThreshold() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return UnionUint32(173)
	}
	return t.RttThreshold
}

// GetRttThresholdTolerance retrieves the value of the leaf RttThresholdTolerance from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThresholdTolerance is set, it can
// safely use t.GetRttThresholdTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThresholdTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetRttThresholdTolerance() uint32 {
	if t == nil || t.RttThresholdTolerance == nil {
		return 50
	}
	return *t.RttThresholdTolerance
}

// GetSourceLevel retrieves the value of the leaf SourceLevel from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceLevel is set, it can
// safely use t.GetSourceLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetSourceLevel() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel {
	if t == nil || t.SourceLevel == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel_cell
	}
	return t.SourceLevel
}

// GetSourceType retrieves the value of the leaf SourceType from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceType is set, it can
// safely use t.GetSourceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetSourceType() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType_Union {
	if t == nil || t.SourceType == nil {
		return nil
	}
	return t.SourceType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RttThreshold == nil {
		t.RttThreshold = UnionUint32(173)
	}
	if t.RttThresholdTolerance == nil {
		var v uint32 = 50
		t.RttThresholdTolerance = &v
	}
	if t.SourceLevel == 0 {
		t.SourceLevel = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel_cell
	}
	for _, e := range t.RatType {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"source-type": t.SourceType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/access-network-location/source/rat-type YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType struct {
	RatTypeName  NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union  `path:"rat-type-name" module:"nokia-conf"`
	RttThreshold NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RttThreshold_Union `path:"rtt-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) IsYANGGoStruct() {
}

// GetRatTypeName retrieves the value of the leaf RatTypeName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatTypeName is set, it can
// safely use t.GetRatTypeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatTypeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) GetRatTypeName() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RatTypeName_Union {
	if t == nil || t.RatTypeName == nil {
		return nil
	}
	return t.RatTypeName
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) GetRttThreshold() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return nil
	}
	return t.RttThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rat-type-name": t.RatTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/cflowd YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd struct {
	ExportType map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType `path:"export-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) IsYANGGoStruct() {
}

// NewExportType creates a new entry in the ExportType list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) NewExportType(FlowExportType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportType == nil {
		t.ExportType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType)
	}

	key := FlowExportType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExportType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExportType", key)
	}

	t.ExportType[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType{
		FlowExportType: FlowExportType,
	}

	return t.ExportType[key], nil
}

// RenameExportType renames an entry in the list ExportType within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) RenameExportType(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union) error {
	if _, ok := t.ExportType[newK]; ok {
		return fmt.Errorf("key %v already exists in ExportType", newK)
	}

	e, ok := t.ExportType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExportType", oldK)
	}
	e.FlowExportType = newK

	t.ExportType[newK] = e
	delete(t.ExportType, oldK)
	return nil
}

// GetOrCreateExportType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) GetOrCreateExportType(FlowExportType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType {

	key := FlowExportType

	if v, ok := t.ExportType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExportType(FlowExportType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExportType got unexpected error: %v", err))
	}
	return v
}

// GetExportType retrieves the value with the specified key from
// the ExportType map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) GetExportType(FlowExportType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType {

	if t == nil {
		return nil
	}

	key := FlowExportType

	if lm, ok := t.ExportType[key]; ok {
		return lm
	}
	return nil
}

// DeleteExportType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) DeleteExportType(FlowExportType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union) {
	key := FlowExportType

	delete(t.ExportType, key)
}

// AppendExportType appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct to the
// list ExportType of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) AppendExportType(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) error {
	key := v.FlowExportType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportType == nil {
		t.ExportType = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType)
	}

	if _, ok := t.ExportType[key]; ok {
		return fmt.Errorf("duplicate key for list ExportType %v", key)
	}

	t.ExportType[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExportType {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/cflowd/export-type YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                                     `path:"admin-state" module:"nokia-conf"`
	AppGroup       map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup    `path:"app-group" module:"nokia-conf"`
	Application    map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application `path:"application" module:"nokia-conf"`
	FlowExportType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union    `path:"flow-export-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) IsYANGGoStruct() {
}

// NewAppGroup creates a new entry in the AppGroup list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) NewAppGroup(AppGroupName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup)
	}

	key := AppGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppGroup", key)
	}

	t.AppGroup[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup{
		AppGroupName: &AppGroupName,
	}

	return t.AppGroup[key], nil
}

// RenameAppGroup renames an entry in the list AppGroup within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) RenameAppGroup(oldK, newK string) error {
	if _, ok := t.AppGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AppGroup", newK)
	}

	e, ok := t.AppGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppGroup", oldK)
	}
	e.AppGroupName = &newK

	t.AppGroup[newK] = e
	delete(t.AppGroup, oldK)
	return nil
}

// GetOrCreateAppGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetOrCreateAppGroup(AppGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup {

	key := AppGroupName

	if v, ok := t.AppGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppGroup(AppGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppGroup got unexpected error: %v", err))
	}
	return v
}

// GetAppGroup retrieves the value with the specified key from
// the AppGroup map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetAppGroup(AppGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup {

	if t == nil {
		return nil
	}

	key := AppGroupName

	if lm, ok := t.AppGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) DeleteAppGroup(AppGroupName string) {
	key := AppGroupName

	delete(t.AppGroup, key)
}

// AppendAppGroup appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup struct to the
// list AppGroup of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) AppendAppGroup(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) error {
	if v.AppGroupName == nil {
		return fmt.Errorf("invalid nil key received for AppGroupName")
	}

	key := *v.AppGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup)
	}

	if _, ok := t.AppGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AppGroup %v", key)
	}

	t.AppGroup[key] = v
	return nil
}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) NewApplication(ApplicationName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application{
		ApplicationName: &ApplicationName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) RenameApplication(oldK, newK string) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationName = &newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetOrCreateApplication(ApplicationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application {

	key := ApplicationName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetApplication(ApplicationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application {

	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) DeleteApplication(ApplicationName string) {
	key := ApplicationName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application struct to the
// list Application of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) AppendApplication(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetFlowExportType retrieves the value of the leaf FlowExportType from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowExportType is set, it can
// safely use t.GetFlowExportType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowExportType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetFlowExportType() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_FlowExportType_Union {
	if t == nil || t.FlowExportType == nil {
		return nil
	}
	return t.FlowExportType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.AppGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"flow-export-type": t.FlowExportType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/cflowd/export-type/app-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup struct {
	AppGroupName *string                                                                                                       `path:"app-group-name" module:"nokia-conf"`
	RateChoice   E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice `path:"rate-choice" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) IsYANGGoStruct() {
}

// GetAppGroupName retrieves the value of the leaf AppGroupName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppGroupName is set, it can
// safely use t.GetAppGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) GetAppGroupName() string {
	if t == nil || t.AppGroupName == nil {
		return ""
	}
	return *t.AppGroupName
}

// GetRateChoice retrieves the value of the leaf RateChoice from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateChoice is set, it can
// safely use t.GetRateChoice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateChoice == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) GetRateChoice() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice {
	if t == nil || t.RateChoice == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice_flow_rate
	}
	return t.RateChoice
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateChoice == 0 {
		t.RateChoice = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice_flow_rate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppGroupName == nil {
		return nil, fmt.Errorf("nil value for key AppGroupName")
	}

	return map[string]interface{}{
		"app-group-name": *t.AppGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/cflowd/export-type/application YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application struct {
	ApplicationName *string                                                                                                          `path:"application-name" module:"nokia-conf"`
	RateChoice      E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice `path:"rate-choice" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) IsYANGGoStruct() {
}

// GetApplicationName retrieves the value of the leaf ApplicationName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetRateChoice retrieves the value of the leaf RateChoice from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateChoice is set, it can
// safely use t.GetRateChoice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateChoice == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) GetRateChoice() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice {
	if t == nil || t.RateChoice == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice_flow_rate
	}
	return t.RateChoice
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateChoice == 0 {
		t.RateChoice = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice_flow_rate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/event-log YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                 `path:"admin-state" module:"nokia-conf"`
	BufferType   E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_BufferType `path:"buffer-type" module:"nokia-conf"`
	EventLogName *string                                                                                     `path:"event-log-name" module:"nokia-conf"`
	MaxEntries   *uint32                                                                                     `path:"max-entries" module:"nokia-conf"`
	Syslog       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog      `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) IsYANGGoStruct() {
}

// GetOrCreateSyslog retrieves the value of the Syslog field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) GetOrCreateSyslog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog {
	if t.Syslog != nil {
		return t.Syslog
	}
	t.Syslog = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog{}
	return t.Syslog
}

// GetSyslog returns the value of the Syslog struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog. If the receiver or the field Syslog is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) GetSyslog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog {
	if t != nil && t.Syslog != nil {
		return t.Syslog
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBufferType retrieves the value of the leaf BufferType from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferType is set, it can
// safely use t.GetBufferType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) GetBufferType() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_BufferType {
	if t == nil || t.BufferType == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_BufferType_linear
	}
	return t.BufferType
}

// GetEventLogName retrieves the value of the leaf EventLogName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLogName is set, it can
// safely use t.GetEventLogName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLogName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) GetEventLogName() string {
	if t == nil || t.EventLogName == nil {
		return ""
	}
	return *t.EventLogName
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 500
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BufferType == 0 {
		t.BufferType = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_BufferType_linear
	}
	if t.MaxEntries == nil {
		var v uint32 = 500
		t.MaxEntries = &v
	}
	t.Syslog.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EventLogName == nil {
		return nil, fmt.Errorf("nil value for key EventLogName")
	}

	return map[string]interface{}{
		"event-log-name": *t.EventLogName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/event-log/syslog YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog struct {
	Address     *string                                                                                          `path:"address" module:"nokia-conf"`
	Description *string                                                                                          `path:"description" module:"nokia-conf"`
	Facility    E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility `path:"facility" module:"nokia-conf"`
	Port        *uint16                                                                                          `path:"port" module:"nokia-conf"`
	Severity    E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity `path:"severity" module:"nokia-conf"`
	VlanId      *uint32                                                                                          `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacility retrieves the value of the leaf Facility from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetFacility() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility {
	if t == nil || t.Facility == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility_local7
	}
	return t.Facility
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 514
	}
	return *t.Port
}

// GetSeverity retrieves the value of the leaf Severity from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetSeverity() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity {
	if t == nil || t.Severity == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity_info
	}
	return t.Severity
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetVlanId() uint32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Facility == 0 {
		t.Facility = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility_local7
	}
	if t.Port == nil {
		var v uint16 = 514
		t.Port = &v
	}
	if t.Severity == 0 {
		t.Severity = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity_info
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_EventLog_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	GtpFilter      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter `path:"gtp-filter" module:"nokia-conf"`
	GtpcInspection *bool                                                                                           `path:"gtpc-inspection" module:"nokia-conf"`
	Log            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log                  `path:"log" module:"nokia-conf"`
	Mode           E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Mode                `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) IsYANGGoStruct() {}

// NewGtpFilter creates a new entry in the GtpFilter list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) NewGtpFilter(GtpFilterName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter)
	}

	key := GtpFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GtpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GtpFilter", key)
	}

	t.GtpFilter[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter{
		GtpFilterName: &GtpFilterName,
	}

	return t.GtpFilter[key], nil
}

// RenameGtpFilter renames an entry in the list GtpFilter within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) RenameGtpFilter(oldK, newK string) error {
	if _, ok := t.GtpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in GtpFilter", newK)
	}

	e, ok := t.GtpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GtpFilter", oldK)
	}
	e.GtpFilterName = &newK

	t.GtpFilter[newK] = e
	delete(t.GtpFilter, oldK)
	return nil
}

// GetOrCreateGtpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) GetOrCreateGtpFilter(GtpFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter {

	key := GtpFilterName

	if v, ok := t.GtpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpFilter(GtpFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpFilter got unexpected error: %v", err))
	}
	return v
}

// GetGtpFilter retrieves the value with the specified key from
// the GtpFilter map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) GetGtpFilter(GtpFilterName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter {

	if t == nil {
		return nil
	}

	key := GtpFilterName

	if lm, ok := t.GtpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) DeleteGtpFilter(GtpFilterName string) {
	key := GtpFilterName

	delete(t.GtpFilter, key)
}

// AppendGtpFilter appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter struct to the
// list GtpFilter of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) AppendGtpFilter(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) error {
	if v.GtpFilterName == nil {
		return fmt.Errorf("invalid nil key received for GtpFilterName")
	}

	key := *v.GtpFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter)
	}

	if _, ok := t.GtpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list GtpFilter %v", key)
	}

	t.GtpFilter[key] = v
	return nil
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) GetOrCreateLog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log{}
	return t.Log
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) GetLog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetGtpcInspection retrieves the value of the leaf GtpcInspection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpcInspection is set, it can
// safely use t.GetGtpcInspection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpcInspection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) GetGtpcInspection() bool {
	if t == nil || t.GtpcInspection == nil {
		return false
	}
	return *t.GtpcInspection
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) GetMode() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Mode_filtering
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.GtpcInspection == nil {
		var v bool = false
		t.GtpcInspection = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Mode_filtering
	}
	t.Log.PopulateDefaults()
	for _, e := range t.GtpFilter {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter struct {
	Description       *string                                                                                                `path:"description" module:"nokia-conf"`
	GtpFilterName     *string                                                                                                `path:"gtp-filter-name" module:"nokia-conf"`
	GtpInGtp          E_NokiaTypesApplicationAssurance_PermitDenyAction                                                      `path:"gtp-in-gtp" module:"nokia-conf"`
	GtpTunnelDatabase *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase `path:"gtp-tunnel-database" module:"nokia-conf"`
	ImsiApnFilter     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter     `path:"imsi-apn-filter" module:"nokia-conf"`
	Log               *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log               `path:"log" module:"nokia-conf"`
	MaxPayloadLength  *int32                                                                                                 `path:"max-payload-length" module:"nokia-conf"`
	MessageType       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType       `path:"message-type" module:"nokia-conf"`
	MessageTypeGtpV2  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2  `path:"message-type-gtp-v2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) IsYANGGoStruct() {
}

// GetOrCreateGtpTunnelDatabase retrieves the value of the GtpTunnelDatabase field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateGtpTunnelDatabase() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase {
	if t.GtpTunnelDatabase != nil {
		return t.GtpTunnelDatabase
	}
	t.GtpTunnelDatabase = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase{}
	return t.GtpTunnelDatabase
}

// GetOrCreateImsiApnFilter retrieves the value of the ImsiApnFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateImsiApnFilter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter {
	if t.ImsiApnFilter != nil {
		return t.ImsiApnFilter
	}
	t.ImsiApnFilter = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter{}
	return t.ImsiApnFilter
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateLog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log{}
	return t.Log
}

// GetOrCreateMessageType retrieves the value of the MessageType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateMessageType() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType {
	if t.MessageType != nil {
		return t.MessageType
	}
	t.MessageType = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType{}
	return t.MessageType
}

// GetOrCreateMessageTypeGtpV2 retrieves the value of the MessageTypeGtpV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateMessageTypeGtpV2() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 {
	if t.MessageTypeGtpV2 != nil {
		return t.MessageTypeGtpV2
	}
	t.MessageTypeGtpV2 = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2{}
	return t.MessageTypeGtpV2
}

// GetGtpTunnelDatabase returns the value of the GtpTunnelDatabase struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field GtpTunnelDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetGtpTunnelDatabase() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase {
	if t != nil && t.GtpTunnelDatabase != nil {
		return t.GtpTunnelDatabase
	}
	return nil
}

// GetImsiApnFilter returns the value of the ImsiApnFilter struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field ImsiApnFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetImsiApnFilter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter {
	if t != nil && t.ImsiApnFilter != nil {
		return t.ImsiApnFilter
	}
	return nil
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetLog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetMessageType returns the value of the MessageType struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field MessageType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetMessageType() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType {
	if t != nil && t.MessageType != nil {
		return t.MessageType
	}
	return nil
}

// GetMessageTypeGtpV2 returns the value of the MessageTypeGtpV2 struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field MessageTypeGtpV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetMessageTypeGtpV2() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 {
	if t != nil && t.MessageTypeGtpV2 != nil {
		return t.MessageTypeGtpV2
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGtpFilterName retrieves the value of the leaf GtpFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterName is set, it can
// safely use t.GetGtpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetGtpFilterName() string {
	if t == nil || t.GtpFilterName == nil {
		return ""
	}
	return *t.GtpFilterName
}

// GetGtpInGtp retrieves the value of the leaf GtpInGtp from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpInGtp is set, it can
// safely use t.GetGtpInGtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpInGtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetGtpInGtp() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.GtpInGtp == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.GtpInGtp
}

// GetMaxPayloadLength retrieves the value of the leaf MaxPayloadLength from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPayloadLength is set, it can
// safely use t.GetMaxPayloadLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPayloadLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetMaxPayloadLength() int32 {
	if t == nil || t.MaxPayloadLength == nil {
		return 0
	}
	return *t.MaxPayloadLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GtpInGtp == 0 {
		t.GtpInGtp = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	t.GtpTunnelDatabase.PopulateDefaults()
	t.ImsiApnFilter.PopulateDefaults()
	t.Log.PopulateDefaults()
	t.MessageType.PopulateDefaults()
	t.MessageTypeGtpV2.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GtpFilterName == nil {
		return nil, fmt.Errorf("nil value for key GtpFilterName")
	}

	return map[string]interface{}{
		"gtp-filter-name": *t.GtpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/gtp-tunnel-database YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase struct {
	DefaultTunnelEndpointLimit *uint32 `path:"default-tunnel-endpoint-limit" module:"nokia-conf"`
	ValidateGtpTunnels         *bool   `path:"validate-gtp-tunnels" module:"nokia-conf"`
	ValidateSequenceNumber     *bool   `path:"validate-sequence-number" module:"nokia-conf"`
	ValidateSourceIpAddr       *bool   `path:"validate-source-ip-addr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) IsYANGGoStruct() {
}

// GetDefaultTunnelEndpointLimit retrieves the value of the leaf DefaultTunnelEndpointLimit from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTunnelEndpointLimit is set, it can
// safely use t.GetDefaultTunnelEndpointLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTunnelEndpointLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetDefaultTunnelEndpointLimit() uint32 {
	if t == nil || t.DefaultTunnelEndpointLimit == nil {
		return 4294967295
	}
	return *t.DefaultTunnelEndpointLimit
}

// GetValidateGtpTunnels retrieves the value of the leaf ValidateGtpTunnels from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateGtpTunnels is set, it can
// safely use t.GetValidateGtpTunnels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateGtpTunnels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetValidateGtpTunnels() bool {
	if t == nil || t.ValidateGtpTunnels == nil {
		return false
	}
	return *t.ValidateGtpTunnels
}

// GetValidateSequenceNumber retrieves the value of the leaf ValidateSequenceNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateSequenceNumber is set, it can
// safely use t.GetValidateSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateSequenceNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetValidateSequenceNumber() bool {
	if t == nil || t.ValidateSequenceNumber == nil {
		return false
	}
	return *t.ValidateSequenceNumber
}

// GetValidateSourceIpAddr retrieves the value of the leaf ValidateSourceIpAddr from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateSourceIpAddr is set, it can
// safely use t.GetValidateSourceIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateSourceIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetValidateSourceIpAddr() bool {
	if t == nil || t.ValidateSourceIpAddr == nil {
		return false
	}
	return *t.ValidateSourceIpAddr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultTunnelEndpointLimit == nil {
		var v uint32 = 4294967295
		t.DefaultTunnelEndpointLimit = &v
	}
	if t.ValidateGtpTunnels == nil {
		var v bool = false
		t.ValidateGtpTunnels = &v
	}
	if t.ValidateSequenceNumber == nil {
		var v bool = false
		t.ValidateSequenceNumber = &v
	}
	if t.ValidateSourceIpAddr == nil {
		var v bool = false
		t.ValidateSourceIpAddr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/imsi-apn-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                                                                                                                                                                  `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/imsi-apn-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry struct {
	Action           E_NokiaTypesApplicationAssurance_PermitDenyAction                                                                     `path:"action" module:"nokia-conf"`
	Apn              *string                                                                                                               `path:"apn" module:"nokia-conf"`
	EntryId          NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	ImsiMccMncPrefix *string                                                                                                               `path:"imsi-mcc-mnc-prefix" module:"nokia-conf"`
	SrcGsn           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn       `path:"src-gsn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateSrcGsn retrieves the value of the SrcGsn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetOrCreateSrcGsn() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn {
	if t.SrcGsn != nil {
		return t.SrcGsn
	}
	t.SrcGsn = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn{}
	return t.SrcGsn
}

// GetSrcGsn returns the value of the SrcGsn struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry. If the receiver or the field SrcGsn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetSrcGsn() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn {
	if t != nil && t.SrcGsn != nil {
		return t.SrcGsn
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.Action
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetApn() string {
	if t == nil || t.Apn == nil {
		return ""
	}
	return *t.Apn
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetImsiMccMncPrefix retrieves the value of the leaf ImsiMccMncPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImsiMccMncPrefix is set, it can
// safely use t.GetImsiMccMncPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImsiMccMncPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetImsiMccMncPrefix() string {
	if t == nil || t.ImsiMccMncPrefix == nil {
		return ""
	}
	return *t.ImsiMccMncPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	t.SrcGsn.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/imsi-apn-filter/entry/src-gsn YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/log YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log struct {
	Action   E_NokiaTypesApplicationAssurance_EventLogAction `path:"action" module:"nokia-conf"`
	EventLog *string                                         `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) GetAction() E_NokiaTypesApplicationAssurance_EventLogAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_EventLogAction_deny
	}
	return t.Action
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_EventLogAction_deny
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/message-type YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                                                                                                                                                              `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/message-type-gtp-v2 YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                                                                                                                                                                        `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/message-type-gtp-v2/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry struct {
	Action  E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault                                                               `path:"action" module:"nokia-conf"`
	EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Value   NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_Value_Union   `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetValue() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/gtp-filter/message-type/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry struct {
	Action  E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault                                                          `path:"action" module:"nokia-conf"`
	EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Value   NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_Value_Union   `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetValue() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/gtp/log YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log struct {
	Action   E_NokiaTypesApplicationAssurance_EventLogAction `path:"action" module:"nokia-conf"`
	EventLog *string                                         `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) GetAction() E_NokiaTypesApplicationAssurance_EventLogAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_EventLogAction_deny
	}
	return t.Action
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_EventLogAction_deny
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Gtp_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/ip-prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList struct {
	Description      *string                                                                                               `path:"description" module:"nokia-conf"`
	IpPrefixListName *string                                                                                               `path:"ip-prefix-list-name" module:"nokia-conf"`
	Prefix           map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) IsYANGGoStruct() {
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) AppendPrefix(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefixListName retrieves the value of the leaf IpPrefixListName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixListName is set, it can
// safely use t.GetIpPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) GetIpPrefixListName() string {
	if t == nil || t.IpPrefixListName == nil {
		return ""
	}
	return *t.IpPrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixListName == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixListName")
	}

	return map[string]interface{}{
		"ip-prefix-list-name": *t.IpPrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/ip-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
	Name     *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct {
	AppFilter                    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter                 `path:"app-filter" module:"nokia-conf"`
	AppGroup                     map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup       `path:"app-group" module:"nokia-conf"`
	AppProfile                   map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile     `path:"app-profile" module:"nokia-conf"`
	AppQosPolicy                 *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy              `path:"app-qos-policy" module:"nokia-conf"`
	AppServiceOptions            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions         `path:"app-service-options" module:"nokia-conf"`
	Application                  map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application    `path:"application" module:"nokia-conf"`
	ChargingGroup                map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup  `path:"charging-group" module:"nokia-conf"`
	CustomProtocol               map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol `path:"custom-protocol" module:"nokia-conf"`
	DefaultChargingGroup         *string                                                                                                 `path:"default-charging-group" module:"nokia-conf"`
	DefaultTetheredChargingGroup *string                                                                                                 `path:"default-tethered-charging-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) IsYANGGoStruct() {
}

// NewAppGroup creates a new entry in the AppGroup list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) NewAppGroup(ApplicationGroupName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup)
	}

	key := ApplicationGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppGroup", key)
	}

	t.AppGroup[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup{
		ApplicationGroupName: &ApplicationGroupName,
	}

	return t.AppGroup[key], nil
}

// RenameAppGroup renames an entry in the list AppGroup within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) RenameAppGroup(oldK, newK string) error {
	if _, ok := t.AppGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AppGroup", newK)
	}

	e, ok := t.AppGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppGroup", oldK)
	}
	e.ApplicationGroupName = &newK

	t.AppGroup[newK] = e
	delete(t.AppGroup, oldK)
	return nil
}

// GetOrCreateAppGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppGroup(ApplicationGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup {

	key := ApplicationGroupName

	if v, ok := t.AppGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppGroup(ApplicationGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppGroup got unexpected error: %v", err))
	}
	return v
}

// GetAppGroup retrieves the value with the specified key from
// the AppGroup map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetAppGroup(ApplicationGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup {

	if t == nil {
		return nil
	}

	key := ApplicationGroupName

	if lm, ok := t.AppGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) DeleteAppGroup(ApplicationGroupName string) {
	key := ApplicationGroupName

	delete(t.AppGroup, key)
}

// AppendAppGroup appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup struct to the
// list AppGroup of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) AppendAppGroup(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) error {
	if v.ApplicationGroupName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationGroupName")
	}

	key := *v.ApplicationGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup)
	}

	if _, ok := t.AppGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AppGroup %v", key)
	}

	t.AppGroup[key] = v
	return nil
}

// NewAppProfile creates a new entry in the AppProfile list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) NewAppProfile(AppProfileName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppProfile == nil {
		t.AppProfile = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile)
	}

	key := AppProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppProfile", key)
	}

	t.AppProfile[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile{
		AppProfileName: &AppProfileName,
	}

	return t.AppProfile[key], nil
}

// RenameAppProfile renames an entry in the list AppProfile within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) RenameAppProfile(oldK, newK string) error {
	if _, ok := t.AppProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in AppProfile", newK)
	}

	e, ok := t.AppProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppProfile", oldK)
	}
	e.AppProfileName = &newK

	t.AppProfile[newK] = e
	delete(t.AppProfile, oldK)
	return nil
}

// GetOrCreateAppProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppProfile(AppProfileName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile {

	key := AppProfileName

	if v, ok := t.AppProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppProfile(AppProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppProfile got unexpected error: %v", err))
	}
	return v
}

// GetAppProfile retrieves the value with the specified key from
// the AppProfile map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetAppProfile(AppProfileName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile {

	if t == nil {
		return nil
	}

	key := AppProfileName

	if lm, ok := t.AppProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) DeleteAppProfile(AppProfileName string) {
	key := AppProfileName

	delete(t.AppProfile, key)
}

// AppendAppProfile appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile struct to the
// list AppProfile of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) AppendAppProfile(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) error {
	if v.AppProfileName == nil {
		return fmt.Errorf("invalid nil key received for AppProfileName")
	}

	key := *v.AppProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppProfile == nil {
		t.AppProfile = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile)
	}

	if _, ok := t.AppProfile[key]; ok {
		return fmt.Errorf("duplicate key for list AppProfile %v", key)
	}

	t.AppProfile[key] = v
	return nil
}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) NewApplication(ApplicationName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application{
		ApplicationName: &ApplicationName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) RenameApplication(oldK, newK string) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationName = &newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateApplication(ApplicationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application {

	key := ApplicationName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetApplication(ApplicationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application {

	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) DeleteApplication(ApplicationName string) {
	key := ApplicationName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application struct to the
// list Application of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) AppendApplication(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// NewChargingGroup creates a new entry in the ChargingGroup list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) NewChargingGroup(ChargingGroupName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup)
	}

	key := ChargingGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChargingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChargingGroup", key)
	}

	t.ChargingGroup[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup{
		ChargingGroupName: &ChargingGroupName,
	}

	return t.ChargingGroup[key], nil
}

// RenameChargingGroup renames an entry in the list ChargingGroup within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) RenameChargingGroup(oldK, newK string) error {
	if _, ok := t.ChargingGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChargingGroup", newK)
	}

	e, ok := t.ChargingGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChargingGroup", oldK)
	}
	e.ChargingGroupName = &newK

	t.ChargingGroup[newK] = e
	delete(t.ChargingGroup, oldK)
	return nil
}

// GetOrCreateChargingGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateChargingGroup(ChargingGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup {

	key := ChargingGroupName

	if v, ok := t.ChargingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChargingGroup(ChargingGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChargingGroup got unexpected error: %v", err))
	}
	return v
}

// GetChargingGroup retrieves the value with the specified key from
// the ChargingGroup map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetChargingGroup(ChargingGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup {

	if t == nil {
		return nil
	}

	key := ChargingGroupName

	if lm, ok := t.ChargingGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChargingGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) DeleteChargingGroup(ChargingGroupName string) {
	key := ChargingGroupName

	delete(t.ChargingGroup, key)
}

// AppendChargingGroup appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup struct to the
// list ChargingGroup of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) AppendChargingGroup(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) error {
	if v.ChargingGroupName == nil {
		return fmt.Errorf("invalid nil key received for ChargingGroupName")
	}

	key := *v.ChargingGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup)
	}

	if _, ok := t.ChargingGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChargingGroup %v", key)
	}

	t.ChargingGroup[key] = v
	return nil
}

// NewCustomProtocol creates a new entry in the CustomProtocol list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) NewCustomProtocol(CustomProtocolId string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomProtocol == nil {
		t.CustomProtocol = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol)
	}

	key := CustomProtocolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CustomProtocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CustomProtocol", key)
	}

	t.CustomProtocol[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol{
		CustomProtocolId: &CustomProtocolId,
	}

	return t.CustomProtocol[key], nil
}

// RenameCustomProtocol renames an entry in the list CustomProtocol within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) RenameCustomProtocol(oldK, newK string) error {
	if _, ok := t.CustomProtocol[newK]; ok {
		return fmt.Errorf("key %v already exists in CustomProtocol", newK)
	}

	e, ok := t.CustomProtocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CustomProtocol", oldK)
	}
	e.CustomProtocolId = &newK

	t.CustomProtocol[newK] = e
	delete(t.CustomProtocol, oldK)
	return nil
}

// GetOrCreateCustomProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateCustomProtocol(CustomProtocolId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol {

	key := CustomProtocolId

	if v, ok := t.CustomProtocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCustomProtocol(CustomProtocolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCustomProtocol got unexpected error: %v", err))
	}
	return v
}

// GetCustomProtocol retrieves the value with the specified key from
// the CustomProtocol map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetCustomProtocol(CustomProtocolId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol {

	if t == nil {
		return nil
	}

	key := CustomProtocolId

	if lm, ok := t.CustomProtocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteCustomProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) DeleteCustomProtocol(CustomProtocolId string) {
	key := CustomProtocolId

	delete(t.CustomProtocol, key)
}

// AppendCustomProtocol appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct to the
// list CustomProtocol of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) AppendCustomProtocol(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) error {
	if v.CustomProtocolId == nil {
		return fmt.Errorf("invalid nil key received for CustomProtocolId")
	}

	key := *v.CustomProtocolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomProtocol == nil {
		t.CustomProtocol = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol)
	}

	if _, ok := t.CustomProtocol[key]; ok {
		return fmt.Errorf("duplicate key for list CustomProtocol %v", key)
	}

	t.CustomProtocol[key] = v
	return nil
}

// GetOrCreateAppFilter retrieves the value of the AppFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppFilter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter {
	if t.AppFilter != nil {
		return t.AppFilter
	}
	t.AppFilter = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter{}
	return t.AppFilter
}

// GetOrCreateAppQosPolicy retrieves the value of the AppQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppQosPolicy() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy {
	if t.AppQosPolicy != nil {
		return t.AppQosPolicy
	}
	t.AppQosPolicy = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy{}
	return t.AppQosPolicy
}

// GetOrCreateAppServiceOptions retrieves the value of the AppServiceOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppServiceOptions() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions {
	if t.AppServiceOptions != nil {
		return t.AppServiceOptions
	}
	t.AppServiceOptions = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions{}
	return t.AppServiceOptions
}

// GetAppFilter returns the value of the AppFilter struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver or the field AppFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetAppFilter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter {
	if t != nil && t.AppFilter != nil {
		return t.AppFilter
	}
	return nil
}

// GetAppQosPolicy returns the value of the AppQosPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver or the field AppQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetAppQosPolicy() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy {
	if t != nil && t.AppQosPolicy != nil {
		return t.AppQosPolicy
	}
	return nil
}

// GetAppServiceOptions returns the value of the AppServiceOptions struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy. If the receiver or the field AppServiceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetAppServiceOptions() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions {
	if t != nil && t.AppServiceOptions != nil {
		return t.AppServiceOptions
	}
	return nil
}

// GetDefaultChargingGroup retrieves the value of the leaf DefaultChargingGroup from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultChargingGroup is set, it can
// safely use t.GetDefaultChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetDefaultChargingGroup() string {
	if t == nil || t.DefaultChargingGroup == nil {
		return ""
	}
	return *t.DefaultChargingGroup
}

// GetDefaultTetheredChargingGroup retrieves the value of the leaf DefaultTetheredChargingGroup from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTetheredChargingGroup is set, it can
// safely use t.GetDefaultTetheredChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTetheredChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) GetDefaultTetheredChargingGroup() string {
	if t == nil || t.DefaultTetheredChargingGroup == nil {
		return ""
	}
	return *t.DefaultTetheredChargingGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AppFilter.PopulateDefaults()
	t.AppQosPolicy.PopulateDefaults()
	t.AppServiceOptions.PopulateDefaults()
	for _, e := range t.AppGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.AppProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
	for _, e := range t.ChargingGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.CustomProtocol {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride struct {
	AaSub *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub `path:"aa-sub" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) IsYANGGoStruct() {
}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) GetOrCreateAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub{}
	return t.AaSub
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) GetAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AaSub.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override/aa-sub YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct {
	Sap      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Transit  map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit  `path:"transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) IsYANGGoStruct() {
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) AppendSap(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewTransit creates a new entry in the Transit list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) NewTransit(TransitSubName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit)
	}

	key := TransitSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Transit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Transit", key)
	}

	t.Transit[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit{
		TransitSubName: &TransitSubName,
	}

	return t.Transit[key], nil
}

// RenameTransit renames an entry in the list Transit within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) RenameTransit(oldK, newK string) error {
	if _, ok := t.Transit[newK]; ok {
		return fmt.Errorf("key %v already exists in Transit", newK)
	}

	e, ok := t.Transit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Transit", oldK)
	}
	e.TransitSubName = &newK

	t.Transit[newK] = e
	delete(t.Transit, oldK)
	return nil
}

// GetOrCreateTransit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetOrCreateTransit(TransitSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit {

	key := TransitSubName

	if v, ok := t.Transit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransit(TransitSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransit got unexpected error: %v", err))
	}
	return v
}

// GetTransit retrieves the value with the specified key from
// the Transit map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetTransit(TransitSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit {

	if t == nil {
		return nil
	}

	key := TransitSubName

	if lm, ok := t.Transit[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) DeleteTransit(TransitSubName string) {
	key := TransitSubName

	delete(t.Transit, key)
}

// AppendTransit appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct to the
// list Transit of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) AppendTransit(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) error {
	if v.TransitSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitSubName")
	}

	key := *v.TransitSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit)
	}

	if _, ok := t.Transit[key]; ok {
		return fmt.Errorf("duplicate key for list Transit %v", key)
	}

	t.Transit[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Transit {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override/aa-sub/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct {
	Characteristic map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic `path:"characteristic" module:"nokia-conf"`
	SapId          *string                                                                                                                   `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) AppendCharacteristic(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override/aa-sub/sap/characteristic YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic struct {
	CharacteristicName *string `path:"characteristic-name" module:"nokia-conf"`
	Value              *string `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) IsYANGGoStruct() {
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override/aa-sub/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct {
	Characteristic map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic `path:"characteristic" module:"nokia-conf"`
	SdpBindId      *string                                                                                                                        `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) AppendCharacteristic(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override/aa-sub/spoke-sdp/characteristic YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic struct {
	CharacteristicName *string `path:"characteristic-name" module:"nokia-conf"`
	Value              *string `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) IsYANGGoStruct() {
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override/aa-sub/transit YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct {
	Characteristic map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic `path:"characteristic" module:"nokia-conf"`
	TransitSubName *string                                                                                                                       `path:"transit-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) AppendCharacteristic(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetTransitSubName retrieves the value of the leaf TransitSubName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitSubName is set, it can
// safely use t.GetTransitSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetTransitSubName() string {
	if t == nil || t.TransitSubName == nil {
		return ""
	}
	return *t.TransitSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitSubName")
	}

	return map[string]interface{}{
		"transit-sub-name": *t.TransitSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy-override/aa-sub/transit/characteristic YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic struct {
	CharacteristicName *string `path:"characteristic-name" module:"nokia-conf"`
	Value              *string `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) IsYANGGoStruct() {
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter struct {
	Entry map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                                                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	Application          *string                                                                                                                                                                                                                              `path:"application" module:"nokia-conf"`
	Description          *string                                                                                                                                                                                                                              `path:"description" module:"nokia-conf"`
	EntryId              NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union                                                                                                                           `path:"entry-id" module:"nokia-conf"`
	Expression           map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression `path:"expression" module:"nokia-conf"`
	FlowSetupDirection   E_NokiaTypesApplicationAssurance_TrafficDirection                                                                                                                                                                                    `path:"flow-setup-direction" module:"nokia-conf"`
	HttpMatchAllRequests *bool                                                                                                                                                                                                                                `path:"http-match-all-requests" module:"nokia-conf"`
	HttpPort             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort                                                                                                                               `path:"http-port" module:"nokia-conf"`
	IpProtocol           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol                                                                                                                             `path:"ip-protocol" module:"nokia-conf"`
	NetworkAddress       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress                                                                                                                         `path:"network-address" module:"nokia-conf"`
	Protocol             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol                                                                                                                               `path:"protocol" module:"nokia-conf"`
	ServerAddress        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress                                                                                                                          `path:"server-address" module:"nokia-conf"`
	ServerPort           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort                                                                                                                             `path:"server-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) IsYANGGoStruct() {
}

// NewExpression creates a new entry in the Expression list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) NewExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression)
	}

	key := ExprIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Expression[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Expression", key)
	}

	t.Expression[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression{
		ExprIndex: ExprIndex,
	}

	return t.Expression[key], nil
}

// RenameExpression renames an entry in the list Expression within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) RenameExpression(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union) error {
	if _, ok := t.Expression[newK]; ok {
		return fmt.Errorf("key %v already exists in Expression", newK)
	}

	e, ok := t.Expression[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Expression", oldK)
	}
	e.ExprIndex = newK

	t.Expression[newK] = e
	delete(t.Expression, oldK)
	return nil
}

// GetOrCreateExpression retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression {

	key := ExprIndex

	if v, ok := t.Expression[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpression(ExprIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpression got unexpected error: %v", err))
	}
	return v
}

// GetExpression retrieves the value with the specified key from
// the Expression map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression {

	if t == nil {
		return nil
	}

	key := ExprIndex

	if lm, ok := t.Expression[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpression deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) DeleteExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union) {
	key := ExprIndex

	delete(t.Expression, key)
}

// AppendExpression appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression struct to the
// list Expression of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) AppendExpression(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) error {
	key := v.ExprIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression)
	}

	if _, ok := t.Expression[key]; ok {
		return fmt.Errorf("duplicate key for list Expression %v", key)
	}

	t.Expression[key] = v
	return nil
}

// GetOrCreateHttpPort retrieves the value of the HttpPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateHttpPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort {
	if t.HttpPort != nil {
		return t.HttpPort
	}
	t.HttpPort = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort{}
	return t.HttpPort
}

// GetOrCreateIpProtocol retrieves the value of the IpProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateIpProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol {
	if t.IpProtocol != nil {
		return t.IpProtocol
	}
	t.IpProtocol = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol{}
	return t.IpProtocol
}

// GetOrCreateNetworkAddress retrieves the value of the NetworkAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateNetworkAddress() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress {
	if t.NetworkAddress != nil {
		return t.NetworkAddress
	}
	t.NetworkAddress = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress{}
	return t.NetworkAddress
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol{}
	return t.Protocol
}

// GetOrCreateServerAddress retrieves the value of the ServerAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateServerAddress() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress {
	if t.ServerAddress != nil {
		return t.ServerAddress
	}
	t.ServerAddress = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress{}
	return t.ServerAddress
}

// GetOrCreateServerPort retrieves the value of the ServerPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateServerPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort {
	if t.ServerPort != nil {
		return t.ServerPort
	}
	t.ServerPort = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort{}
	return t.ServerPort
}

// GetHttpPort returns the value of the HttpPort struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field HttpPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetHttpPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort {
	if t != nil && t.HttpPort != nil {
		return t.HttpPort
	}
	return nil
}

// GetIpProtocol returns the value of the IpProtocol struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field IpProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetIpProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol {
	if t != nil && t.IpProtocol != nil {
		return t.IpProtocol
	}
	return nil
}

// GetNetworkAddress returns the value of the NetworkAddress struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field NetworkAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetNetworkAddress() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress {
	if t != nil && t.NetworkAddress != nil {
		return t.NetworkAddress
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetServerAddress returns the value of the ServerAddress struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field ServerAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetServerAddress() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress {
	if t != nil && t.ServerAddress != nil {
		return t.ServerAddress
	}
	return nil
}

// GetServerPort returns the value of the ServerPort struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field ServerPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetServerPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort {
	if t != nil && t.ServerPort != nil {
		return t.ServerPort
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetApplication() string {
	if t == nil || t.Application == nil {
		return ""
	}
	return *t.Application
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetFlowSetupDirection retrieves the value of the leaf FlowSetupDirection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupDirection is set, it can
// safely use t.GetFlowSetupDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupDirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetFlowSetupDirection() E_NokiaTypesApplicationAssurance_TrafficDirection {
	if t == nil || t.FlowSetupDirection == 0 {
		return NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	return t.FlowSetupDirection
}

// GetHttpMatchAllRequests retrieves the value of the leaf HttpMatchAllRequests from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpMatchAllRequests is set, it can
// safely use t.GetHttpMatchAllRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpMatchAllRequests == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetHttpMatchAllRequests() bool {
	if t == nil || t.HttpMatchAllRequests == nil {
		return false
	}
	return *t.HttpMatchAllRequests
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FlowSetupDirection == 0 {
		t.FlowSetupDirection = NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	if t.HttpMatchAllRequests == nil {
		var v bool = false
		t.HttpMatchAllRequests = &v
	}
	t.HttpPort.PopulateDefaults()
	t.IpProtocol.PopulateDefaults()
	t.NetworkAddress.PopulateDefaults()
	t.Protocol.PopulateDefaults()
	t.ServerAddress.PopulateDefaults()
	t.ServerPort.PopulateDefaults()
	for _, e := range t.Expression {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/expression YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression struct {
	Eq        *string                                                                                                                 `path:"eq" module:"nokia-conf"`
	ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union `path:"expr-index" module:"nokia-conf"`
	Neq       *string                                                                                                                 `path:"neq" module:"nokia-conf"`
	Type      E_NokiaTypesApplicationAssurance_ExprSubString                                                                          `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetExprIndex retrieves the value of the leaf ExprIndex from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExprIndex is set, it can
// safely use t.GetExprIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExprIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetExprIndex() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression_ExprIndex_Union {
	if t == nil || t.ExprIndex == nil {
		return nil
	}
	return t.ExprIndex
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetType() E_NokiaTypesApplicationAssurance_ExprSubString {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"expr-index": t.ExprIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/http-port YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) ΛBelongingModule() string {
	return "nokia-conf"
}
